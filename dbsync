#!/usr/bin/php
<?php

DbSync::run();

class DbSync
{
    const OPT_CONF = 'c';
    const OPT_SOURCE = 's';
    const OPT_TARGET = 't';
    const OPT_REPLACEMENTS_ONLY = 'r';
    const OPT_NO_REPLACEMENT = 'n';
    const OPT_FIX = 'f';
    const OPT_INCLUDE = 'i';
    const OPT_EXCLUDE = 'x';
    const OPT_HELP = 'h';
    const OPT_DEBUG = 'd';
    const OPT_VERBOSE = 'v';
    const OPT_FORCE = 'f';

    const LOPT_CONF = 'conf';
    const LOPT_SOURCE = 'source';
    const LOPT_TARGET = 'target';
    const LOPT_REPLACEMENTS_ONLY = 'replacements-only';
    const LOPT_NO_REPLACEMENT = 'no-replacement';
    const LOPT_FIX = 'fix';
    const LOPT_INCLUDE = 'include';
    const LOPT_EXCLUDE = 'exclude';
    const LOPT_HELP = 'help';
    const LOPT_DEBUG = 'debug';
    const LOPT_VERBOSE = 'verbose';
    const LOPT_FORCE = 'force';

    public static $confDefaultFile = 'dbsync.json';

    public static function run()
    {
        return new self();
    }

    private $config = null;

    private $srdb = 'srdb_%s.php';

    private $defaultPhp = 'php';

    // used to mark source env in dump file
    private $marker = '-- sync-db env: ';

    private $opts = array(
        self::OPT_CONF . ':'        => self::LOPT_CONF . ':',
        self::OPT_SOURCE . ':'      => self::LOPT_SOURCE . ':',
        self::OPT_TARGET . ':'      => self::LOPT_TARGET . ':',
        self::OPT_REPLACEMENTS_ONLY => self::LOPT_REPLACEMENTS_ONLY,
        self::OPT_NO_REPLACEMENT    => self::LOPT_NO_REPLACEMENT,
        self::OPT_FIX               => self::LOPT_FIX,
        self::OPT_INCLUDE . ':'     => self::LOPT_INCLUDE . ':',
        self::OPT_EXCLUDE . ':'     => self::LOPT_EXCLUDE . ':',
        self::OPT_HELP              => self::LOPT_HELP,
        self::OPT_DEBUG             => self::LOPT_DEBUG,
        self::OPT_VERBOSE           => self::LOPT_VERBOSE,
        self::OPT_FORCE             => self::LOPT_FORCE,
    );

    private $srdbOpts = array(
        't:' => 'tables:',
        'i:' => 'include-cols:',
        'x:' => 'exclude-cols:',
        'g'  => 'regex',
    );

    private $options = null;

    private $colors = array(
        'no'     => '00',
        'grey'   => '37',
        'yellow' => '33',
        'red'    => '31',
        'green'  => '32',
        'blue'   => '34',
        'purple' => '35',
        'ocean'  => '36',
        'dark'   => '30',
    );

    private $cmds = array(
        'test'      => 'echo "use {base};" | mysql -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'gzip_test' => 'gzip -V',
        'tables'    => 'echo "show tables;" | mysql --skip-column-names -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'source'    => 'mysqldump {options} -u "{user}" -p"{pass}" --add-drop-table --no-create-db -h "{host}" "{base}" {tables} {gzip}',
        'target'    => '{gzip} mysql {options} -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'markfile'  => '{ echo "{marker}{env}"; cat; } {gzip} > "{file}"',
        'tofile'    => ' cat {gzip} > "{file}"',
        'fromfile'  => ' cat "{file}" {gzip}',
        'cp'        => 'echo "{data}" | {php} -r "echo base64_decode(stream_get_contents(STDIN));" > {srdb}',
        'ssh_cp'    => 'echo "{data}" | {php} -r "echo base64_decode(stream_get_contents(STDIN));" | ssh {ssh} \'cat > "{srdb}"\'',
        'chmod'     => 'chmod +x {srdb}',
        'rm'        => 'rm {srdb}',
        'srdb_test' => '{php} -f {srdb} -- -v -n "{base}" -u "{user}" -p"{pass}" -h "{host}"',
        'replace'   => '{php} -f {srdb} -- -n "{base}" -u "{user}" -p"{pass}" -h "{host}" -s"{search}" -r"{replace}" {options}',
    );

    private $envs = null;

    private $path = null;

    private $gzip = false;

    private function __construct()
    {
        global $argv;

        $this->script  = basename($argv[0]);
        $this->options = getopt(
            implode('', array_keys($this->opts)),
            array_values($this->opts)
        );

        // srdb
        $this->srdb = sprintf($this->srdb, uniqid());

        // generate ssh cmds
        $cmds = array();
        foreach ($this->cmds as $key => &$cmd) {
            if (strpos($key, 'ssh_') === false && !array_key_exists('ssh_' . $key, $this->cmds)) {
                $cmds[$key]          = $cmd;
                $cmds['ssh_' . $key] = 'ssh {ssh} \'' . str_replace('\'', '\'"\'"\'', $cmd) . '\'';
            } else {
                $cmds[$key] = $cmd;
            }
        }

        $this->cmds = $cmds;

        // path
        $this->exec('pwd', $this->path);

        if ($this->getOpt(self::OPT_HELP)) {
            $this->help();
        }

        $this->loadConfig();
        $this->checkConnections();

        // tables option handling (after connection check)
        if ($this->getOpt(self::OPT_INCLUDE) && $this->getOpt(self::OPT_EXCLUDE)) {
            $this->error('You can’t use include and exclude options at the same time.');
        }

        // exclusive options
        if ($this->getOpt(self::OPT_NO_REPLACEMENT) && $this->getOpt(self::OPT_REPLACEMENTS_ONLY)) {
            $this->error('You can’t use no-replacement and replacements-only options at the same time.');
        }

        if ($this->envs['source']['file']) {
            // no table filtering from file
            $this->envs['source']['tables'] = '';
        }
        else {
            $this->envs['source']['tables'] = $this->getTables();
        }

        // try to extract origin env from the file
        if ($this->envs['source']['file']) {
            if ($file = gzopen($this->envs['source']['file'], 'r')) {
                if ($line = gzread($file, 64)) {
                    if (preg_match('/' . $this->marker . '(.+)($|\n)/', $line, $matches)) {
                        $this->envs['source']['env'] = $matches[1];
                    }
                }
                gzclose($file);
            }
        }

        // everything ok, display confirm message
        if ($this->getOpt(self::OPT_FORCE) || $this->confirm()) {
            $this->proceed();
        }
    }

    private function confirm()
    {
        if ($this->getOpt(self::OPT_REPLACEMENTS_ONLY)) {
            echo "\nReady to apply replacements (no transfert):\n\n";
        } elseif ($this->getOpt(self::OPT_NO_REPLACEMENT)) {
            echo "\nReady to transfert (no replacement):\n\n";
        } else {
            echo "\nReady to sync:\n\n";
        }

        $cData   = 'grey';
        $cSymbol = 'yellow';

        $items = array('from' => 'source', 'to' => 'target');
        $out   = array();

        // label
        $length = 0;
        foreach ($items as $key => $env) {
            $out[$env] = $key . ' ';
            if ($this->envs[$env]['file']) {
                $out[$env] .= $this->c('file', 'no');
            } else {
                $out[$env] .= $this->c($this->envs[$env]['env'], 'yellow');
            }
            $out[$env] .= ':';
            $length = max($length, strlen($out[$env]));
        }

        // detail
        foreach ($items as $key => $env) {

            echo str_pad($out[$env], $length + 2, ' ', STR_PAD_LEFT) . "  ";

            if ($this->envs[$env]['file']) {
                echo $this->c($this->envs[$env]['file'], $cData);
            } else {
                $config = $this->envs[$env];
                echo $this->c($config['user'], $cData) . $this->c('@', $cSymbol);

                echo $this->c($config['host'], $cData);
                echo $this->c('/', $cSymbol) . $this->c($config['base'], $cData);

                if ($config['ssh']) {
                    echo $this->c(' ssh:', $cSymbol) . $this->c($config['ssh'], $cData);
                }
            }
            echo "\n";
        }

        // tables
        if ($this->envs['source']['tables']) {
            $tables = implode(
                "\n". str_pad('', $length - 7),
                explode(' ', $this->envs['source']['tables'])
            );
            echo "\n";
            echo str_pad( 'tables:', $length - 9, ' ', STR_PAD_LEFT ) . "  ";
            echo $this->c($tables, $cData);
            echo "\n";
        }

        if ($this->envs['target']['protected'] === true) {
            $token = strtoupper(substr(sha1(rand()), 0, 4));
            $answer = readline(
                $this->c("\nTarget env ". $this->envs['target']['env'] ." is protected!\nType ", 'red') .
                $this->c($token, 'red', true) .
                $this->c(" to proceed anyway: ", 'red')
            );
            return $answer === $token;
        }
        else {
            $answer = readline( "\nDo you confirm? (yo/N) " );
            return preg_match('/[yo]/', $answer);
        }
    }

    /**
     * @param string $key The long option name to get
     *
     * @return string|null The option value, null if not found
     */
    private function getOpt($key)
    {
        foreach ($this->opts as $short => $long) {
            // option with value
            if ($key . ':' == $long || $key . ':' == $short) {
                $short = str_replace(':', '', $short);
                $long  = str_replace(':', '', $long);
                if (array_key_exists($long, $this->options)) {
                    return $this->options[$long];
                } elseif (array_key_exists($short, $this->options)) {
                    return $this->options[$short];
                } else {
                    return null;
                }
            } // option without value
            elseif ($key == $long || $key == $short) {
                if (array_key_exists($long, $this->options)) {
                    return true;
                } elseif (array_key_exists($short, $this->options)) {
                    return true;
                } else {
                    return false;
                }
            }
        }

        return null;
    }

    private function checkConnections()
    {
        if ($this->envs['source']['file'] && $this->envs['target']['file']
            && $this->envs['source']['file'] == $this->envs['target']['file']
        ) {
            $this->error('Source and target file can not be same file');
        }

        $gzipUseful = false;

        // gzip may be useful for db transfert only
        if (!$this->getOpt(self::OPT_REPLACEMENTS_ONLY)) {

            // gzip is useful if one of the end (at least) is remote
            foreach ($this->envs as $env => $config) {
                if ($config['ssh']) {
                    $gzipUseful = true;
                    break;
                }
            }
        }

        // gzip is available only if available on both ends
        $gzipAvailable = true;

        foreach ($this->envs as $env => &$config) {
            // don’t need to test source if only doing replacements on target
            if ($env !== 'source' || !$this->getOpt(self::OPT_REPLACEMENTS_ONLY)) {
                if ($config['file']) {

                    // check file
                    if ($env == 'source') {
                        $this->checkSourceFile($config);
                    } else {
                        $this->checkTargetFile($config);
                    }
                } else {

                    // check connection
                    $result = $this->exec($this->getCmd('test', $config['ssh'], array(
                        'base' => $config['base'],
                        'user' => $config['user'],
                        'pass' => $config['pass'],
                        'host' => $config['host']
                    )), $output, true);
                    if ($result !== 0) {
                        $this->error('Connection error for ' . $config['env'] . ' environment.', $result);
                    }

                    // check gzip support (for db transfert only ; only if useful)
                    if (!$this->getOpt(self::OPT_REPLACEMENTS_ONLY) && $gzipUseful && $gzipAvailable) {
                        $result = $this->exec($this->getCmd('gzip_test', $config['ssh']), $output, true);
                        if ($result !== 0) {
                            $gzipAvailable = false;
                        }
                    }
                }
            }
        }

        $this->gzip = $gzipUseful && $gzipAvailable;
    }

    private function getEnvList()
    {
        // generate environments list
        $list     = "Available environments: ";
        $envNames = array_keys($this->config['environments']);
        array_walk($envNames, function (&$item) {
            $item = $this->c($item, 'yellow');
        });
        $list .= implode(', ', $envNames) . "\n";

        return $list;
    }

    private function checkSourceFile($source)
    {
        if (!file_exists($source['file']) || !is_readable($source['file'])) {
            // maybe it was not a file
            $this->error(
                "Source error, environment not found or file does not exists",
                $this->getEnvList()
            );
        }
    }

    private function checkTargetFile($target)
    {
        $file = $target['file'];
        $dir  = dirname($file);
        if (file_exists($file)) {
            if (!is_writable($file)) {
                $this->error("Target file is not writable");
            } else {
                $this->warning('Warning: output file exists, it will be overwritten');
            }
        } elseif (!file_exists($dir) || !is_dir($dir)) {
            $this->error("Target file directory does not exist");
        } elseif (!is_writable($dir)) {
            $this->error("Target file directory is not writable");
        }
    }

    private function loadConfig()
    {
        $confFile = $this->getOpt(self::OPT_CONF);
        if (!$confFile) {
            $confFile = self::$confDefaultFile;
        }

        if (!file_exists($confFile)) {
            $this->error('Can not find config file ' . $confFile, true);
        }

        $this->config = json_decode(file_get_contents($confFile), true);

        $error = json_last_error();
        if ($error != JSON_ERROR_NONE) {
            $this->error('Error reading ' . $confFile, json_last_error_msg());
        }

        // loading environments
        if (!array_key_exists('environments', $this->config) || !$this->config['environments']) {
            $this->error('No environment found in config.');
        }

        $envList = $this->getEnvList();

        // must have source and target
        if (!$this->getOpt(self::OPT_SOURCE)) {
            $this->error('Missing source environment', $envList, true);
        }
        if (!$this->getOpt(self::OPT_TARGET)) {
            $this->error('Missing target environment or output file', $envList, true);
        }

        $this->envs = array();
        foreach (array('source', 'target') as $env) {
            $val              = $this->getOpt($env);
            $this->envs[$env] = array(
                'env' => false,
                'user' => false,
                'pass' => false,
                'base' => false,
                'host' => 'localhost',
                'ssh' => false,
                'file' => false,
                'php' => $this->defaultPhp,
                'protected' => false,
                'gzip' => false,
            );
            if (!$val) {
                $this->error("Please give the $env option", $envList);
            } elseif (!array_key_exists($val, $this->config['environments'])) {
                // no env, consider it is a file path
                $this->envs[$env]['file'] = $val;

                if (preg_match('/\.gz$/', $val)) {
                    $this->envs[$env]['gzip'] = true;
                }
            } else {
                $this->envs[$env]        = array_merge($this->envs[$env], $this->config['environments'][$val]);
                $this->envs[$env]['env'] = $val;
            }
        }

        if (array_key_exists('replacements', $this->config)) {
            foreach ($this->config['replacements'] as $replacement) {
                foreach (array('source', 'target') as $env) {
                    if ($this->envs[$env]['env'] && array_key_exists($this->envs[$env]['env'], $replacement)) {
                        if (empty($replacement[$this->envs[$env]['env']])) {
                            $this->error("Replacement value can not be empty for env ". $this->envs[$env]['env']);
                        }
                    }
                }
            }
        }
    }

    private function error($msg, $detail = '', $help = false)
    {
        echo $this->c($msg, 'red') . "\n";
        if ($detail) {
            echo $detail . "\n";
        }

        if ($help) {
            $this->help();
        }
        exit;
    }

    private function warning($msg, $detail = '')
    {
        echo $this->c($msg, 'red') . "\n";
        if ($detail) {
            echo $detail . "\n";
        }
    }

    private function help()
    {
        echo "Usage : " . $this->script . " [-c config_file] -s source -t target\n";
        echo "    -". self::OPT_CONF .", --". self::LOPT_CONF ."\n";
        echo "      Configuration file to read. Defaults to " . self::$confDefaultFile . ".\n";
        echo "    -". self::OPT_SOURCE .", --". self::LOPT_SOURCE ."\n";
        echo "      Source environment name or file path\n";
        echo "    -". self::OPT_TARGET .", --". self::LOPT_TARGET ."\n";
        echo "      Target environment name or file path.\n";
        echo "    -". self::OPT_REPLACEMENTS_ONLY .", --". self::LOPT_REPLACEMENTS_ONLY ."\n";
        echo "      No database transfert, replacements on target only.\n";
        echo "    -". self::OPT_NO_REPLACEMENT .", --". self::LOPT_NO_REPLACEMENT ."\n";
        echo "      Do not execute replacements, database transfert only.\n";
        echo "    -". self::OPT_FIX.", --". self::LOPT_FIX ."\n";
        echo "      Try to fix database charset problems like double utf8 encoded strings.\n";
        echo "    -". self::OPT_INCLUDE .", --". self::LOPT_INCLUDE ."\n";
        echo "      Include only given tables in sync. This option may be used multiple times.\n";
        echo "    -". self::OPT_EXCLUDE .", --". self::LOPT_EXCLUDE ."\n";
        echo "      Exclude tables from sync. This option may be used multiple times.\n";
        echo "    -". self::OPT_DEBUG .", --". self::LOPT_DEBUG ."\n";
        echo "      Debug mode, print all commands. No shell_exec execution except for\n";
        echo "      config tests (connection to distant database, and tables listing).\n";
        echo "    -". self::OPT_VERBOSE .", --". self::LOPT_VERBOSE ."\n";
        echo "      Verbose mode, print all executed commands.\n";
        echo "    -". self::OPT_FORCE .", --". self::LOPT_FORCE ."\n";
        echo "      Do not prompt for confirmation.\n";
        echo "    -". self::OPT_HELP .", --". self::LOPT_HELP ."\n";
        echo "      Display this help.\n";
        exit;
    }

    private function doing($msg)
    {
        echo $this->c("  [ ] ", 'grey') . $msg;
    }

    private function done($msg = null)
    {
        echo "\r  ";
        echo $this->c("[✔]", 'green');
        if ($msg) {
            echo ' ' . $msg;
        }
        echo "\n";
    }

    private function fail($msg = null)
    {
        echo "\r  ";
        echo $this->c("[✘]", 'red');
        if ($msg) {
            echo ' ' . $msg;
        }
        echo "\n";
    }

    /**
     * @param $format
     * @param $vars
     */
    private function nvsprintf($format, $vars = array(), $regex = '/{([^{}]*?)}/')
    {
        return preg_replace_callback($regex, function ($matches) use ($vars) {
            if (array_key_exists($matches[1], $vars)) {
                return $vars[$matches[1]];
            } else {
                return $matches[0];
            }
        }, $format);
    }

    private function getTables()
    {
        $filter = isset($this->config['tables']) ? $this->config['tables'] : null;
        $include = $this->getOpt(self::OPT_INCLUDE);
        $exclude = $this->getOpt(self::OPT_EXCLUDE);
        if ($filter || $include || $exclude) {
            // get tables
            $source = $this->envs['source'];
            $this->exec($this->getCmd('tables', $source['ssh'], array(
                'user' => $source['user'],
                'pass' => $source['pass'],
                'base' => $source['base'],
                'host' => $source['host'],
            )), $output, true);
            $tables    = explode("\n", $output);

            // filtering
            if ($filter) {
                $tables = array_filter($tables, function ($table) use ($filter) {
                    return preg_match('/'. addslashes($filter) .'/', $table);
                });
            }

            $available = "Available tables are:\n - " . implode("\n - ", $tables);

            if ($include) {
                if (!is_array($include)) {
                    $include = array($include);
                }
                // just checking
                foreach ($include as $table) {
                    if (array_search($table, $tables) === false) {
                        $this->error('The included table `' . $table . '` is not found', $available);
                    }
                }

                return implode(' ', $include);
            }
            if ($exclude) {
                if (!is_array($exclude)) {
                    $exclude = array($exclude);
                }
                foreach ($exclude as $table) {
                    $offset = array_search($table, $tables);
                    if ($offset === false) {
                        $this->error('The excluded table `' . $table . '` is not found', $available);
                    } else {
                        unset($tables[$offset]);
                    }
                }

                return implode(' ', $tables);
            }

            return implode(' ', $tables);
        }

        return '';
    }

    private function proceed()
    {
        echo "\n";
        $source = $this->envs['source'];
        $target = array_key_exists('target', $this->envs) ? $this->envs['target'] : null;

        if (!$this->getOpt(self::OPT_REPLACEMENTS_ONLY)) {
            $this->transfert($source, $target);
        }

        if (!$this->getOpt(self::OPT_NO_REPLACEMENT)
            && array_key_exists('replacements', $this->config)
            && $source['env']
            && $target['env']
            && $source['env'] != $target['env']
        ) {
            $this->replace($target, $source);
        }
        echo "\n";
    }

    private function transfert($source, $target)
    {
        $this->doing('database transfer...');

        // source
        if ($source['file']) {
            // file source

            $gzip = '';
            if ($this->gzip) {
                if (!$source['gzip']) {
                    $gzip = ' | gzip ';
                }
            } elseif ($source['gzip']) {
                $gzip = ' | gzip -d ';
            }
            $sourceCmd = $this->nvsprintf($this->cmds['fromfile'], array(
                'file' => $source['file'],
                'gzip' => $gzip,
            ));
        } else {
            // mysql source
            $sourceCmd = $this->getCmd('source', $source['ssh'], array(
                'user' => $source['user'],
                'pass' => $source['pass'],
                'base' => $source['base'],
                'host' => $source['host'],
                'options' => $this->getOpt(self::OPT_FIX) ? '--skip-set-charset --default-character-set=latin1' : '',
                'tables' => $source['tables'],
                'gzip' => $this->gzip ? ' | gzip ' : '',
            ));
        }

        // target
        if ($target['file']) {
            // file target
            $cmd = $source['env'] ? 'markfile' : 'tofile';
            $targetCmd = $this->nvsprintf($this->cmds[$cmd], array(
                'marker' => $this->marker,
                'env' => $source['env'],
                'file' => $target['file'],
                'gzip' => $target['gzip'] ? ' | gzip ' : '',
            ));

            // if source is gzip, gunzip before write
            if ($this->gzip) {
                $targetCmd = ' gzip -d | ' . $targetCmd;
            }

        } else {
            // mysql target
            $targetCmd = $this->getCmd('target', $target['ssh'], array(
                'user' => $target['user'],
                'pass' => $target['pass'],
                'base' => $target['base'],
                'host' => $target['host'],
                'options' => $this->getOpt(self::OPT_FIX) ? '--default-character-set=utf8' : '',
                'gzip' => $this->gzip ? 'gzip -d | ' : '',
            ));
        }
        $result = $this->exec($sourceCmd . ' | ' . $targetCmd, $output);
        if ($result !== 0) {
            $this->fail();
            exit;
        }
        $this->done('database transfer succeeded      ');
    }

    private function replace($target, $source)
    {
        $this->doing('replacements in database...');

        // copy srdb to tmp
        $this->exec($this->getCmd('cp', $target['ssh'], array(
            'data' => $this->getSrdbData(),
            'srdb' => $this->srdb,
            'php' => $this->defaultPhp
        )));

        // chmod +x
//            $this->exec($this->getCmd('chmod', $target['ssh'], array(
//                'srdb' => $this->srdb,
//            )));

        $replaceCmd = $this->getCmd('replace', $target['ssh'], array(
            'srdb' => $this->srdb,
            'base' => $target['base'],
            'user' => $target['user'],
            'pass' => $target['pass'],
            'host' => $target['host'],
            'php' => $target['php']
        ));

        // pre-replacement test
        $output = '';
        $result = $this->exec($this->getCmd('srdb_test', $target['ssh'], array(
            'srdb' => $this->srdb,
            'base' => $target['base'],
            'user' => $target['user'],
            'pass' => $target['pass'],
            'host' => $target['host'],
            'php' => $target['php']
        )), $output);

        if ($result !== 0) {
            $this->removeSrdb($target);
            $this->fail('replacements failed, errors follow...');
            echo "\n" . $output . "\n";
            exit;
        }

        $count = 0;
        $errors = '';
        $changeCount = 0;
        foreach ($this->config['replacements'] as $replacement) {
            if (!array_key_exists($source['env'], $replacement)) {
                continue;
            }
            if (!array_key_exists($target['env'], $replacement)) {
                continue;
            }
            // options
            $options = '';
            foreach ($this->srdbOpts as $short => $long) {
                $optName = str_replace(':', '', $long);
                if (array_key_exists($optName, $replacement)) {
                    $options .= ' --' . $optName;
                    if ($optName != $long) {
                        $options .= ' "' . $replacement[$optName] . '"';
                    }
                }
            }
            $output = '';
            $result = $this->exec($this->nvsprintf($replaceCmd, array(
                'search' => $replacement[$source['env']],
                'replace' => $replacement[$target['env']],
                'options' => $options
            )), $output);

            if ($result !== 0) {
                $errors .= $output . "\n";
            } elseif (preg_match('/([0-9]+) *changes were made/', $output, $matches)) {
                $changeCount += (int)$matches[1];
            }

            ++$count;
        }

        $this->removeSrdb($target);

        if ($errors) {
            $this->fail('replacements failed, errors follow...');
            echo "\n" . $errors . "\n";
            exit;
        } else {
            $this->done($changeCount . ' replacements executed        ');
        }
    }

    private function removeSrdb($target)
    {
        $this->exec($this->getCmd('rm', $target['ssh'], array(
            'srdb' => $this->srdb,
            'ssh' => $target['ssh']
        )));
    }

    private function getCmd($cmd, $ssh, $data = array())
    {
        if (!array_key_exists('ssh', $data)) {
            $data['ssh'] = $ssh;
        }

        return $this->nvsprintf(
            $this->cmds[$ssh ? 'ssh_' . $cmd : $cmd],
            $data
        );
    }

    private function exec($cmd, &$output = null, $force = false)
    {
        if ($this->getOpt(self::OPT_DEBUG) && !$force) {
            $this->printCmd($cmd);

            return 0;
        } else {
            if ($this->getOpt(self::OPT_DEBUG) || $this->getOpt(self::OPT_VERBOSE)) {
                $this->printCmd($cmd);
            }
            $output = '';
            $result = 0;
            exec($cmd, $output, $result);
            $output = implode("\n", $output);

            return $result;
        }
    }

    private function printCmd($cmd)
    {
        $lmax = 512;
        $output = '';
        if (strlen($cmd) > $lmax) {
            $output .= "\n" . substr($cmd, 0, $lmax / 2) . ' ... ';
            $output .= substr($cmd, strlen($cmd) - $lmax / 2) . "\n";
        } else {
            $output .= "\n" . $cmd . "\n";
        }
        echo $this->c($output, 'purple');
    }

    private function c($text, $color = 'no', $bold = false)
    {
        if (array_key_exists($color, $this->colors)) {
            return "\033[" . ($bold ? '1' : '0') . ';' . $this->colors[$color] . 'm' . $text . "\033[0m";
        } else {
            return $text;
        }
    }

    private function getSrdbData()
    {
        /* This is a base64_encode of the merge of `srdb.class.php` and `srdb.cli.php`
         * from https://github.com/interconnectit/Search-Replace-DB
         */
        // SRDB-DATA // Updated on 2017-05-12 12:40:33
        return <<<EOF
IyEvdXNyL2Jpbi9waHAgLXEKPD9waHAKCi8qKgogKiBUbyBydW4gdGhpcyBzY3JpcHQsIGV4ZWN1
dGUgc29tZXRoaW5nIGxpa2UgdGhpczoKICogYC4vc3JkYi5jbGkucGhwIC1oIGxvY2FsaG9zdCAt
dSByb290IC1uIHRlc3QgLXMgImZpbmRNZSIgLXIgInJlcGxhY2VNZSJgCiAqIHVzZSB0aGUgLS1k
cnktcnVuIGZsYWcgdG8gZG8gYSBkcnkgcnVuIHdpdGhvdXQgc2VhcmNoaW5nL3JlcGxhY2luZy4K
ICovCgovLyBwaHAgNS4zIGRhdGUgdGltZXpvbmUgcmVxdWlyZW1lbnQsIHNob3VsZG4ndCBhZmZl
Y3QgYW55dGhpbmcKZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCggJ0V1cm9wZS9Mb25kb24nICk7
CgovLyBpbmNsdWRlIHRoZSBzcmRiIGNsYXNzCi8vIC0tIGluc2VydGVkIGF0IHRoZSBlbmQgb2Yg
dGhpcyBmaWxlIC0tCgokb3B0cyA9IGFycmF5KAoJJ2g6JyA9PiAnaG9zdDonLAoJJ246JyA9PiAn
bmFtZTonLAoJJ3U6JyA9PiAndXNlcjonLAoJJ3A6JyA9PiAncGFzczonLAoJJ2M6JyA9PiAnY2hh
cjonLAoJJ3M6JyA9PiAnc2VhcmNoOicsCgkncjonID0+ICdyZXBsYWNlOicsCgkndDonID0+ICd0
YWJsZXM6JywKCSdpOicgPT4gJ2luY2x1ZGUtY29sczonLAoJJ3g6JyA9PiAnZXhjbHVkZS1jb2xz
OicsCgknZycgPT4gJ3JlZ2V4JywKCSdsOicgPT4gJ3BhZ2VzaXplOicsCgkneicgPT4gJ2RyeS1y
dW4nLAoJJ2U6JyA9PiAnYWx0ZXItZW5naW5lOicsCgknYTonID0+ICdhbHRlci1jb2xsYXRpb246
JywKCSd2OjonID0+ICd2ZXJib3NlOjonLAoJJ3BvcnQ6JywKCSdoZWxwJwopOwoKJHJlcXVpcmVk
ID0gYXJyYXkoCgknaDonLAoJJ246JywKCSd1OicsCgkncDonCik7CgpmdW5jdGlvbiBzdHJpcF9j
b2xvbnMoICRzdHJpbmcgKSB7CglyZXR1cm4gc3RyX3JlcGxhY2UoICc6JywgJycsICRzdHJpbmcg
KTsKfQoKLy8gc3RvcmUgYXJnIHZhbHVlcwokYXJnX2NvdW50IAk9ICRfU0VSVkVSWyAnYXJnYycg
XTsKJGFyZ3NfYXJyYXkgPSAkX1NFUlZFUlsgJ2FyZ3YnIF07Cgokc2hvcnRfb3B0cyA9IGFycmF5
X2tleXMoICRvcHRzICk7CiRzaG9ydF9vcHRzX25vcm1hbCA9IGFycmF5X21hcCggJ3N0cmlwX2Nv
bG9ucycsICRzaG9ydF9vcHRzICk7CgokbG9uZ19vcHRzID0gYXJyYXlfdmFsdWVzKCAkb3B0cyAp
OwokbG9uZ19vcHRzX25vcm1hbCA9IGFycmF5X21hcCggJ3N0cmlwX2NvbG9ucycsICRsb25nX29w
dHMgKTsKCi8vIHN0b3JlIGFycmF5IG9mIG9wdGlvbnMgYW5kIHZhbHVlcwokb3B0aW9ucyA9IGdl
dG9wdCggaW1wbG9kZSggJycsICRzaG9ydF9vcHRzICksICRsb25nX29wdHMgKTsKCmlmICggaXNz
ZXQoICRvcHRpb25zWyAnaGVscCcgXSApICkgewoJZWNobyAiCiMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKaW50ZXJj
b25uZWN0L2l0IFNhZmUgU2VhcmNoICYgUmVwbGFjZSB0b29sCgojIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKClRoaXMg
c2NyaXB0IGFsbG93cyB5b3UgdG8gc2VhcmNoIGFuZCByZXBsYWNlIHN0cmluZ3MgaW4geW91ciBk
YXRhYmFzZQpzYWZlbHkgd2l0aG91dCBicmVha2luZyBzZXJpYWxpc2VkIFBIUC4KClBsZWFzZSBy
ZXBvcnQgYW55IGJ1Z3Mgb3IgZm9yayBhbmQgY29udHJpYnV0ZSB0byB0aGlzIHNjcmlwdCB2aWEK
R2l0aHViOiBodHRwczovL2dpdGh1Yi5jb20vaW50ZXJjb25uZWN0aXQvc2VhcmNoLXJlcGxhY2Ut
ZGIKCkFyZ3VtZW50IHZhbHVlcyBhcmUgc3RyaW5ncyB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmll
ZC4KCkFSR1MKICAtaCwgLS1ob3N0CiAgICBSZXF1aXJlZC4gVGhlIGhvc3RuYW1lIG9mIHRoZSBk
YXRhYmFzZSBzZXJ2ZXIuCiAgLW4sIC0tbmFtZQogICAgUmVxdWlyZWQuIERhdGFiYXNlIG5hbWUu
CiAgLXUsIC0tdXNlcgogICAgUmVxdWlyZWQuIERhdGFiYXNlIHVzZXIuCiAgLXAsIC0tcGFzcwog
ICAgUmVxdWlyZWQuIERhdGFiYXNlIHVzZXIncyBwYXNzd29yZC4KICAtLXBvcnQKICAgIE9wdGlv
bmFsLiBQb3J0IG9uIGRhdGFiYXNlIHNlcnZlciB0byBjb25uZWN0IHRvLgogICAgVGhlIGRlZmF1
bHQgaXMgMzMwNi4gKE15U1FMIGRlZmF1bHQgcG9ydCkuCiAgLXMsIC0tc2VhcmNoCiAgICBTdHJp
bmcgdG8gc2VhcmNoIGZvciBvciBgcHJlZ19yZXBsYWNlKClgIHN0eWxlCiAgICByZWd1bGFyIGV4
cHJlc3Npb24uCiAgLXIsIC0tcmVwbGFjZQogICAgTm9uZSBlbXB0eSBzdHJpbmcgdG8gcmVwbGFj
ZSBzZWFyY2ggd2l0aCBvcgogICAgYHByZWdfcmVwbGFjZSgpYCBzdHlsZSByZXBsYWNlbWVudC4K
ICAtdCwgLS10YWJsZXMKICAgIElmIHNldCBvbmx5IHJ1bnMgdGhlIHNjcmlwdCBvbiB0aGUgc3Bl
Y2lmaWVkIHRhYmxlLCBjb21tYQogICAgc2VwYXJhdGUgZm9yIG11bHRpcGxlIHZhbHVlcy4KICAt
aSwgLS1pbmNsdWRlLWNvbHMKICAgIElmIHNldCBvbmx5IHJ1bnMgdGhlIHNjcmlwdCBvbiB0aGUg
c3BlY2lmaWVkIGNvbHVtbnMsIGNvbW1hCiAgICBzZXBhcmF0ZSBmb3IgbXVsdGlwbGUgdmFsdWVz
LgogIC14LCAtLWV4Y2x1ZGUtY29scwogICAgSWYgc2V0IGV4Y2x1ZGVzIHRoZSBzcGVjaWZpZWQg
Y29sdW1ucywgY29tbWEgc2VwYXJhdGUgZm9yCiAgICBtdWx0aXBsZSB2YWx1ZXMuCiAgLWcsIC0t
cmVnZXggW25vIHZhbHVlXQogICAgVHJlYXRzIHZhbHVlIGZvciAtcyBvciAtLXNlYXJjaCBhcyBh
IHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQKICAgIC1yIG9yIC0tcmVwbGFjZSBhcyBhIHJlZ3VsYXIg
ZXhwcmVzc2lvbiByZXBsYWNlbWVudC4KICAtbCwgLS1wYWdlc2l6ZQogICAgSG93IHJvd3MgdG8g
ZmV0Y2ggYXQgYSB0aW1lIGZyb20gYSB0YWJsZS4KICAteiwgLS1kcnktcnVuIFtubyB2YWx1ZV0K
ICAgIFByZXZlbnRzIGFueSB1cGRhdGVzIGhhcHBlbmluZyBzbyB5b3UgY2FuIHByZXZpZXcgdGhl
IG51bWJlcgogICAgb2YgY2hhbmdlcyB0byBiZSBtYWRlCiAgLWUsIC0tYWx0ZXItZW5naW5lCiAg
ICBDaGFuZ2VzIHRoZSBkYXRhYmFzZSB0YWJsZSB0byB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlIGVu
Z2luZQogICAgZWcuIElubm9EQiBvciBNeUlTQU0uIElmIHNwZWNpZmllZCBzZWFyY2gvcmVwbGFj
ZSBhcmd1bWVudHMKICAgIGFyZSBpZ25vcmVkLiBUaGV5IHdpbGwgbm90IGJlIHJ1biBzaW11bHRh
bmVvdXNseS4KICAtYSwgLS1hbHRlci1jb2xsYXRpb24KICAgIENoYW5nZXMgdGhlIGRhdGFiYXNl
IHRhYmxlIHRvIHRoZSBzcGVjaWZpZWQgY29sbGF0aW9uCiAgICBlZy4gdXRmOF91bmljb2RlX2Np
LiBJZiBzcGVjaWZpZWQgc2VhcmNoL3JlcGxhY2UgYXJndW1lbnRzCiAgICBhcmUgaWdub3JlZC4g
VGhleSB3aWxsIG5vdCBiZSBydW4gc2ltdWx0YW5lb3VzbHkuCiAgLXYsIC0tdmVyYm9zZSBbdHJ1
ZXxmYWxzZV0KICAgIERlZmF1bHRzIHRvIHRydWUsIGNhbiBiZSBzZXQgdG8gZmFsc2UgdG8gcnVu
IHNjcmlwdCBzaWxlbnRseS4KICAtLWhlbHAKICAgIERpc3BsYXlzIHRoaXMgaGVscCBtZXNzYWdl
IDspCiI7CglleGl0Owp9CgovLyBtaXNzaW5nIGZpZWxkIGZsYWcsIHNob3cgYWxsIG1pc3Npbmcg
aW5zdGVhZCBvZiAxIGF0IGEgdGltZQokbWlzc2luZ19hcmcgPSBmYWxzZTsKCi8vIGNoZWNrIHJl
cXVpcmVkIGFyZ3MgYXJlIHBhc3NlZApmb3JlYWNoKCAkcmVxdWlyZWQgYXMgJGtleSApIHsKCSRz
aG9ydF9vcHQgPSBzdHJpcF9jb2xvbnMoICRrZXkgKTsKCSRsb25nX29wdCA9IHN0cmlwX2NvbG9u
cyggJG9wdHNbICRrZXkgXSApOwoJaWYgKCAhIGlzc2V0KCAkb3B0aW9uc1sgJHNob3J0X29wdCBd
ICkgJiYgISBpc3NldCggJG9wdGlvbnNbICRsb25nX29wdCBdICkgKSB7CgkJZndyaXRlKCBTVERF
UlIsICJFcnJvcjogTWlzc2luZyBhcmd1bWVudCwgLXskc2hvcnRfb3B0fSBvciAtLXskbG9uZ19v
cHR9IGlzIHJlcXVpcmVkLlxuIiApOwoJCSRtaXNzaW5nX2FyZyA9IHRydWU7Cgl9Cn0KCi8vIGJh
aWwgaWYgcmVxdWlyZW1lbnRzIG5vdCBtZXQKaWYgKCAkbWlzc2luZ19hcmcgKSB7Cglmd3JpdGUo
IFNUREVSUiwgIlBsZWFzZSBlbnRlciB0aGUgbWlzc2luZyBhcmd1bWVudHMuXG4iICk7CglleGl0
KCAxICk7Cn0KCi8vIG5ldyBhcmdzIGFycmF5CiRhcmdzID0gYXJyYXkoCgkndmVyYm9zZScgPT4g
dHJ1ZSwKCSdkcnlfcnVuJyA9PiBmYWxzZQopOwoKLy8gY3JlYXRlICRhcmdzIGFycmF5CmZvcmVh
Y2goICRvcHRpb25zIGFzICRrZXkgPT4gJHZhbHVlICkgewoKCS8vIHRyYW5zcG9zZSBrZXlzCglp
ZiAoICggJGlzX3Nob3J0ID0gYXJyYXlfc2VhcmNoKCAka2V5LCAkc2hvcnRfb3B0c19ub3JtYWwg
KSApICE9PSBmYWxzZSApCgkJJGtleSA9ICRsb25nX29wdHNfbm9ybWFsWyAkaXNfc2hvcnQgXTsK
CgkvLyB0cnVlL2ZhbHNlIHN0cmluZyBtYXBwaW5nCglpZiAoIGlzX3N0cmluZyggJHZhbHVlICkg
JiYgaW5fYXJyYXkoICR2YWx1ZSwgYXJyYXkoICdmYWxzZScsICdubycsICcwJyApICkgKQoJCSR2
YWx1ZSA9IGZhbHNlOwoJaWYgKCBpc19zdHJpbmcoICR2YWx1ZSApICYmIGluX2FycmF5KCAkdmFs
dWUsIGFycmF5KCAndHJ1ZScsICd5ZXMnLCAnMScgKSApICkKCQkkdmFsdWUgPSB0cnVlOwoKCS8v
IGJvb2xlYW4gb3B0aW9ucyBhcyBpcywgZWcuIGEgbm8gdmFsdWUgYXJnIHNob3VsZCBiZSBzZXQg
dHJ1ZQoJaWYgKCBpbl9hcnJheSggJGtleSwgJGxvbmdfb3B0cyApICkKCQkkdmFsdWUgPSB0cnVl
OwoKCS8vIGNoYW5nZSB0byB1bmRlcnNjb3JlcwoJJGtleSA9IHN0cl9yZXBsYWNlKCAnLScsICdf
JywgJGtleSApOwoKCSRhcmdzWyAka2V5IF0gPSAkdmFsdWU7Cn0KCi8vIG1vZGlmeSB0aGUgbG9n
IG91dHB1dApjbGFzcyBpY2l0X3NyZGJfY2xpIGV4dGVuZHMgaWNpdF9zcmRiIHsKCglwdWJsaWMg
ZnVuY3Rpb24gbG9nKCAkdHlwZSA9ICcnICkgewoKCQkkYXJncyA9IGFycmF5X3NsaWNlKCBmdW5j
X2dldF9hcmdzKCksIDEgKTsKCgkJJG91dHB1dCA9ICIiOwoKCQlzd2l0Y2goICR0eXBlICkgewoJ
CQljYXNlICdlcnJvcic6CgkJCQlsaXN0KCAkZXJyb3JfdHlwZSwgJGVycm9yICkgPSAkYXJnczsK
CQkJCSRvdXRwdXQgLj0gIiRlcnJvcl90eXBlOiAkZXJyb3IiOwoJCQkJYnJlYWs7CgkJCWNhc2Ug
J3NlYXJjaF9yZXBsYWNlX3RhYmxlX3N0YXJ0JzoKCQkJCWxpc3QoICR0YWJsZSwgJHNlYXJjaCwg
JHJlcGxhY2UgKSA9ICRhcmdzOwoJCQkJJG91dHB1dCAuPSAieyR0YWJsZX06IHJlcGxhY2luZyB7
JHNlYXJjaH0gd2l0aCB7JHJlcGxhY2V9IjsKCQkJCWJyZWFrOwoJCQljYXNlICdzZWFyY2hfcmVw
bGFjZV90YWJsZV9lbmQnOgoJCQkJbGlzdCggJHRhYmxlLCAkcmVwb3J0ICkgPSAkYXJnczsKCQkJ
CSR0aW1lID0gbnVtYmVyX2Zvcm1hdCggKGludCkkcmVwb3J0WyAnZW5kJyBdIC0gKGludCkkcmVw
b3J0WyAnc3RhcnQnIF0sIDggKTsKCQkJCSRvdXRwdXQgLj0gInskdGFibGV9OiB7JHJlcG9ydFsn
cm93cyddfSByb3dzLCB7JHJlcG9ydFsnY2hhbmdlJ119IGNoYW5nZXMgZm91bmQsIHskcmVwb3J0
Wyd1cGRhdGVzJ119IHVwZGF0ZXMgbWFkZSBpbiB7JHRpbWV9IHNlY29uZHMiOwoJCQkJYnJlYWs7
CgkJCWNhc2UgJ3NlYXJjaF9yZXBsYWNlX2VuZCc6CgkJCQlsaXN0KCAkc2VhcmNoLCAkcmVwbGFj
ZSwgJHJlcG9ydCApID0gJGFyZ3M7CgkJCQkkdGltZSA9IG51bWJlcl9mb3JtYXQoIChpbnQpJHJl
cG9ydFsgJ2VuZCcgXSAtIChpbnQpJHJlcG9ydFsgJ3N0YXJ0JyBdLCA4ICk7CgkJCQkkZHJ5X3J1
bl9zdHJpbmcgPSAkdGhpcy0+ZHJ5X3J1biA/ICJ3b3VsZCBoYXZlIGJlZW4iIDogIndlcmUiOwoJ
CQkJJG91dHB1dCAuPSAiClJlcGxhY2luZyB7JHNlYXJjaH0gd2l0aCB7JHJlcGxhY2V9IG9uIHsk
cmVwb3J0Wyd0YWJsZXMnXX0gdGFibGVzIHdpdGggeyRyZXBvcnRbJ3Jvd3MnXX0gcm93cwp7JHJl
cG9ydFsnY2hhbmdlJ119IGNoYW5nZXMgeyRkcnlfcnVuX3N0cmluZ30gbWFkZQp7JHJlcG9ydFsn
dXBkYXRlcyddfSB1cGRhdGVzIHdlcmUgYWN0dWFsbHkgbWFkZQpJdCB0b29rIHskdGltZX0gc2Vj
b25kcyI7CgkJCQlicmVhazsKCQkJY2FzZSAndXBkYXRlX2VuZ2luZSc6CgkJCQlsaXN0KCAkdGFi
bGUsICRyZXBvcnQsICRlbmdpbmUgKSA9ICRhcmdzOwoJCQkJJG91dHB1dCAuPSAkdGFibGUgLiAo
ICRyZXBvcnRbICdjb252ZXJ0ZWQnIF1bICR0YWJsZSBdID8gJyBoYXMgYmVlbicgOiAnaGFzIG5v
dCBiZWVuJyApIC4gJyBjb252ZXJ0ZWQgdG8gJyAuICRlbmdpbmU7CgkJCQlicmVhazsKCQkJY2Fz
ZSAndXBkYXRlX2NvbGxhdGlvbic6CgkJCQlsaXN0KCAkdGFibGUsICRyZXBvcnQsICRjb2xsYXRp
b24gKSA9ICRhcmdzOwoJCQkJJG91dHB1dCAuPSAkdGFibGUgLiAoICRyZXBvcnRbICdjb252ZXJ0
ZWQnIF1bICR0YWJsZSBdID8gJyBoYXMgYmVlbicgOiAnaGFzIG5vdCBiZWVuJyApIC4gJyBjb252
ZXJ0ZWQgdG8gJyAuICRjb2xsYXRpb247CgkJCQlicmVhazsKCQl9CgoJCWlmICggJHRoaXMtPnZl
cmJvc2UgKQoJCQllY2hvICRvdXRwdXQgLiAiXG4iOwoKCX0KCn0KCiRyZXBvcnQgPSBuZXcgaWNp
dF9zcmRiX2NsaSggJGFyZ3MgKTsKCi8vIE9ubHkgcHJpbnQgYSBzZXBhcmF0aW5nIG5ld2xpbmUg
aWYgdmVyYm9zZSBtb2RlIGlzIG9uIHRvIHNlcGFyYXRlIHZlcmJvc2Ugb3V0cHV0IGZyb20gcmVz
dWx0CmlmICgkYXJnc1sgJ3ZlcmJvc2UnIF0pIHsKCWVjaG8gIlxuIjsKfQoKaWYgKCAkcmVwb3J0
ICYmICggKCBpc3NldCggJGFyZ3NbICdkcnlfcnVuJyBdICkgJiYgJGFyZ3NbICdkcnlfcnVuJyBd
ICkgfHwgZW1wdHkoICRyZXBvcnQtPmVycm9yc1sgJ3Jlc3VsdHMnIF0gKSApICkgewoJZWNobyAi
QW5kIHdlJ3JlIGRvbmUhXG4iOwp9IGVsc2UgewoJZWNobyAiQ2hlY2sgdGhlIG91dHB1dCBmb3Ig
ZXJyb3JzLiBZb3UgbWF5IG5lZWQgdG8gZW5zdXJlIHZlcmJvc2Ugb3V0cHV0IGlzIG9uIGJ5IHVz
aW5nIC12IG9yIC0tdmVyYm9zZS5cbiI7Cn0KCgoKCi8qKgogKgogKiBTYWZlIFNlYXJjaCBhbmQg
UmVwbGFjZSBvbiBEYXRhYmFzZSB3aXRoIFNlcmlhbGl6ZWQgRGF0YSB2My4xLjAKICoKICogVGhp
cyBzY3JpcHQgaXMgdG8gc29sdmUgdGhlIHByb2JsZW0gb2YgZG9pbmcgZGF0YWJhc2Ugc2VhcmNo
IGFuZCByZXBsYWNlIHdoZW4KICogc29tZSBkYXRhIGlzIHN0b3JlZCB3aXRoaW4gUEhQIHNlcmlh
bGl6ZWQgYXJyYXlzIG9yIG9iamVjdHMuCiAqCiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUK
ICogaHR0cDovL2ludGVyY29ubmVjdGl0LmNvbS8xMjQvc2VhcmNoLWFuZC1yZXBsYWNlLWZvci13
b3JkcHJlc3MtZGF0YWJhc2VzLwogKgogKiBUbyBjb250cmlidXRlIGdvIHRvCiAqIGh0dHA6Ly9n
aXRodWIuY29tL2ludGVyY29ubmVjdGl0L3NlYXJjaC1yZXBsYWNlLWRiCiAqCiAqIFRvIHVzZSwg
bG9hZCB0aGUgc2NyaXB0IG9uIHlvdXIgc2VydmVyIGFuZCBwb2ludCB5b3VyIHdlYiBicm93c2Vy
IHRvIGl0LgogKiBJbiBzb21lIHNpdHVhdGlvbnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBjb21tYW5k
IGxpbmUgaW50ZXJmYWNlIHZlcnNpb24uCiAqCiAqIEJJRyBXQVJOSU5HISAgVGFrZSBhIGJhY2t1
cCBmaXJzdCwgYW5kIGNhcmVmdWxseSB0ZXN0IHRoZSByZXN1bHRzIG9mIHRoaXMKICogY29kZS4g
SWYgeW91IGRvbid0LCBhbmQgeW91IHZhcGUgeW91ciBkYXRhIHRoZW4geW91IG9ubHkgaGF2ZSB5
b3Vyc2VsZiB0bwogKiBibGFtZS4gU2VyaW91c2x5LiAgQW5kIGlmIHlvdXIgRW5nbGlzaCBpcyBi
YWQgYW5kIHlvdSBkb24ndCBmdWxseQogKiB1bmRlcnN0YW5kIHRoZSBpbnN0cnVjdGlvbnMgdGhl
biBTVE9QLiBSaWdodCB0aGVyZS4gWWVzLiBCZWZvcmUgeW91IGRvIGFueQogKiBkYW1hZ2UuCiAq
CiAqIFVTRSBPRiBUSElTIFNDUklQVCBJUyBFTlRJUkVMWSBBVCBZT1VSIE9XTiBSSVNLLiBJL1dl
IGFjY2VwdCBubyBsaWFiaWxpdHkKICogZnJvbSBpdHMgdXNlLgogKgogKiBGaXJzdCBXcml0dGVu
IDIwMDktMDUtMjUgYnkgRGF2aWQgQ292ZW5leSBvZiBJbnRlcmNvbm5lY3QgSVQgTHRkIChVSykK
ICogaHR0cDovL3d3dy5kYXZpZGNvdmVuZXkuY29tIG9yIGh0dHA6Ly9pbnRlcmNvbm5lY3RpdC5j
b20KICogYW5kIHJlbGVhc2VkIHVuZGVyIHRoZSBHUEwgdjMKICogaWUsIGRvIHdoYXQgZXZlciB5
b3Ugd2FudCB3aXRoIHRoZSBjb2RlLCBhbmQgd2UgdGFrZSBubyByZXNwb25zaWJpbGl0eSBmb3Ig
aXQKICogT0s/IElmIHlvdSBkb24ndCB3aXNoIHRvIHRha2UgcmVzcG9uc2liaWxpdHksIGhpcmUg
dXMgYXQgSW50ZXJjb25uZWN0IElUIEx0ZAogKiBvbiArNDQgKDApMTUxIDMzMSA1MTQwIGFuZCB3
ZSB3aWxsIGRvIHRoZSB3b3JrIGZvciB5b3UgYXQgb3VyIGhvdXJseSByYXRlLAogKiBtaW5pbXVt
IDFocgogKgogKiBMaWNlbnNlOiBHUEwgdjMKICogTGljZW5zZSBVUkw6IGh0dHA6Ly93d3cuZ251
Lm9yZy9jb3B5bGVmdC9ncGwuaHRtbAogKgogKgogKiBWZXJzaW9uIDMuMS4wOgogKgkJKiBBZGRl
ZCBwb3J0IG51bWJlciBvcHRpb24gdG8gYm90aCB3ZWIgYW5kIENMSSBpbnRlcmZhY2VzLgogKgkJ
KiBNb3JlIHJlbGlhYmxlIGZhbGxiYWNrIG9uIG5vbi1QRE8gc3lzdGVtcy4KICoJCSogQ29uZmly
bWF0aW9uIG9uICdEZWxldGUgbWUnCiAqCQkqIENvbXByZWhlbnNpdmUgY2hlY2sgdG8gcHJldmVu
dCBhY2NpZGVudGFsIGRlbGV0aW9uIG9mIHdlYiBwcm9qZWN0cwogKgkJKiBSZW1vdmVkIG15c3Fs
IGZ1bmN0aW9ucyBhbmQgcmVwbGFjZWQgd2l0aCBteXNxbGkKICoKICogVmVyc2lvbiAzLjA6CiAq
IAkJKiBNYWpvciBvdmVyaGF1bAogKiAJCSogTXVsdGlieXRlIHN0cmluZyByZXBsYWNlbWVudHMK
ICogCQkqIENvbnZlcnQgdGFibGVzIHRvIElubm9EQgogKiAJCSogQ29udmVydCB0YWJsZXMgdG8g
dXRmOF91bmljb2RlX2NpCiAqIAkJKiBQcmV2aWV3L3ZpZXcgY2hhbmdlcyBpbiByZXBvcnQKICog
CQkqIE9wdGlvbmFsbHkgdXNlIHByZWdfcmVwbGFjZSgpCiAqIAkJKiBCZXR0ZXIgZXJyb3IvZXhj
ZXB0aW9uIGhhbmRsaW5nICYgcmVwb3J0aW5nCiAqIAkJKiBSZXBvcnRzIHBlciB0YWJsZQogKiAJ
CSogRXhjbHVkZS9pbmNsdWRlIG11bHRpcGxlIGNvbHVtbnMKICoKICogVmVyc2lvbiAyLjIuMDoK
ICogCQkqIEFkZGVkIHJlbW92ZSBzY3JpcHQgcGF0Y2ggZnJvbSBEYXZpZCBBbmRlcnNvbiAod29y
ZHNoZWxsLm5ldCkKICogCQkqIEFkZGVkIGFiaWxpdHkgdG8gcmVwbGFjZSBzdHJpbmdzIHdpdGgg
bm90aGluZwogKgkJKiBDb3B5IGNoYW5nZXMKICogCQkqIEFkZGVkIGNvZGUgdG8gcmVjdXJzaXZl
X3Vuc2VyaWFsaXplX3JlcGxhY2UgdG8gZGVhbCB3aXRoIG9iamVjdHMgbm90CiAqIAkJanVzdCBh
cnJheXMuIFRoaXMgd2FzIHN1Ym1pdHRlZCBieSBUaW5hIE1hdHRlci4KICogCQlUb0RvOiBUZXN0
IG9iamVjdCBoYW5kbGluZy4gTm90IHN1cmUgaG93IGl0IHdpbGwgY29wZSB3aXRoIG9iamVjdCBp
biB0aGUKICogCQlkYiBjcmVhdGVkIHdpdGggY2xhc3NlcyB0aGF0IGRvbid0IGV4aXN0IGluIGFu
eXRoaW5nIGJ1dCB0aGUgYmFzZSBQSFAuCiAqCiAqIFZlcnNpb24gMi4xLjA6CiAqICAgICAgICAg
ICAgICAtIENoYW5nZWQgdG8gdmVyc2lvbiAyLjEuMAogKgkJKiBGb2xsb3dpbmcgY2hhbmdlIGJ5
IFNlcmdlaSBCaXJ5dWtvdiAtIG1lcmdlZCBpbiBhbmQgdGVzdGVkIGJ5IERhdmUgQ292ZW5leQog
KiAgICAgICAgICAgICAgLSBBZGRlZCBDaGFyc2V0IFN1cHBvcnQgKHRlc3RlZCB3aXRoIFVURi04
LCBub3QgdGVzdGVkIG9uIG90aGVyIGNoYXJzZXRzKQogKgkJKiBGb2xsb3dpbmcgY2hhbmdlcyBp
bXBsZW1lbnRlZCBieSBKYW1lcyBXaGl0ZWhlYWQgd2l0aCB0aGFua3MgdG8gYWxsIHRoZSBjb21t
ZW50ZXJzIGFuZCBmZWVkYmFjayBnaXZlbiEKICogCQktIFJlbW92ZWQgUEhQIHdhcm5pbmdzIGlm
IHlvdSBnbyB0byBzdGVwIDMrIHdpdGhvdXQgREIgZGV0YWlscy4KICogCQktIEFkZGVkIG9wdGlv
bnMgdG8gc2tpcCBjaGFuZ2luZyB0aGUgZ3VpZCBjb2x1bW4uIElmIHRoZXJlIGFyZSBvdGhlcgog
KiAJCWNvbHVtbnMgdGhhdCBuZWVkIGV4Y2x1ZGluZyB5b3UgY2FuIGFkZCB0aGVtIHRvIHRoZSAk
ZXhjbHVkZV9jb2xzIGdsb2JhbAogKiAJCWFycmF5LiBNYXkgY2hvb3NlIHRvIGFkZCBhbm90aGVy
IG9wdGlvbiB0byB0aGUgdGFibGUgc2VsZWN0IHBhZ2UgdG8gbGV0CiAqIAkJeW91IGFkZCB0byB0
aGlzIGFycmF5IGZyb20gdGhlIGZyb250IGVuZC4KICogCQktIE1pbm9yIHR3ZWFrIHRvIGxhYmVs
IHN0eWxpbmcuCiAqIAkJLSBBZGRlZCBjb21tZW50cyB0byBlYWNoIG9mIHRoZSBmdW5jdGlvbnMu
CiAqIAkJLSBSZW1vdmVkIGEgZGVhZCBwYXJhbSBmcm9tIGljaXRfc3JkYl9yZXBsYWNlcgogKiBW
ZXJzaW9uIDIuMC4wOgogKiAJCS0gcmV0dXJuZWQgdG8gdXNpbmcgdW5zZXJpYWxpemUgZnVuY3Rp
b24gdG8gY2hlY2sgaWYgc3RyaW5nIGlzCiAqIAkJc2VyaWFsaXplZCBvciBub3QKICogCQktIG1h
cmtlZCBpc19zZXJpYWxpemVkX3N0cmluZyBmdW5jdGlvbiBhcyBkZXByZWNhdGVkCiAqIAkJLSBj
aGFuZ2VkIGZvcm0gb3JkZXIgdG8gaW1wcm92ZSB1c2FiaWxpdHkgYW5kIG1ha2UgdXNlIG9uIG11
bHRpc2l0ZXMgYQogKiAJCWJpdCBsZXNzIHNjYXJ5CiAqIAkJLSBjaGFuZ2VkIHRvIHZlcnNpb24g
MiwgYXMgcmVhbGx5IHNob3VsZCBoYXZlIGRvbmUgd2hlbiB0aGUgVUkgd2FzCiAqIAkJaW50cm9k
dWNlZAogKiAJCS0gYWRkZWQgYSByZWN1cnNpdmUgYXJyYXkgd2Fsa2VyIHRvIGRlYWwgd2l0aCBz
ZXJpYWxpemVkIHN0cmluZ3MgYmVpbmcKICogCQlzdG9yZWQgaW4gc2VyaWFsaXplZCBzdHJpbmdz
LiBZZXMsIHJlYWxseS4KICogCQktIGNoYW5nZXMgYnkgSmFtZXMgUiBXaGl0ZWhlYWQgKGt1ZG9z
IGZvciByZWN1cnNpdmUgd2Fsa2VyKSBhbmQgRGF2aWQKICogCQlDb3ZlbmV5IDIwMTEtMDgtMjYK
ICogIFZlcnNpb24gMS4wLjI6CiAqICAJLSB0eXBvcyBjb3JyZWN0ZWQsIGJ1dHRvbiB0ZXh0IHR3
ZWFrIC0gRGF2aWQgQ292ZW5leSAvIFJvYmVydCBPJ1JvdXJrZQogKiAgVmVyc2lvbiAxLjAuMQog
KiAgCS0gc3R5bGluZyBhbmQgZm9ybSBhZGRlZCBieSBKYW1lcyBSIFdoaXRlaGVhZC4KICoKICog
IENyZWRpdHM6ICBtb3o2NjcgYXQgZ21haWwgZG90IGNvbSBmb3IgaGlzIHJlY3Vyc2l2ZV9hcnJh
eV9yZXBsYWNlIHBvc3RlZCBhdAogKiAgICAgICAgICAgIHVrLnBocC5uZXQgd2hpY2ggc2F2ZWQg
bWUgYSBsaXR0bGUgdGltZSAtIGEgcGVyZmVjdCBzYW1wbGUgZm9yIG1lCiAqICAgICAgICAgICAg
YW5kIHNlZW1zIHRvIHdvcmsgaW4gYWxsIGNhc2VzLgogKgogKi8KCmNsYXNzIGljaXRfc3JkYiB7
CgoJLyoqCgkgKiBAdmFyIGFycmF5IExpc3Qgb2YgYWxsIHRoZSB0YWJsZXMgaW4gdGhlIGRhdGFi
YXNlCgkgKi8KCXB1YmxpYyAkYWxsX3RhYmxlcyA9IGFycmF5KCk7CgoJLyoqCgkgKiBAdmFyIGFy
cmF5IFRhYmxlcyB0byBydW4gdGhlIHJlcGxhY2VtZW50IG9uCgkgKi8KCXB1YmxpYyAkdGFibGVz
ID0gYXJyYXkoKTsKCgkvKioKCSAqIEB2YXIgc3RyaW5nIFNlYXJjaCB0ZXJtCgkgKi8KCXB1Ymxp
YyAkc2VhcmNoID0gZmFsc2U7CgoJLyoqCgkgKiBAdmFyIHN0cmluZyBSZXBsYWNlbWVudAoJICov
CglwdWJsaWMgJHJlcGxhY2UgPSBmYWxzZTsKCgkvKioKCSAqIEB2YXIgYm9vbCBVc2UgcmVndWxh
ciBleHByZXNzaW9ucyB0byBwZXJmb3JtIHNlYXJjaCBhbmQgcmVwbGFjZQoJICovCglwdWJsaWMg
JHJlZ2V4ID0gZmFsc2U7CgoJLyoqCgkgKiBAdmFyIGJvb2wgTGVhdmUgZ3VpZCBjb2x1bW4gYWxv
bmUKCSAqLwoJcHVibGljICRndWlkID0gZmFsc2U7CgoKCS8qKgoJICogQHZhciBhcnJheSBBdmFp
bGFibGUgZW5naW5lcwoJICovCglwdWJsaWMgJGVuZ2luZXMgPSBhcnJheSgpOwoKCS8qKgoJICog
QHZhciBib29sfHN0cmluZyBDb252ZXJ0IHRvIG5ldyBlbmdpbmUKCSAqLwoJcHVibGljICRhbHRl
cl9lbmdpbmUgPSBmYWxzZTsKCgkvKioKCSAqIEB2YXIgYm9vbHxzdHJpbmcgQ29udmVydCB0byBu
ZXcgY29sbGF0aW9uCgkgKi8KCXB1YmxpYyAkYWx0ZXJfY29sbGF0ZSA9IGZhbHNlOwoKCS8qKgoJ
ICogQHZhciBhcnJheSBDb2x1bW4gbmFtZXMgdG8gZXhjbHVkZQoJICovCglwdWJsaWMgJGV4Y2x1
ZGVfY29scyA9IGFycmF5KCk7CgoJLyoqCgkgKiBAdmFyIGFycmF5IENvbHVtbiBuYW1lcyB0byBp
bmNsdWRlCgkgKi8KCXB1YmxpYyAkaW5jbHVkZV9jb2xzID0gYXJyYXkoKTsKCgkvKioKCSAqIEB2
YXIgYm9vbCBUcnVlIGlmIGRvaW5nIGEgZHJ5IHJ1bgoJICovCglwdWJsaWMgJGRyeV9ydW4gPSB0
cnVlOwoKCS8qKgoJICogQHZhciBzdHJpbmcgRGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzCgkg
Ki8KCXB1YmxpYyAkbmFtZSA9ICcnOwoJcHVibGljICR1c2VyID0gJyc7CglwdWJsaWMgJHBhc3Mg
PSAnJzsKCXB1YmxpYyAkaG9zdCA9ICcxMjcuMC4wLjEnOwoJcHVibGljICRwb3J0ID0gMDsKCXB1
YmxpYyAkY2hhcnNldCA9ICd1dGY4JzsKCXB1YmxpYyAkY29sbGF0ZSA9ICcnOwoKCgkvKioKCSAq
IEB2YXIgYXJyYXkgU3RvcmVzIGEgbGlzdCBvZiBleGNlcHRpb25zCgkgKi8KCXB1YmxpYyAkZXJy
b3JzID0gYXJyYXkoCgkJCQkJCSdzZWFyY2gnID0+IGFycmF5KCksCgkJCQkJCSdkYicgPT4gYXJy
YXkoKSwKCQkJCQkJJ3RhYmxlcycgPT4gYXJyYXkoKSwKCQkJCQkJJ3Jlc3VsdHMnID0+IGFycmF5
KCkKCQkJCQkpOwoKCXB1YmxpYyAkZXJyb3JfdHlwZSA9ICdzZWFyY2gnOwoKCgkvKioKCSAqIEB2
YXIgYXJyYXkgU3RvcmVzIHRoZSByZXBvcnQgYXJyYXkKCSAqLwoJcHVibGljICRyZXBvcnQgPSBh
cnJheSgpOwoKCgkvKioKCSAqIEB2YXIgaW50IE51bWJlciBvZiBtb2RpZmljYXRpb25zIHRvIHJl
dHVybiBpbiByZXBvcnQgYXJyYXkKCSAqLwoJcHVibGljICRyZXBvcnRfY2hhbmdlX251bSA9IDMw
OwoKCgkvKioKCSAqIEB2YXIgYm9vbCBXaGV0aGVyIHRvIGVjaG8gcmVwb3J0IGFzIHNjcmlwdCBy
dW5zCgkgKi8KCXB1YmxpYyAkdmVyYm9zZSA9IGZhbHNlOwoKCgkvKioKCSAqIEB2YXIgcmVzb3Vy
Y2UgRGF0YWJhc2UgY29ubmVjdGlvbgoJICovCglwdWJsaWMgJGRiOwoKCgkvKioKCSAqIEB2YXIg
dXNlIFBETwoJICovCglwdWJsaWMgJHVzZV9wZG8gPSB0cnVlOwoKCgkvKioKCSAqIEB2YXIgaW50
IEhvdyBtYW55IHJvd3MgdG8gc2VsZWN0IGF0IGEgdGltZSB3aGVuIHJlcGxhY2luZwoJICovCglw
dWJsaWMgJHBhZ2Vfc2l6ZSA9IDUwMDAwOwoKCgkvKioKCSAqIFNlYXJjaGVzIGZvciBXUCBvciBE
cnVwYWwgY29udGV4dAoJICogQ2hlY2tzIGZvciAkX1BPU1QgZGF0YQoJICogSW5pdGlhbGlzZXMg
ZGF0YWJhc2UgY29ubmVjdGlvbgoJICogSGFuZGxlcyBhamF4CgkgKiBSdW5zIHJlcGxhY2VtZW50
CgkgKgoJICogQHBhcmFtIHN0cmluZyAkbmFtZSAgICBkYXRhYmFzZSBuYW1lCgkgKiBAcGFyYW0g
c3RyaW5nICR1c2VyICAgIGRhdGFiYXNlIHVzZXJuYW1lCgkgKiBAcGFyYW0gc3RyaW5nICRwYXNz
ICAgIGRhdGFiYXNlIHBhc3N3b3JkCgkgKiBAcGFyYW0gc3RyaW5nICRob3N0ICAgIGRhdGFiYXNl
IGhvc3RuYW1lCgkgKiBAcGFyYW0gc3RyaW5nICRwb3J0ICAgIGRhdGFiYXNlIGNvbm5lY3Rpb24g
cG9ydAoJICogQHBhcmFtIHN0cmluZyAkc2VhcmNoICBzZWFyY2ggc3RyaW5nIC8gcmVnZXgKCSAq
IEBwYXJhbSBzdHJpbmcgJHJlcGxhY2UgcmVwbGFjZW1lbnQgc3RyaW5nCgkgKiBAcGFyYW0gYXJy
YXkgJHRhYmxlcyAgdGFibGVzIHRvIHJ1biByZXBsY2VtZW50cyBhZ2FpbnN0CgkgKiBAcGFyYW0g
Ym9vbCAkbGl2ZSAgICBsaXZlIHJ1bgoJICogQHBhcmFtIGFycmF5ICRleGNsdWRlX2NvbHMgIHRh
YmxlcyB0byBydW4gcmVwbGNlbWVudHMgYWdhaW5zdAoJICoKCSAqIEByZXR1cm4gdm9pZAoJICov
CglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoICRhcmdzICkgewoKCQkkYXJncyA9IGFycmF5
X21lcmdlKCBhcnJheSgKCQkJJ25hbWUnIAkJCQk9PiAnJywKCQkJJ3VzZXInIAkJCQk9PiAnJywK
CQkJJ3Bhc3MnIAkJCQk9PiAnJywKCQkJJ2hvc3QnIAkJCQk9PiAnJywKCQkJJ3BvcnQnICAgICAg
ICAgICAgICA9PiAzMzA2LAoJCQknc2VhcmNoJyAJCQk9PiAnJywKCQkJJ3JlcGxhY2UnIAkJCT0+
ICcnLAoJCQkndGFibGVzJwkJCT0+IGFycmF5KCksCgkJCSdleGNsdWRlX2NvbHMnIAkJPT4gYXJy
YXkoKSwKCQkJJ2luY2x1ZGVfY29scycgCQk9PiBhcnJheSgpLAoJCQknZHJ5X3J1bicgCQkJPT4g
dHJ1ZSwKCQkJJ3JlZ2V4JyAJCQk9PiBmYWxzZSwKCQkJJ3BhZ2VzaXplJyAJCQk9PiA1MDAwMCwK
CQkJJ2FsdGVyX2VuZ2luZScgCQk9PiBmYWxzZSwKCQkJJ2FsdGVyX2NvbGxhdGlvbicgCT0+IGZh
bHNlLAoJCQkndmVyYm9zZScJCQk9PiBmYWxzZQoJCSksICRhcmdzICk7CgoJCS8vIGhhbmRsZSBl
eGNlcHRpb25zCgkJc2V0X2V4Y2VwdGlvbl9oYW5kbGVyKCBhcnJheSggJHRoaXMsICdleGNlcHRp
b25zJyApICk7CgoJCS8vIGhhbmRsZSBlcnJvcnMKCQlzZXRfZXJyb3JfaGFuZGxlciggYXJyYXko
ICR0aGlzLCAnZXJyb3JzJyApLCBFX0VSUk9SIHwgRV9XQVJOSU5HICk7CgoJCS8vIGFsbG93IGEg
c3RyaW5nIGZvciBjb2x1bW5zCgkJZm9yZWFjaCggYXJyYXkoICdleGNsdWRlX2NvbHMnLCAnaW5j
bHVkZV9jb2xzJywgJ3RhYmxlcycgKSBhcyAkbWF5YmVfc3RyaW5nX2FyZyApIHsKCQkJaWYgKCBp
c19zdHJpbmcoICRhcmdzWyAkbWF5YmVfc3RyaW5nX2FyZyBdICkgKQoJCQkJJGFyZ3NbICRtYXli
ZV9zdHJpbmdfYXJnIF0gPSBhcnJheV9maWx0ZXIoIGFycmF5X21hcCggJ3RyaW0nLCBleHBsb2Rl
KCAnLCcsICRhcmdzWyAkbWF5YmVfc3RyaW5nX2FyZyBdICkgKSApOwoJCX0KCQkKCQkvLyB2ZXJp
ZnkgdGhhdCB0aGUgcG9ydCBudW1iZXIgaXMgbG9naWNhbAkJCgkJLy8gd29yayBhcm91bmQgUEhQ
cyBpbmFiaWxpdHkgdG8gc3RyaW5naWZ5IGEgemVybyB3aXRob3V0IG1ha2luZyBpdCBhbiBlbXB0
eSBzdHJpbmcKCQkvLyBBTkQgd2l0aG91dCBjYXN0aW5nIGF3YXkgdHJhaWxpbmcgY2hhcmFjdGVy
cyBpZiB0aGV5IGFyZSBwcmVzZW50LgoJCSRwb3J0X2FzX3N0cmluZyA9IChzdHJpbmcpJGFyZ3Nb
J3BvcnQnXSA/IChzdHJpbmcpJGFyZ3NbJ3BvcnQnXSA6ICIwIjsJCQoJCWlmICggKHN0cmluZylh
YnMoIChpbnQpJGFyZ3NbJ3BvcnQnXSApICE9PSAkcG9ydF9hc19zdHJpbmcgKSB7CgkJCSRwb3J0
X2Vycm9yID0gJ1BvcnQgbnVtYmVyIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNp
ZmllZC4nOwoJCQkkdGhpcy0+YWRkX2Vycm9yKCAkcG9ydF9lcnJvciwgJ2RiJyApOwoJCQlpZiAo
IGRlZmluZWQoICdTVERJTicgKSApIHsKCQkJCWVjaG8gJ0Vycm9yOiAnIC4gJHBvcnRfZXJyb3I7
CQoJCQl9CgkJCXJldHVybjsKCQl9CgoJCS8vIHNldCBjbGFzcyB2YXJzCgkJZm9yZWFjaCggJGFy
Z3MgYXMgJG5hbWUgPT4gJHZhbHVlICkgewoJCQlpZiAoIGlzX3N0cmluZyggJHZhbHVlICkgKQoJ
CQkJJHZhbHVlID0gc3RyaXBjc2xhc2hlcyggJHZhbHVlICk7CgkJCWlmICggaXNfYXJyYXkoICR2
YWx1ZSApICkKCQkJCSR2YWx1ZSA9IGFycmF5X21hcCggJ3N0cmlwY3NsYXNoZXMnLCAkdmFsdWUg
KTsKCQkJJHRoaXMtPnNldCggJG5hbWUsICR2YWx1ZSApOwoJCX0KCgkJLy8gb25seSBmb3Igbm9u
IGNsaSBjYWxsLCBjbGkgc2V0IG5vIHRpbWVvdXQsIG5vIG1lbW9yeSBsaW1pdAoJCWlmKCAhIGRl
ZmluZWQoICdTVERJTicgKSApIHsKCgkJCS8vIGluY3JlYXNlIHRpbWUgb3V0IGxpbWl0CgkJCUBz
ZXRfdGltZV9saW1pdCggNjAgKiAxMCApOwoKCQkJLy8gdHJ5IHRvIHB1c2ggdGhlIGFsbG93ZWQg
bWVtb3J5IHVwLCB3aGlsZSB3ZSdyZSBhdCBpdAoJCQlAaW5pX3NldCggJ21lbW9yeV9saW1pdCcs
ICcxMDI0TScgKTsKCgkJfQoKCQkvLyBzZXQgdXAgZGIgY29ubmVjdGlvbgoJCSR0aGlzLT5kYl9z
ZXR1cCgpOwoKCQlpZiAoICR0aGlzLT5kYl92YWxpZCgpICkgewoKCQkJLy8gdXBkYXRlIGVuZ2lu
ZXMKCQkJaWYgKCAkdGhpcy0+YWx0ZXJfZW5naW5lICkgewoJCQkJJHJlcG9ydCA9ICR0aGlzLT51
cGRhdGVfZW5naW5lKCAkdGhpcy0+YWx0ZXJfZW5naW5lLCAkdGhpcy0+dGFibGVzICk7CgkJCX0K
CgkJCS8vIHVwZGF0ZSBjb2xsYXRpb24KCQkJZWxzZWlmICggJHRoaXMtPmFsdGVyX2NvbGxhdGlv
biApIHsKCQkJCSRyZXBvcnQgPSAkdGhpcy0+dXBkYXRlX2NvbGxhdGlvbiggJHRoaXMtPmFsdGVy
X2NvbGxhdGlvbiwgJHRoaXMtPnRhYmxlcyApOwoJCQl9CgoJCQkvLyBkZWZhdWx0IHNlYXJjaC9y
ZXBsYWNlIGFjdGlvbgoJCQllbHNlIHsKCQkJCSRyZXBvcnQgPSAkdGhpcy0+cmVwbGFjZXIoICR0
aGlzLT5zZWFyY2gsICR0aGlzLT5yZXBsYWNlLCAkdGhpcy0+dGFibGVzICk7CgkJCX0KCgkJfSBl
bHNlIHsKCgkJCSRyZXBvcnQgPSAkdGhpcy0+cmVwb3J0OwoKCQl9CgoJCS8vIHN0b3JlIHJlcG9y
dAoJCSR0aGlzLT5zZXQoICdyZXBvcnQnLCAkcmVwb3J0ICk7CgkJcmV0dXJuICRyZXBvcnQ7Cgl9
CgoKCS8qKgoJICogVGVybWluYXRlcyBkYiBjb25uZWN0aW9uCgkgKgoJICogQHJldHVybiB2b2lk
CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCkgewoJCWlmICggJHRoaXMtPmRiX3Zh
bGlkKCkgKQoJCQkkdGhpcy0+ZGJfY2xvc2UoKTsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIGdldCgg
JHByb3BlcnR5ICkgewoJCXJldHVybiAkdGhpcy0+JHByb3BlcnR5OwoJfQoKCXB1YmxpYyBmdW5j
dGlvbiBzZXQoICRwcm9wZXJ0eSwgJHZhbHVlICkgewoJCSR0aGlzLT4kcHJvcGVydHkgPSAkdmFs
dWU7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBleGNlcHRpb25zKCAkZXhjZXB0aW9uICkgewoJCWVj
aG8gJGV4Y2VwdGlvbi0+Z2V0TWVzc2FnZSgpIC4gIlxuIjsKCX0KCgoJcHVibGljIGZ1bmN0aW9u
IGVycm9ycyggJG5vLCAkbWVzc2FnZSwgJGZpbGUsICRsaW5lICkgewoJCWVjaG8gJG1lc3NhZ2Ug
LiAiXG4iOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gbG9nKCAkdHlwZSA9ICcnICkgewoJCSRhcmdz
ID0gYXJyYXlfc2xpY2UoIGZ1bmNfZ2V0X2FyZ3MoKSwgMSApOwoJCWlmICggJHRoaXMtPmdldCgg
J3ZlcmJvc2UnICkgKSB7CgkJCWVjaG8gInskdHlwZX06ICI7CgkJCXByaW50X3IoICRhcmdzICk7
CgkJCWVjaG8gIlxuIjsKCQl9CgkJcmV0dXJuICRhcmdzOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24g
YWRkX2Vycm9yKCAkZXJyb3IsICR0eXBlID0gbnVsbCApIHsKCQlpZiAoICR0eXBlICE9PSBudWxs
ICkKCQkJJHRoaXMtPmVycm9yX3R5cGUgPSAkdHlwZTsKCQkkdGhpcy0+ZXJyb3JzWyAkdGhpcy0+
ZXJyb3JfdHlwZSBdW10gPSAkZXJyb3I7CgkJJHRoaXMtPmxvZyggJ2Vycm9yJywgJHRoaXMtPmVy
cm9yX3R5cGUsICRlcnJvciApOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gdXNlX3BkbygpIHsKCQly
ZXR1cm4gJHRoaXMtPmdldCggJ3VzZV9wZG8nICk7Cgl9CgoKCS8qKgoJICogU2V0dXAgY29ubmVj
dGlvbiwgcG9wdWxhdGUgdGFibGVzIGFycmF5CgkgKiBBbHNvIHJlc3BvbnNpYmxlIGZvciBzZWxl
Y3RpbmcgdGhlIHR5cGUgb2YgY29ubmVjdGlvbiB0byB1c2UuCgkgKgoJICogQHJldHVybiB2b2lk
CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBkYl9zZXR1cCgpIHsKCQkkbXlzcWxpX2F2YWlsYWJsZSA9
IGNsYXNzX2V4aXN0cyggJ215c3FsaScgKTsKCQkkcGRvX2F2YWlsYWJsZSAgICA9IGNsYXNzX2V4
aXN0cyggJ1BETycgICAgKTsKCgkJJGNvbm5lY3Rpb25fdHlwZSA9ICcnOwoKCQkvLyBEZWZhdWx0
IHRvIG15c3FsaSB0eXBlLgoJCS8vIE9ubHkgYWR2YW5jZSB0byBQRE8gaWYgYWxsIGNvbmRpdGlv
bnMgYXJlIG1ldC4KCQlpZiAoICRteXNxbGlfYXZhaWxhYmxlICkKCQl7CgkJCSRjb25uZWN0aW9u
X3R5cGUgPSAnbXlzcWxpJzsKCQl9CgoJCWlmICggJHBkb19hdmFpbGFibGUgKSB7CgkJCS8vIFBE
TyBpcyB0aGUgaW50ZXJmYWNlLCBidXQgaXQgbWF5IG5vdCBoYXZlIHRoZSAnbXlzcWwnIG1vZHVs
ZS4KCQkJJG15c3FsX2RyaXZlcl9wcmVzZW50ID0gaW5fYXJyYXkoICdteXNxbCcsIHBkb19kcml2
ZXJzKCkgKTsKCgkJCWlmICggJG15c3FsX2RyaXZlcl9wcmVzZW50ICkgewoJCQkJJGNvbm5lY3Rp
b25fdHlwZSA9ICdwZG8nOwoJCQl9CgkJfQoKCQkvLyBBYm9ydCBpZiBteXNxbGkgYW5kIFBETyBh
cmUgYm90aCBicm9rZW4uCgkJaWYgKCAnJyA9PT0gJGNvbm5lY3Rpb25fdHlwZSApCgkJewoJCQkk
dGhpcy0+YWRkX2Vycm9yKCAnQ291bGQgbm90IGZpbmQgYW55IE15U1FMIGRhdGFiYXNlIGRyaXZl
cnMuIChNeVNRTGkgb3IgUERPIHJlcXVpcmVkLiknLCAnZGInICk7CgkJCXJldHVybiBmYWxzZTsK
CQl9CgoJCS8vIGNvbm5lY3QKCQkkdGhpcy0+c2V0KCAnZGInLCAkdGhpcy0+Y29ubmVjdCggJGNv
bm5lY3Rpb25fdHlwZSApICk7CgoJfQoKCgkvKioKCSAqIERhdGFiYXNlIGNvbm5lY3Rpb24gdHlw
ZSByb3V0ZXIKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR0eXBlCgkgKgoJICogQHJldHVybiBjYWxs
YmFjawoJICovCglwdWJsaWMgZnVuY3Rpb24gY29ubmVjdCggJHR5cGUgPSAnJyApIHsKCQkkbWV0
aG9kID0gImNvbm5lY3RfeyR0eXBlfSI7CgkJcmV0dXJuICR0aGlzLT4kbWV0aG9kKCk7Cgl9CgoK
CS8qKgoJICogQ3JlYXRlcyB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbiB1c2luZyBuZXdlciBteXNx
bGkgZnVuY3Rpb25zCgkgKgoJICogQHJldHVybiByZXNvdXJjZXxib29sCgkgKi8KCXB1YmxpYyBm
dW5jdGlvbiBjb25uZWN0X215c3FsaSgpIHsKCgkJLy8gc3dpdGNoIG9mZiBQRE8KCQkkdGhpcy0+
c2V0KCAndXNlX3BkbycsIGZhbHNlICk7CgoJCSRjb25uZWN0aW9uID0gQG15c3FsaV9jb25uZWN0
KCAkdGhpcy0+aG9zdCwgJHRoaXMtPnVzZXIsICR0aGlzLT5wYXNzLCAkdGhpcy0+bmFtZSwgJHRo
aXMtPnBvcnQgKTsKCgkJLy8gdW5zZXQgaWYgbm90IGF2YWlsYWJsZQoJCWlmICggISAkY29ubmVj
dGlvbiApIHsKCQkJJHRoaXMtPmFkZF9lcnJvciggbXlzcWxpX2Nvbm5lY3RfZXJyb3IoICksICdk
YicgKTsKCQkJJGNvbm5lY3Rpb24gPSBmYWxzZTsKCQl9CgoJCXJldHVybiAkY29ubmVjdGlvbjsK
CX0KCgoJLyoqCgkgKiBTZXRzIHVwIGRhdGFiYXNlIGNvbm5lY3Rpb24gdXNpbmcgUERPCgkgKgoJ
ICogQHJldHVybiBQRE98Ym9vbAoJICovCglwdWJsaWMgZnVuY3Rpb24gY29ubmVjdF9wZG8oKSB7
CgkKCQl0cnkgewoJCQkkY29ubmVjdGlvbiA9IG5ldyBQRE8oICJteXNxbDpob3N0PXskdGhpcy0+
aG9zdH07cG9ydD17JHRoaXMtPnBvcnR9O2RibmFtZT17JHRoaXMtPm5hbWV9IiwgJHRoaXMtPnVz
ZXIsICR0aGlzLT5wYXNzICk7CgkJfSBjYXRjaCggUERPRXhjZXB0aW9uICRlICkgewoJCQkkdGhp
cy0+YWRkX2Vycm9yKCAkZS0+Z2V0TWVzc2FnZSgpLCAnZGInICk7CgkJCSRjb25uZWN0aW9uID0g
ZmFsc2U7CgkJfQoKCQkvLyBjaGVjayBpZiB0aGVyZSdzIGEgcHJvYmxlbSB3aXRoIG91ciBkYXRh
YmFzZSBhdCB0aGlzIHN0YWdlCgkJaWYgKCAkY29ubmVjdGlvbiAmJiAhICRjb25uZWN0aW9uLT5x
dWVyeSggJ1NIT1cgVEFCTEVTJyApICkgewoJCQkkZXJyb3JfaW5mbyA9ICRjb25uZWN0aW9uLT5l
cnJvckluZm8oKTsKCQkJaWYgKCAhZW1wdHkoICRlcnJvcl9pbmZvICkgJiYgaXNfYXJyYXkoICRl
cnJvcl9pbmZvICkgKQoJCQkJJHRoaXMtPmFkZF9lcnJvciggYXJyYXlfcG9wKCAkZXJyb3JfaW5m
byApLCAnZGInICk7IC8vIEFycmF5IHBvcCB3aWxsIG9ubHkgYWNjZXB0IGEgJHZhci4uCgkJCSRj
b25uZWN0aW9uID0gZmFsc2U7CgkJfQoKCQlyZXR1cm4gJGNvbm5lY3Rpb247Cgl9CgoKCS8qKgoJ
ICogUmV0cmlldmUgYWxsIHRhYmxlcyBmcm9tIHRoZSBkYXRhYmFzZQoJICoKCSAqIEByZXR1cm4g
YXJyYXkKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF90YWJsZXMoKSB7CgkJLy8gZ2V0IHRhYmxl
cwoKCQkvLyBBIGNsb25lIG9mIHNob3cgdGFibGUgc3RhdHVzIGJ1dCB3aXRoIGNoYXJhY3RlciBz
ZXQgZm9yIHRoZSB0YWJsZS4KCQkkc2hvd190YWJsZV9zdGF0dXMgPSAiU0VMRUNUCgkJICB0LmBU
QUJMRV9OQU1FYCBhcyBOYW1lLAoJCSAgdC5gRU5HSU5FYCBhcyBgRW5naW5lYCwKCQkgIHQuYHZl
cnNpb25gIGFzIGBWZXJzaW9uYCwKCQkgIHQuYFJPV19GT1JNQVRgIEFTIGBSb3dfZm9ybWF0YCwK
CQkgIHQuYFRBQkxFX1JPV1NgIEFTIGBSb3dzYCwKCQkgIHQuYEFWR19ST1dfTEVOR1RIYCBBUyBg
QXZnX3Jvd19sZW5ndGhgLAoJCSAgdC5gREFUQV9MRU5HVEhgIEFTIGBEYXRhX2xlbmd0aGAsCgkJ
ICB0LmBNQVhfREFUQV9MRU5HVEhgIEFTIGBNYXhfZGF0YV9sZW5ndGhgLAoJCSAgdC5gSU5ERVhf
TEVOR1RIYCBBUyBgSW5kZXhfbGVuZ3RoYCwKCQkgIHQuYERBVEFfRlJFRWAgQVMgYERhdGFfZnJl
ZWAsCgkJICB0LmBBVVRPX0lOQ1JFTUVOVGAgYXMgYEF1dG9faW5jcmVtZW50YCwKCQkgIHQuYENS
RUFURV9USU1FYCBBUyBgQ3JlYXRlX3RpbWVgLAoJCSAgdC5gVVBEQVRFX1RJTUVgIEFTIGBVcGRh
dGVfdGltZWAsCgkJICB0LmBDSEVDS19USU1FYCBBUyBgQ2hlY2tfdGltZWAsCgkJICB0LmBUQUJM
RV9DT0xMQVRJT05gIGFzIENvbGxhdGlvbiwKCQkgIGMuYENIQVJBQ1RFUl9TRVRfTkFNRWAgYXMg
Q2hhcmFjdGVyX3NldCwKCQkgIHQuYENoZWNrc3VtYCwKCQkgIHQuYENyZWF0ZV9vcHRpb25zYCwK
CQkgIHQuYHRhYmxlX0NvbW1lbnRgIGFzIGBDb21tZW50YAoJCUZST00gaW5mb3JtYXRpb25fc2No
ZW1hLmBUQUJMRVNgIHQKCQkJTEVGVCBKT0lOIGluZm9ybWF0aW9uX3NjaGVtYS5gQ09MTEFUSU9O
X0NIQVJBQ1RFUl9TRVRfQVBQTElDQUJJTElUWWAgYwoJCQkJT04gKCB0LmBUQUJMRV9DT0xMQVRJ
T05gID0gYy5gQ09MTEFUSU9OX05BTUVgICkKCQkgIFdIRVJFIHQuYFRBQkxFX1NDSEVNQWAgPSAn
eyR0aGlzLT5uYW1lfSc7CgkJIjsKCgkJJGFsbF90YWJsZXNfbXlzcWwgPSAkdGhpcy0+ZGJfcXVl
cnkoICRzaG93X3RhYmxlX3N0YXR1cyApOwoJCSRhbGxfdGFibGVzID0gYXJyYXkoKTsKCgkJaWYg
KCAhICRhbGxfdGFibGVzX215c3FsICkgewoKCQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMtPmRi
X2Vycm9yKCApLCAnZGInICk7CgoJCX0gZWxzZSB7CgoJCQkvLyBzZXQgdGhlIGNoYXJhY3RlciBz
ZXQKCQkJLy8kdGhpcy0+ZGJfc2V0X2NoYXJzZXQoICR0aGlzLT5nZXQoICdjaGFyc2V0JyApICk7
CgoJCQl3aGlsZSAoICR0YWJsZSA9ICR0aGlzLT5kYl9mZXRjaCggJGFsbF90YWJsZXNfbXlzcWwg
KSApIHsKCQkJCS8vIGlnbm9yZSB2aWV3cwoJCQkJaWYgKCAkdGFibGVbICdDb21tZW50JyBdID09
ICdWSUVXJyApCgkJCQkJY29udGludWU7CgoJCQkJJGFsbF90YWJsZXNbICR0YWJsZVswXSBdID0g
JHRhYmxlOwoJCQl9CgoJCX0KCgkJcmV0dXJuICRhbGxfdGFibGVzOwoJfQoKCgkvKioKCSAqIEdl
dCB0aGUgY2hhcmFjdGVyIHNldCBmb3IgdGhlIGN1cnJlbnQgdGFibGUKCSAqCgkgKiBAcGFyYW0g
c3RyaW5nICR0YWJsZV9uYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWJsZSB3ZSB3YW50IHRvIGdldCB0
aGUgY2hhcgoJICogc2V0IGZvcgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICAgIFRoZSBjaGFyYWN0
ZXIgZW5jb2Rpbmc7CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRfdGFibGVfY2hhcmFjdGVyX3Nl
dCggJHRhYmxlX25hbWUgPSAnJyApIHsKCQkkdGFibGVfbmFtZSA9ICR0aGlzLT5kYl9lc2NhcGUo
ICR0YWJsZV9uYW1lICk7CgkJJHNjaGVtYSA9ICR0aGlzLT5kYl9lc2NhcGUoICR0aGlzLT5uYW1l
ICk7CgoJCSRjaGFyc2V0ID0gJHRoaXMtPmRiX3F1ZXJ5KCAgIlNFTEVDVCBjLmBjaGFyYWN0ZXJf
c2V0X25hbWVgCgkJCUZST00gaW5mb3JtYXRpb25fc2NoZW1hLmBUQUJMRVNgIHQKCQkJCUxFRlQg
Sk9JTiBpbmZvcm1hdGlvbl9zY2hlbWEuYENPTExBVElPTl9DSEFSQUNURVJfU0VUX0FQUExJQ0FC
SUxJVFlgIGMKCQkJCU9OICh0LmBUQUJMRV9DT0xMQVRJT05gID0gYy5gQ09MTEFUSU9OX05BTUVg
KQoJCQlXSEVSRSB0LnRhYmxlX3NjaGVtYSA9IHskc2NoZW1hfQoJCQkJQU5EIHQudGFibGVfbmFt
ZSA9IHskdGFibGVfbmFtZX0KCQkJTElNSVQgMTsiICk7CgoJCSRlbmNvZGluZyA9IGZhbHNlOwoJ
CWlmICggISAkY2hhcnNldCApIHsKCQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMtPmRiX2Vycm9y
KCApLCAnZGInICk7CgkJfQoJCWVsc2UgewoJCQkkcmVzdWx0ID0gJHRoaXMtPmRiX2ZldGNoKCAk
Y2hhcnNldCApOwoJCQkkZW5jb2RpbmcgPSBpc3NldCggJHJlc3VsdFsgJ2NoYXJhY3Rlcl9zZXRf
bmFtZScgXSApID8gJHJlc3VsdFsgJ2NoYXJhY3Rlcl9zZXRfbmFtZScgXSA6IGZhbHNlOwoJCX0K
CgkJcmV0dXJuICRlbmNvZGluZzsKCX0KCgoJLyoqCgkgKiBSZXRyaWV2ZSBhbGwgc3VwcG9ydGVk
IGRhdGFiYXNlIGVuZ2luZXMKCSAqCgkgKiBAcmV0dXJuIGFycmF5CgkgKi8KCXB1YmxpYyBmdW5j
dGlvbiBnZXRfZW5naW5lcygpIHsKCgkJLy8gZ2V0IGF2YWlsYWJsZSBlbmdpbmVzCgkJJG15c3Fs
X2VuZ2luZXMgPSAkdGhpcy0+ZGJfcXVlcnkoICdTSE9XIEVOR0lORVM7JyApOwoJCSRlbmdpbmVz
ID0gYXJyYXkoKTsKCgkJaWYgKCAhICRteXNxbF9lbmdpbmVzICkgewoJCQkkdGhpcy0+YWRkX2Vy
cm9yKCAkdGhpcy0+ZGJfZXJyb3IoICksICdkYicgKTsKCQl9IGVsc2UgewoJCQl3aGlsZSAoICRl
bmdpbmUgPSAkdGhpcy0+ZGJfZmV0Y2goICRteXNxbF9lbmdpbmVzICkgKSB7CgkJCQlpZiAoIGlu
X2FycmF5KCAkZW5naW5lWyAnU3VwcG9ydCcgXSwgYXJyYXkoICdZRVMnLCAnREVGQVVMVCcgKSAp
ICkKCQkJCQkkZW5naW5lc1tdID0gJGVuZ2luZVsgJ0VuZ2luZScgXTsKCQkJfQoJCX0KCgkJcmV0
dXJuICRlbmdpbmVzOwoJfQoKCglwdWJsaWMgZnVuY3Rpb24gZGJfcXVlcnkoICRxdWVyeSApIHsK
CQlpZiAoICR0aGlzLT51c2VfcGRvKCkgKQoJCQlyZXR1cm4gJHRoaXMtPmRiLT5xdWVyeSggJHF1
ZXJ5ICk7CgkJZWxzZQoJCQlyZXR1cm4gbXlzcWxpX3F1ZXJ5KCAkdGhpcy0+ZGIsICRxdWVyeSAp
OwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBkYl91cGRhdGUoICRxdWVyeSApIHsKCQlpZiAoICR0aGlz
LT51c2VfcGRvKCkgKQoJCQlyZXR1cm4gJHRoaXMtPmRiLT5leGVjKCAkcXVlcnkgKTsKCQllbHNl
CgkJCXJldHVybiBteXNxbGlfcXVlcnkoICR0aGlzLT5kYiwgJHF1ZXJ5ICk7Cgl9CgoJcHVibGlj
IGZ1bmN0aW9uIGRiX2Vycm9yKCkgewoJCWlmICggJHRoaXMtPnVzZV9wZG8oKSApIHsKCQkJJGVy
cm9yX2luZm8gPSAkdGhpcy0+ZGItPmVycm9ySW5mbygpOwoJCQlyZXR1cm4gIWVtcHR5KCAkZXJy
b3JfaW5mbyApICYmIGlzX2FycmF5KCAkZXJyb3JfaW5mbyApID8gYXJyYXlfcG9wKCAkZXJyb3Jf
aW5mbyApIDogJ1Vua25vd24gZXJyb3InOwoJCX0KCQllbHNlCgkJCXJldHVybiBteXNxbGlfZXJy
b3IoICR0aGlzLT5kYiApOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBkYl9mZXRjaCggJGRhdGEgKSB7
CgkJaWYgKCAkdGhpcy0+dXNlX3BkbygpICkKCQkJcmV0dXJuICRkYXRhLT5mZXRjaCgpOwoJCWVs
c2UKCQkJcmV0dXJuIG15c3FsaV9mZXRjaF9hcnJheSggJGRhdGEgKTsKCX0KCglwdWJsaWMgZnVu
Y3Rpb24gZGJfZXNjYXBlKCAkc3RyaW5nICkgewoJCWlmICggJHRoaXMtPnVzZV9wZG8oKSApCgkJ
CXJldHVybiAkdGhpcy0+ZGItPnF1b3RlKCAkc3RyaW5nICk7CgkJZWxzZQoJCQlyZXR1cm4gIici
IC4gbXlzcWxpX3JlYWxfZXNjYXBlX3N0cmluZyggJHRoaXMtPmRiLCAkc3RyaW5nICkgLiAiJyI7
Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGRiX2ZyZWVfcmVzdWx0KCAkZGF0YSApIHsKCQlpZiAoICR0
aGlzLT51c2VfcGRvKCkgKQoJCQlyZXR1cm4gJGRhdGEtPmNsb3NlQ3Vyc29yKCk7CgkJZWxzZQoJ
CQlyZXR1cm4gbXlzcWxpX2ZyZWVfcmVzdWx0KCAkZGF0YSApOwoJfQoKCXB1YmxpYyBmdW5jdGlv
biBkYl9zZXRfY2hhcnNldCggJGNoYXJzZXQgPSAnJyApIHsKCQlpZiAoICEgZW1wdHkoICRjaGFy
c2V0ICkgKSB7CgkJCWlmICggISAkdGhpcy0+dXNlX3BkbygpICYmIGZ1bmN0aW9uX2V4aXN0cygg
J215c3FsaV9zZXRfY2hhcnNldCcgKSApCgkJCQlteXNxbGlfc2V0X2NoYXJzZXQoICR0aGlzLT5k
YiwgJGNoYXJzZXQgKTsKCQkJZWxzZQoJCQkJJHRoaXMtPmRiX3F1ZXJ5KCAnU0VUIE5BTUVTICcg
LiAkY2hhcnNldCApOwoJCX0KCX0KCglwdWJsaWMgZnVuY3Rpb24gZGJfY2xvc2UoKSB7CgkJaWYg
KCAkdGhpcy0+dXNlX3BkbygpICkKCQkJdW5zZXQoICR0aGlzLT5kYiApOwoJCWVsc2UKCQkJbXlz
cWxpX2Nsb3NlKCAkdGhpcy0+ZGIgKTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZGJfdmFsaWQoKSB7
CgkJcmV0dXJuIChib29sKSR0aGlzLT5kYjsKCX0KCgoJLyoqCgkgKiBXYWxrIGFuIGFycmF5IHJl
cGxhY2luZyBvbmUgZWxlbWVudCBmb3IgYW5vdGhlci4gKCBOT1QgVVNFRCBBTlkgTU9SRSApCgkg
KgoJICogQHBhcmFtIHN0cmluZyAkZmluZCAgICBUaGUgc3RyaW5nIHdlIHdhbnQgdG8gcmVwbGFj
ZS4KCSAqIEBwYXJhbSBzdHJpbmcgJHJlcGxhY2UgV2hhdCB3ZSdsbCBiZSByZXBsYWNpbmcgaXQg
d2l0aC4KCSAqIEBwYXJhbSBhcnJheSAkZGF0YSAgICBVc2VkIHRvIHBhc3MgYW55IHN1Ym9yZGlu
YXRlIGFycmF5cyBiYWNrIHRvIHRoZQoJICogZnVuY3Rpb24gZm9yIHNlYXJjaGluZy4KCSAqCgkg
KiBAcmV0dXJuIGFycmF5ICAgIFRoZSBvcmlnaW5hbCBhcnJheSB3aXRoIHRoZSByZXBsYWNlbWVu
dHMgbWFkZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHJlY3Vyc2l2ZV9hcnJheV9yZXBsYWNlKCAk
ZmluZCwgJHJlcGxhY2UsICRkYXRhICkgewoJCWlmICggaXNfYXJyYXkoICRkYXRhICkgKSB7CgkJ
CWZvcmVhY2ggKCAkZGF0YSBhcyAka2V5ID0+ICR2YWx1ZSApIHsKCQkJCWlmICggaXNfYXJyYXko
ICR2YWx1ZSApICkgewoJCQkJCSR0aGlzLT5yZWN1cnNpdmVfYXJyYXlfcmVwbGFjZSggJGZpbmQs
ICRyZXBsYWNlLCAkZGF0YVsgJGtleSBdICk7CgkJCQl9IGVsc2UgewoJCQkJCS8vIGhhdmUgdG8g
Y2hlY2sgaWYgaXQncyBzdHJpbmcgdG8gZW5zdXJlIG5vIHN3aXRjaGluZyB0byBzdHJpbmcgZm9y
IGJvb2xlYW5zL251bWJlcnMvbnVsbHMgLSBkb24ndCBuZWVkIGFueSBuYXN0eSBjb252ZXJzaW9u
cwoJCQkJCWlmICggaXNfc3RyaW5nKCAkdmFsdWUgKSApCgkJCQkJCSRkYXRhWyAka2V5IF0gPSAk
dGhpcy0+c3RyX3JlcGxhY2UoICRmaW5kLCAkcmVwbGFjZSwgJHZhbHVlICk7CgkJCQl9CgkJCX0K
CQl9IGVsc2UgewoJCQlpZiAoIGlzX3N0cmluZyggJGRhdGEgKSApCgkJCQkkZGF0YSA9ICR0aGlz
LT5zdHJfcmVwbGFjZSggJGZpbmQsICRyZXBsYWNlLCAkZGF0YSApOwoJCX0KCX0KCgoJLyoqCgkg
KiBUYWtlIGEgc2VyaWFsaXNlZCBhcnJheSBhbmQgdW5zZXJpYWxpc2UgaXQgcmVwbGFjaW5nIGVs
ZW1lbnRzIGFzIG5lZWRlZCBhbmQKCSAqIHVuc2VyaWFsaXNpbmcgYW55IHN1Ym9yZGluYXRlIGFy
cmF5cyBhbmQgcGVyZm9ybWluZyB0aGUgcmVwbGFjZSBvbiB0aG9zZSB0b28uCgkgKgoJICogQHBh
cmFtIHN0cmluZyAkZnJvbSAgICAgICBTdHJpbmcgd2UncmUgbG9va2luZyB0byByZXBsYWNlLgoJ
ICogQHBhcmFtIHN0cmluZyAkdG8gICAgICAgICBXaGF0IHdlIHdhbnQgaXQgdG8gYmUgcmVwbGFj
ZWQgd2l0aAoJICogQHBhcmFtIGFycmF5ICAkZGF0YSAgICAgICBVc2VkIHRvIHBhc3MgYW55IHN1
Ym9yZGluYXRlIGFycmF5cyBiYWNrIHRvIGluLgoJICogQHBhcmFtIGJvb2wgICAkc2VyaWFsaXNl
ZCBEb2VzIHRoZSBhcnJheSBwYXNzZWQgdmlhICRkYXRhIG5lZWQgc2VyaWFsaXNpbmcuCgkgKgoJ
ICogQHJldHVybiBhcnJheQlUaGUgb3JpZ2luYWwgYXJyYXkgd2l0aCBhbGwgZWxlbWVudHMgcmVw
bGFjZWQgYXMgbmVlZGVkLgoJICovCglwdWJsaWMgZnVuY3Rpb24gcmVjdXJzaXZlX3Vuc2VyaWFs
aXplX3JlcGxhY2UoICRmcm9tID0gJycsICR0byA9ICcnLCAkZGF0YSA9ICcnLCAkc2VyaWFsaXNl
ZCA9IGZhbHNlICkgewoKCQkvLyBzb21lIHVuc2VyaWFsaXNlZCBkYXRhIGNhbm5vdCBiZSByZS1z
ZXJpYWxpc2VkIGVnLiBTaW1wbGVYTUxFbGVtZW50cwoJCXRyeSB7CgoJCQlpZiAoIGlzX3N0cmlu
ZyggJGRhdGEgKSAmJiAoICR1bnNlcmlhbGl6ZWQgPSBAdW5zZXJpYWxpemUoICRkYXRhICkgKSAh
PT0gZmFsc2UgKSB7CgkJCQkkZGF0YSA9ICR0aGlzLT5yZWN1cnNpdmVfdW5zZXJpYWxpemVfcmVw
bGFjZSggJGZyb20sICR0bywgJHVuc2VyaWFsaXplZCwgdHJ1ZSApOwoJCQl9CgoJCQllbHNlaWYg
KCBpc19hcnJheSggJGRhdGEgKSApIHsKCQkJCSRfdG1wID0gYXJyYXkoICk7CgkJCQlmb3JlYWNo
ICggJGRhdGEgYXMgJGtleSA9PiAkdmFsdWUgKSB7CgkJCQkJJF90bXBbICRrZXkgXSA9ICR0aGlz
LT5yZWN1cnNpdmVfdW5zZXJpYWxpemVfcmVwbGFjZSggJGZyb20sICR0bywgJHZhbHVlLCBmYWxz
ZSApOwoJCQkJfQoKCQkJCSRkYXRhID0gJF90bXA7CgkJCQl1bnNldCggJF90bXAgKTsKCQkJfQoK
CQkJLy8gU3VibWl0dGVkIGJ5IFRpbmEgTWF0dGVyCgkJCWVsc2VpZiAoIGlzX29iamVjdCggJGRh
dGEgKSApIHsKCQkJCS8vICRkYXRhX2NsYXNzID0gZ2V0X2NsYXNzKCAkZGF0YSApOwoJCQkJJF90
bXAgPSAkZGF0YTsgLy8gbmV3ICRkYXRhX2NsYXNzKCApOwoJCQkJJHByb3BzID0gZ2V0X29iamVj
dF92YXJzKCAkZGF0YSApOwoJCQkJZm9yZWFjaCAoICRwcm9wcyBhcyAka2V5ID0+ICR2YWx1ZSAp
IHsKCQkJCQkkX3RtcC0+JGtleSA9ICR0aGlzLT5yZWN1cnNpdmVfdW5zZXJpYWxpemVfcmVwbGFj
ZSggJGZyb20sICR0bywgJHZhbHVlLCBmYWxzZSApOwoJCQkJfQoKCQkJCSRkYXRhID0gJF90bXA7
CgkJCQl1bnNldCggJF90bXAgKTsKCQkJfQoKCQkJZWxzZSB7CgkJCQlpZiAoIGlzX3N0cmluZygg
JGRhdGEgKSApIHsKCQkJCQkkZGF0YSA9ICR0aGlzLT5zdHJfcmVwbGFjZSggJGZyb20sICR0bywg
JGRhdGEgKTsKCgkJCQl9CgkJCX0KCgkJCWlmICggJHNlcmlhbGlzZWQgKQoJCQkJcmV0dXJuIHNl
cmlhbGl6ZSggJGRhdGEgKTsKCgkJfSBjYXRjaCggRXhjZXB0aW9uICRlcnJvciApIHsKCgkJCSR0
aGlzLT5hZGRfZXJyb3IoICRlcnJvci0+Z2V0TWVzc2FnZSgpLCAncmVzdWx0cycgKTsKCgkJfQoK
CQlyZXR1cm4gJGRhdGE7Cgl9CgoKCS8qKgoJICogUmVndWxhciBleHByZXNzaW9uIGNhbGxiYWNr
IHRvIGZpeCBzZXJpYWxpc2VkIHN0cmluZyBsZW5ndGhzCgkgKgoJICogQHBhcmFtIGFycmF5ICRt
YXRjaGVzIG1hdGNoZXMgZnJvbSB0aGUgcmVndWxhciBleHByZXNzaW9uCgkgKgoJICogQHJldHVy
biBzdHJpbmcKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHByZWdfZml4X3NlcmlhbGlzZWRfY291bnQo
ICRtYXRjaGVzICkgewoJCSRsZW5ndGggPSBtYl9zdHJsZW4oICRtYXRjaGVzWyAyIF0gKTsKCQlp
ZiAoICRsZW5ndGggIT09IGludHZhbCggJG1hdGNoZXNbIDEgXSApICkKCQkJcmV0dXJuICJzOnsk
bGVuZ3RofTpcInskbWF0Y2hlc1syXX1cIjsiOwoJCXJldHVybiAkbWF0Y2hlc1sgMCBdOwoJfQoK
CgkvKioKCSAqIFRoZSBtYWluIGxvb3AgdHJpZ2dlcmVkIGluIHN0ZXAgNS4gVXAgaGVyZSB0byBr
ZWVwIGl0IG91dCBvZiB0aGUgd2F5IG9mIHRoZQoJICogSFRNTC4gVGhpcyB3YWxrcyBldmVyeSB0
YWJsZSBpbiB0aGUgZGIgdGhhdCB3YXMgc2VsZWN0ZWQgaW4gc3RlcCAzIGFuZCB0aGVuCgkgKiB3
YWxrcyBldmVyeSByb3cgYW5kIGNvbHVtbiByZXBsYWNpbmcgYWxsIG9jY3VyZW5jZXMgb2YgYSBz
dHJpbmcgd2l0aCBhbm90aGVyLgoJICogV2Ugc3BsaXQgbGFyZ2UgdGFibGVzIGludG8gNTAsMDAw
IHJvdyBibG9ja3Mgd2hlbiBkZWFsaW5nIHdpdGggdGhlbSB0byBzYXZlCgkgKiBvbiBtZW1tb3J5
IGNvbnN1bXB0aW9uLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNlYXJjaCAgICAgV2hhdCB3ZSB3
YW50IHRvIHJlcGxhY2UKCSAqIEBwYXJhbSBzdHJpbmcgJHJlcGxhY2UgICAgV2hhdCB3ZSB3YW50
IHRvIHJlcGxhY2UgaXQgd2l0aC4KCSAqIEBwYXJhbSBhcnJheSAgJHRhYmxlcyAgICAgVGhlIHRh
YmxlcyB3ZSB3YW50IHRvIGxvb2sgYXQuCgkgKgoJICogQHJldHVybiBhcnJheSAgICBDb2xsZWN0
aW9uIG9mIGluZm9ybWF0aW9uIGdhdGhlcmVkIGR1cmluZyB0aGUgcnVuLgoJICovCglwdWJsaWMg
ZnVuY3Rpb24gcmVwbGFjZXIoICRzZWFyY2ggPSAnJywgJHJlcGxhY2UgPSAnJywgJHRhYmxlcyA9
IGFycmF5KCApICkgewoKCQkvLyBjaGVjayB3ZSBoYXZlIGEgc2VhcmNoIHN0cmluZywgYmFpbCBp
ZiBub3QKCQlpZiAoIGVtcHR5KCAkc2VhcmNoICkgKSB7CgkJCSR0aGlzLT5hZGRfZXJyb3IoICdT
ZWFyY2ggc3RyaW5nIGlzIGVtcHR5JywgJ3NlYXJjaCcgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0K
CgkJJHJlcG9ydCA9IGFycmF5KCAndGFibGVzJyA9PiAwLAoJCQkJCQkgJ3Jvd3MnID0+IDAsCgkJ
CQkJCSAnY2hhbmdlJyA9PiAwLAoJCQkJCQkgJ3VwZGF0ZXMnID0+IDAsCgkJCQkJCSAnc3RhcnQn
ID0+IG1pY3JvdGltZSggKSwKCQkJCQkJICdlbmQnID0+IG1pY3JvdGltZSggKSwKCQkJCQkJICdl
cnJvcnMnID0+IGFycmF5KCApLAoJCQkJCQkgJ3RhYmxlX3JlcG9ydHMnID0+IGFycmF5KCApCgkJ
CQkJCSApOwoKCQkkdGFibGVfcmVwb3J0ID0gYXJyYXkoCgkJCQkJCSAncm93cycgPT4gMCwKCQkJ
CQkJICdjaGFuZ2UnID0+IDAsCgkJCQkJCSAnY2hhbmdlcycgPT4gYXJyYXkoICksCgkJCQkJCSAn
dXBkYXRlcycgPT4gMCwKCQkJCQkJICdzdGFydCcgPT4gbWljcm90aW1lKCApLAoJCQkJCQkgJ2Vu
ZCcgPT4gbWljcm90aW1lKCApLAoJCQkJCQkgJ2Vycm9ycycgPT4gYXJyYXkoICksCgkJCQkJCSAp
OwoKCQkkZHJ5X3J1biA9ICR0aGlzLT5nZXQoICdkcnlfcnVuJyApOwoKCQlpZiAoICR0aGlzLT5n
ZXQoICdkcnlfcnVuJyApICkgCS8vIFJlcG9ydCB0aGlzIGFzIGEgc2VhcmNoLW9ubHkgcnVuLgoJ
CQkkdGhpcy0+YWRkX2Vycm9yKCAnVGhlIGRyeS1ydW4gb3B0aW9uIHdhcyBzZWxlY3RlZC4gTm8g
cmVwbGFjZW1lbnRzIHdpbGwgYmUgbWFkZS4nLCAncmVzdWx0cycgKTsKCgkJLy8gaWYgbm8gdGFi
bGVzIHNlbGVjdGVkIGFzc3VtZSBhbGwKCQlpZiAoIGVtcHR5KCAkdGFibGVzICkgKSB7CgkJCSRh
bGxfdGFibGVzID0gJHRoaXMtPmdldF90YWJsZXMoKTsKCQkJJHRhYmxlcyA9IGFycmF5X2tleXMo
ICRhbGxfdGFibGVzICk7CgkJfQoKCQlpZiAoIGlzX2FycmF5KCAkdGFibGVzICkgJiYgISBlbXB0
eSggJHRhYmxlcyApICkgewoKCQkJZm9yZWFjaCggJHRhYmxlcyBhcyAkdGFibGUgKSB7CgoJCQkJ
JGVuY29kaW5nID0gJHRoaXMtPmdldF90YWJsZV9jaGFyYWN0ZXJfc2V0KCAkdGFibGUgKTsKCQkJ
CXN3aXRjaCggJGVuY29kaW5nICkgewoKCQkJCQkvLyBUYWJsZXMgZW5jb2RlZCB3aXRoIHRoaXMg
d29yayBmb3IgbWUgb25seSB3aGVuIEkgc2V0IG5hbWVzIHRvIHV0ZjguIEkgZG9uJ3QgdHJ1c3Qg
dGhpcyBpbiB0aGUgd2lsZCBzbyBJJ20gZ29pbmcgdG8gYXZvaWQuCgkJCQkJY2FzZSAndXRmMTYn
OgoJCQkJCWNhc2UgJ3V0ZjMyJzoKCQkJCQkJLy8kZW5jb2RpbmcgPSAndXRmOCc7CgkJCQkJCSR0
aGlzLT5hZGRfZXJyb3IoICJUaGUgdGFibGUgXCJ7JHRhYmxlfVwiIGlzIGVuY29kZWQgdXNpbmcg
XCJ7JGVuY29kaW5nfVwiIHdoaWNoIGlzIGN1cnJlbnRseSB1bnN1cHBvcnRlZC4iLCAncmVzdWx0
cycgKTsKCQkJCQkJY29udGludWU7CgkJCQkJCWJyZWFrOwoKCQkJCQlkZWZhdWx0OgoJCQkJCQkk
dGhpcy0+ZGJfc2V0X2NoYXJzZXQoICRlbmNvZGluZyApOwoJCQkJCQlicmVhazsKCQkJCX0KCgoJ
CQkJJHJlcG9ydFsgJ3RhYmxlcycgXSsrOwoKCQkJCS8vIGdldCBwcmltYXJ5IGtleSBhbmQgY29s
dW1ucwoJCQkJbGlzdCggJHByaW1hcnlfa2V5LCAkY29sdW1ucyApID0gJHRoaXMtPmdldF9jb2x1
bW5zKCAkdGFibGUgKTsKCgkJCQlpZiAoICRwcmltYXJ5X2tleSA9PT0gbnVsbCApIHsKCQkJCQkk
dGhpcy0+YWRkX2Vycm9yKCAiVGhlIHRhYmxlIFwieyR0YWJsZX1cIiBoYXMgbm8gcHJpbWFyeSBr
ZXkuIENoYW5nZXMgd2lsbCBoYXZlIHRvIGJlIG1hZGUgbWFudWFsbHkuIiwgJ3Jlc3VsdHMnICk7
CgkJCQkJY29udGludWU7CgkJCQl9CgoJCQkJLy8gY3JlYXRlIG5ldyB0YWJsZSByZXBvcnQgaW5z
dGFuY2UKCQkJCSRuZXdfdGFibGVfcmVwb3J0ID0gJHRhYmxlX3JlcG9ydDsKCQkJCSRuZXdfdGFi
bGVfcmVwb3J0WyAnc3RhcnQnIF0gPSBtaWNyb3RpbWUoKTsKCgkJCQkkdGhpcy0+bG9nKCAnc2Vh
cmNoX3JlcGxhY2VfdGFibGVfc3RhcnQnLCAkdGFibGUsICRzZWFyY2gsICRyZXBsYWNlICk7CgoJ
CQkJLy8gQ291bnQgdGhlIG51bWJlciBvZiByb3dzIHdlIGhhdmUgaW4gdGhlIHRhYmxlIGlmIGxh
cmdlIHdlJ2xsIHNwbGl0IGludG8gYmxvY2tzLCBUaGlzIGlzIGEgbW9kIGZyb20gU2ltb24gV2hl
YXRsZXkKCQkJCSRyb3dfY291bnQgPSAkdGhpcy0+ZGJfcXVlcnkoICJTRUxFQ1QgQ09VTlQoKikg
RlJPTSBgeyR0YWJsZX1gIiApOwoJCQkJJHJvd3NfcmVzdWx0ID0gJHRoaXMtPmRiX2ZldGNoKCAk
cm93X2NvdW50ICk7CgkJCQkkcm93X2NvdW50ID0gJHJvd3NfcmVzdWx0WyAwIF07CgoJCQkJJHBh
Z2Vfc2l6ZSA9ICR0aGlzLT5nZXQoICdwYWdlX3NpemUnICk7CgkJCQkkcGFnZXMgPSBjZWlsKCAk
cm93X2NvdW50IC8gJHBhZ2Vfc2l6ZSApOwoKCQkJCWZvciggJHBhZ2UgPSAwOyAkcGFnZSA8ICRw
YWdlczsgJHBhZ2UrKyApIHsKCgkJCQkJJHN0YXJ0ID0gJHBhZ2UgKiAkcGFnZV9zaXplOwoKCQkJ
CQkvLyBHcmFiIHRoZSBjb250ZW50IG9mIHRoZSB0YWJsZQoJCQkJCSRkYXRhID0gJHRoaXMtPmRi
X3F1ZXJ5KCBzcHJpbnRmKCAnU0VMRUNUICogRlJPTSBgJXNgIExJTUlUICVkLCAlZCcsICR0YWJs
ZSwgJHN0YXJ0LCAkcGFnZV9zaXplICkgKTsKCgkJCQkJaWYgKCAhICRkYXRhICkKCQkJCQkJJHRo
aXMtPmFkZF9lcnJvciggJHRoaXMtPmRiX2Vycm9yKCApLCAncmVzdWx0cycgKTsKCgkJCQkJd2hp
bGUgKCAkcm93ID0gJHRoaXMtPmRiX2ZldGNoKCAkZGF0YSApICkgewoKCQkJCQkJJHJlcG9ydFsg
J3Jvd3MnIF0rKzsgLy8gSW5jcmVtZW50IHRoZSByb3cgY291bnRlcgoJCQkJCQkkbmV3X3RhYmxl
X3JlcG9ydFsgJ3Jvd3MnIF0rKzsKCgkJCQkJCSR1cGRhdGVfc3FsID0gYXJyYXkoICk7CgkJCQkJ
CSR3aGVyZV9zcWwgPSBhcnJheSggKTsKCQkJCQkJJHVwZGF0ZSA9IGZhbHNlOwoKCQkJCQkJZm9y
ZWFjaCggJGNvbHVtbnMgYXMgJGNvbHVtbiApIHsKCgkJCQkJCQkkZWRpdGVkX2RhdGEgPSAkZGF0
YV90b19maXggPSAkcm93WyAkY29sdW1uIF07CgoJCQkJCQkJaWYgKCAkcHJpbWFyeV9rZXkgPT0g
JGNvbHVtbiApIHsKCQkJCQkJCQkkd2hlcmVfc3FsW10gPSAiYHskY29sdW1ufWAgPSAiIC4gJHRo
aXMtPmRiX2VzY2FwZSggJGRhdGFfdG9fZml4ICk7CgkJCQkJCQkJY29udGludWU7CgkJCQkJCQl9
CgoJCQkJCQkJLy8gZXhjbHVkZSBjb2xzCgkJCQkJCQlpZiAoIGluX2FycmF5KCAkY29sdW1uLCAk
dGhpcy0+ZXhjbHVkZV9jb2xzICkgKQoJCQkJCQkJCWNvbnRpbnVlOwoKCQkJCQkJCS8vIGluY2x1
ZGUgY29scwoJCQkJCQkJaWYgKCAhIGVtcHR5KCAkdGhpcy0+aW5jbHVkZV9jb2xzICkgJiYgISBp
bl9hcnJheSggJGNvbHVtbiwgJHRoaXMtPmluY2x1ZGVfY29scyApICkKCQkJCQkJCQljb250aW51
ZTsKCgkJCQkJCQkvLyBSdW4gYSBzZWFyY2ggcmVwbGFjZSBvbiB0aGUgZGF0YSB0aGF0J2xsIHJl
c3BlY3QgdGhlIHNlcmlhbGlzYXRpb24uCgkJCQkJCQkkZWRpdGVkX2RhdGEgPSAkdGhpcy0+cmVj
dXJzaXZlX3Vuc2VyaWFsaXplX3JlcGxhY2UoICRzZWFyY2gsICRyZXBsYWNlLCAkZGF0YV90b19m
aXggKTsKCgkJCQkJCQkvLyBTb21ldGhpbmcgd2FzIGNoYW5nZWQKCQkJCQkJCWlmICggJGVkaXRl
ZF9kYXRhICE9ICRkYXRhX3RvX2ZpeCApIHsKCgkJCQkJCQkJJHJlcG9ydFsgJ2NoYW5nZScgXSsr
OwoJCQkJCQkJCSRuZXdfdGFibGVfcmVwb3J0WyAnY2hhbmdlJyBdKys7CgoJCQkJCQkJCS8vIGxv
ZyBmaXJzdCB4IGNoYW5nZXMKCQkJCQkJCQlpZiAoICRuZXdfdGFibGVfcmVwb3J0WyAnY2hhbmdl
JyBdIDw9ICR0aGlzLT5nZXQoICdyZXBvcnRfY2hhbmdlX251bScgKSApIHsKCQkJCQkJCQkJJG5l
d190YWJsZV9yZXBvcnRbICdjaGFuZ2VzJyBdW10gPSBhcnJheSgKCQkJCQkJCQkJCSdyb3cnID0+
ICRuZXdfdGFibGVfcmVwb3J0WyAncm93cycgXSwKCQkJCQkJCQkJCSdjb2x1bW4nID0+ICRjb2x1
bW4sCgkJCQkJCQkJCQknZnJvbScgPT4gdXRmOF9lbmNvZGUoICRkYXRhX3RvX2ZpeCApLAoJCQkJ
CQkJCQkJJ3RvJyA9PiB1dGY4X2VuY29kZSggJGVkaXRlZF9kYXRhICkKCQkJCQkJCQkJKTsKCQkJ
CQkJCQl9CgoJCQkJCQkJCSR1cGRhdGVfc3FsW10gPSAiYHskY29sdW1ufWAgPSAiIC4gJHRoaXMt
PmRiX2VzY2FwZSggJGVkaXRlZF9kYXRhICk7CgkJCQkJCQkJJHVwZGF0ZSA9IHRydWU7CgoJCQkJ
CQkJfQoKCQkJCQkJfQoKCQkJCQkJaWYgKCAkZHJ5X3J1biApIHsKCQkJCQkJCS8vIG5vdGhpbmcg
Zm9yIHRoaXMgc3RhdGUKCQkJCQkJfSBlbHNlaWYgKCAkdXBkYXRlICYmICEgZW1wdHkoICR3aGVy
ZV9zcWwgKSApIHsKCgkJCQkJCQkkc3FsID0gJ1VQREFURSAnIC4gJHRhYmxlIC4gJyBTRVQgJyAu
IGltcGxvZGUoICcsICcsICR1cGRhdGVfc3FsICkgLiAnIFdIRVJFICcgLiBpbXBsb2RlKCAnIEFO
RCAnLCBhcnJheV9maWx0ZXIoICR3aGVyZV9zcWwgKSApOwoJCQkJCQkJJHJlc3VsdCA9ICR0aGlz
LT5kYl91cGRhdGUoICRzcWwgKTsKCgkJCQkJCQlpZiAoICEgaXNfaW50KCAkcmVzdWx0ICkgJiYg
ISAkcmVzdWx0ICkgewoKCQkJCQkJCQkkdGhpcy0+YWRkX2Vycm9yKCAkdGhpcy0+ZGJfZXJyb3Io
ICksICdyZXN1bHRzJyApOwoKCQkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJCSRyZXBvcnRbICd1cGRh
dGVzJyBdKys7CgkJCQkJCQkJJG5ld190YWJsZV9yZXBvcnRbICd1cGRhdGVzJyBdKys7CgkJCQkJ
CQl9CgoJCQkJCQl9CgoJCQkJCX0KCgkJCQkJJHRoaXMtPmRiX2ZyZWVfcmVzdWx0KCAkZGF0YSAp
OwoKCQkJCX0KCgkJCQkkbmV3X3RhYmxlX3JlcG9ydFsgJ2VuZCcgXSA9IG1pY3JvdGltZSgpOwoK
CQkJCS8vIHN0b3JlIHRhYmxlIHJlcG9ydCBpbiBtYWluCgkJCQkkcmVwb3J0WyAndGFibGVfcmVw
b3J0cycgXVsgJHRhYmxlIF0gPSAkbmV3X3RhYmxlX3JlcG9ydDsKCgkJCQkvLyBsb2cgcmVzdWx0
CgkJCQkkdGhpcy0+bG9nKCAnc2VhcmNoX3JlcGxhY2VfdGFibGVfZW5kJywgJHRhYmxlLCAkbmV3
X3RhYmxlX3JlcG9ydCApOwoJCQl9CgoJCX0KCgkJJHJlcG9ydFsgJ2VuZCcgXSA9IG1pY3JvdGlt
ZSggKTsKCgkJJHRoaXMtPmxvZyggJ3NlYXJjaF9yZXBsYWNlX2VuZCcsICRzZWFyY2gsICRyZXBs
YWNlLCAkcmVwb3J0ICk7CgoJCXJldHVybiAkcmVwb3J0OwoJfQoKCglwdWJsaWMgZnVuY3Rpb24g
Z2V0X2NvbHVtbnMoICR0YWJsZSApIHsKCgkJJHByaW1hcnlfa2V5ID0gbnVsbDsKCQkkY29sdW1u
cyA9IGFycmF5KCApOwoKCQkvLyBHZXQgYSBsaXN0IG9mIGNvbHVtbnMgaW4gdGhpcyB0YWJsZQoJ
CSRmaWVsZHMgPSAkdGhpcy0+ZGJfcXVlcnkoICJERVNDUklCRSB7JHRhYmxlfSIgKTsKCQlpZiAo
ICEgJGZpZWxkcyApIHsKCQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMtPmRiX2Vycm9yKCApLCAn
ZGInICk7CgkJfSBlbHNlIHsKCQkJd2hpbGUoICRjb2x1bW4gPSAkdGhpcy0+ZGJfZmV0Y2goICRm
aWVsZHMgKSApIHsKCQkJCSRjb2x1bW5zW10gPSAkY29sdW1uWyAnRmllbGQnIF07CgkJCQlpZiAo
ICRjb2x1bW5bICdLZXknIF0gPT0gJ1BSSScgKQoJCQkJCSRwcmltYXJ5X2tleSA9ICRjb2x1bW5b
ICdGaWVsZCcgXTsKCQkJfQoJCX0KCgkJcmV0dXJuIGFycmF5KCAkcHJpbWFyeV9rZXksICRjb2x1
bW5zICk7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBkb19jb2x1bW4oKSB7CgoJfQoKCgkvKioKCSAq
IENvbnZlcnQgdGFibGUgZW5naW5lcwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGVuZ2luZSBFbmdp
bmUgdHlwZQoJICogQHBhcmFtIGFycmF5ICR0YWJsZXMKCSAqCgkgKiBAcmV0dXJuIGFycmF5ICAg
IE1vZGlmaWNhdGlvbiByZXBvcnQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZV9lbmdpbmUo
ICRlbmdpbmUgPSAnTXlJU0FNJywgJHRhYmxlcyA9IGFycmF5KCkgKSB7CgoJCSRyZXBvcnQgPSBm
YWxzZTsKCgkJaWYgKCBlbXB0eSggJHRoaXMtPmVuZ2luZXMgKSApCgkJCSR0aGlzLT5zZXQoICdl
bmdpbmVzJywgJHRoaXMtPmdldF9lbmdpbmVzKCkgKTsKCgkJaWYgKCBpbl9hcnJheSggJGVuZ2lu
ZSwgJHRoaXMtPmdldCggJ2VuZ2luZXMnICkgKSApIHsKCgkJCSRyZXBvcnQgPSBhcnJheSggJ2Vu
Z2luZScgPT4gJGVuZ2luZSwgJ2NvbnZlcnRlZCcgPT4gYXJyYXkoKSApOwoKCQkJaWYgKCBlbXB0
eSggJHRhYmxlcyApICkgewoJCQkJJGFsbF90YWJsZXMgPSAkdGhpcy0+Z2V0X3RhYmxlcygpOwoJ
CQkJJHRhYmxlcyA9IGFycmF5X2tleXMoICRhbGxfdGFibGVzICk7CgkJCX0KCgkJCWZvcmVhY2go
ICR0YWJsZXMgYXMgJHRhYmxlICkgewoJCQkJJHRhYmxlX2luZm8gPSAkYWxsX3RhYmxlc1sgJHRh
YmxlIF07CgoJCQkJLy8gYXJlIHdlIHVwZGF0aW5nIHRoZSBlbmdpbmU/CgkJCQlpZiAoICR0YWJs
ZV9pbmZvWyAnRW5naW5lJyBdICE9ICRlbmdpbmUgKSB7CgkJCQkJJGVuZ2luZV9jb252ZXJ0ZWQg
PSAkdGhpcy0+ZGJfcXVlcnkoICJhbHRlciB0YWJsZSB7JHRhYmxlfSBlbmdpbmUgPSB7JGVuZ2lu
ZX07IiApOwoJCQkJCWlmICggISAkZW5naW5lX2NvbnZlcnRlZCApCgkJCQkJCSR0aGlzLT5hZGRf
ZXJyb3IoICR0aGlzLT5kYl9lcnJvciggKSwgJ3Jlc3VsdHMnICk7CgkJCQkJZWxzZQoJCQkJCQkk
cmVwb3J0WyAnY29udmVydGVkJyBdWyAkdGFibGUgXSA9IHRydWU7CgkJCQkJY29udGludWU7CgkJ
CQl9IGVsc2UgewoJCQkJCSRyZXBvcnRbICdjb252ZXJ0ZWQnIF1bICR0YWJsZSBdID0gZmFsc2U7
CgkJCQl9CgoJCQkJaWYgKCBpc3NldCggJHJlcG9ydFsgJ2NvbnZlcnRlZCcgXVsgJHRhYmxlIF0g
KSApCgkJCQkJJHRoaXMtPmxvZyggJ3VwZGF0ZV9lbmdpbmUnLCAkdGFibGUsICRyZXBvcnQsICRl
bmdpbmUgKTsKCQkJfQoKCQl9IGVsc2UgewoKCQkJJHRoaXMtPmFkZF9lcnJvciggJ0Nhbm5vdCBj
b252ZXJ0IHRhYmxlcyB0byB1bnN1cHBvcnRlZCB0YWJsZSBlbmdpbmUgJnJkcXVvOycgLiAkZW5n
aW5lIC4gJyZsZHF1bzsnLCAncmVzdWx0cycgKTsKCgkJfQoKCQlyZXR1cm4gJHJlcG9ydDsKCX0K
CgoJLyoqCgkgKiBVcGRhdGVzIHRoZSBjaGFyYWN0ZXJzZXQgYW5kIGNvbGxhdGlvbiBvbiB0aGUg
c3BlY2lmaWVkIHRhYmxlcwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGNvbGxhdGUgdGFibGUgY29s
bGF0aW9uCgkgKiBAcGFyYW0gYXJyYXkgJHRhYmxlcyAgdGFibGVzIHRvIG1vZGlmeQoJICoKCSAq
IEByZXR1cm4gYXJyYXkgICAgTW9kaWZpY2F0aW9uIHJlcG9ydAoJICovCglwdWJsaWMgZnVuY3Rp
b24gdXBkYXRlX2NvbGxhdGlvbiggJGNvbGxhdGlvbiA9ICd1dGY4X3VuaWNvZGVfY2knLCAkdGFi
bGVzID0gYXJyYXkoKSApIHsKCgkJJHJlcG9ydCA9IGZhbHNlOwoKCQlpZiAoIGlzX3N0cmluZygg
JGNvbGxhdGlvbiApICkgewoKCQkJJHJlcG9ydCA9IGFycmF5KCAnY29sbGF0aW9uJyA9PiAkY29s
bGF0aW9uLCAnY29udmVydGVkJyA9PiBhcnJheSgpICk7CgoJCQlpZiAoIGVtcHR5KCAkdGFibGVz
ICkgKSB7CgkJCQkkYWxsX3RhYmxlcyA9ICR0aGlzLT5nZXRfdGFibGVzKCk7CgkJCQkkdGFibGVz
ID0gYXJyYXlfa2V5cyggJGFsbF90YWJsZXMgKTsKCQkJfQoKCQkJLy8gY2hhcnNldCBpcyBzYW1l
IGFzIGNvbGxhdGlvbiB1cCB0byBmaXJzdCB1bmRlcnNjb3JlCgkJCSRjaGFyc2V0ID0gcHJlZ19y
ZXBsYWNlKCAnL14oW15fXSspLiokLycsICckMScsICRjb2xsYXRpb24gKTsKCgkJCWZvcmVhY2go
ICR0YWJsZXMgYXMgJHRhYmxlICkgewoJCQkJJHRhYmxlX2luZm8gPSAkYWxsX3RhYmxlc1sgJHRh
YmxlIF07CgoJCQkJLy8gYXJlIHdlIHVwZGF0aW5nIHRoZSBlbmdpbmU/CgkJCQlpZiAoICR0YWJs
ZV9pbmZvWyAnQ29sbGF0aW9uJyBdICE9ICRjb2xsYXRpb24gKSB7CgkJCQkJJGVuZ2luZV9jb252
ZXJ0ZWQgPSAkdGhpcy0+ZGJfcXVlcnkoICJhbHRlciB0YWJsZSB7JHRhYmxlfSBjb252ZXJ0IHRv
IGNoYXJhY3RlciBzZXQgeyRjaGFyc2V0fSBjb2xsYXRlIHskY29sbGF0aW9ufTsiICk7CgkJCQkJ
aWYgKCAhICRlbmdpbmVfY29udmVydGVkICkKCQkJCQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMt
PmRiX2Vycm9yKCApLCAncmVzdWx0cycgKTsKCQkJCQllbHNlCgkJCQkJCSRyZXBvcnRbICdjb252
ZXJ0ZWQnIF1bICR0YWJsZSBdID0gdHJ1ZTsKCQkJCQljb250aW51ZTsKCQkJCX0gZWxzZSB7CgkJ
CQkJJHJlcG9ydFsgJ2NvbnZlcnRlZCcgXVsgJHRhYmxlIF0gPSBmYWxzZTsKCQkJCX0KCgkJCQlp
ZiAoIGlzc2V0KCAkcmVwb3J0WyAnY29udmVydGVkJyBdWyAkdGFibGUgXSApICkKCQkJCQkkdGhp
cy0+bG9nKCAndXBkYXRlX2NvbGxhdGlvbicsICR0YWJsZSwgJHJlcG9ydCwgJGNvbGxhdGlvbiAp
OwoJCQl9CgoJCX0gZWxzZSB7CgoJCQkkdGhpcy0+YWRkX2Vycm9yKCAnQ29sbGF0aW9uIG11c3Qg
YmUgYSB2YWxpZCBzdHJpbmcnLCAncmVzdWx0cycgKTsKCgkJfQoKCQlyZXR1cm4gJHJlcG9ydDsK
CX0KCgoJLyoqCgkgKiBSZXBsYWNlIGFsbCBvY2N1cnJlbmNlcyBvZiB0aGUgc2VhcmNoIHN0cmlu
ZyB3aXRoIHRoZSByZXBsYWNlbWVudCBzdHJpbmcuCgkgKgoJICogQGF1dGhvciBTZWFuIE11cnBo
eSA8c2VhbkBpYW1zZWFubXVycGh5LmNvbT4KCSAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IDIwMTIg
U2VhbiBNdXJwaHkuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgkgKiBAbGljZW5zZSBodHRwOi8vY3Jl
YXRpdmVjb21tb25zLm9yZy9wdWJsaWNkb21haW4vemVyby8xLjAvCgkgKiBAbGluayBodHRwOi8v
cGhwLm5ldC9tYW51YWwvZnVuY3Rpb24uc3RyLXJlcGxhY2UucGhwCgkgKgoJICogQHBhcmFtIG1p
eGVkICRzZWFyY2gKCSAqIEBwYXJhbSBtaXhlZCAkcmVwbGFjZQoJICogQHBhcmFtIG1peGVkICRz
dWJqZWN0CgkgKiBAcGFyYW0gaW50ICRjb3VudAoJICogQHJldHVybiBtaXhlZAoJICovCglwdWJs
aWMgc3RhdGljIGZ1bmN0aW9uIG1iX3N0cl9yZXBsYWNlKCAkc2VhcmNoLCAkcmVwbGFjZSwgJHN1
YmplY3QsICYkY291bnQgPSAwICkgewoJCWlmICggISBpc19hcnJheSggJHN1YmplY3QgKSApIHsK
CQkJLy8gTm9ybWFsaXplICRzZWFyY2ggYW5kICRyZXBsYWNlIHNvIHRoZXkgYXJlIGJvdGggYXJy
YXlzIG9mIHRoZSBzYW1lIGxlbmd0aAoJCQkkc2VhcmNoZXMgPSBpc19hcnJheSggJHNlYXJjaCAp
ID8gYXJyYXlfdmFsdWVzKCAkc2VhcmNoICkgOiBhcnJheSggJHNlYXJjaCApOwoJCQkkcmVwbGFj
ZW1lbnRzID0gaXNfYXJyYXkoICRyZXBsYWNlICkgPyBhcnJheV92YWx1ZXMoICRyZXBsYWNlICkg
OiBhcnJheSggJHJlcGxhY2UgKTsKCQkJJHJlcGxhY2VtZW50cyA9IGFycmF5X3BhZCggJHJlcGxh
Y2VtZW50cywgY291bnQoICRzZWFyY2hlcyApLCAnJyApOwoKCQkJZm9yZWFjaCAoICRzZWFyY2hl
cyBhcyAka2V5ID0+ICRzZWFyY2ggKSB7CgkJCQkkcGFydHMgPSBtYl9zcGxpdCggcHJlZ19xdW90
ZSggJHNlYXJjaCApLCAkc3ViamVjdCApOwoJCQkJJGNvdW50ICs9IGNvdW50KCAkcGFydHMgKSAt
IDE7CgkJCQkkc3ViamVjdCA9IGltcGxvZGUoICRyZXBsYWNlbWVudHNbICRrZXkgXSwgJHBhcnRz
ICk7CgkJCX0KCQl9IGVsc2UgewoJCQkvLyBDYWxsIG1iX3N0cl9yZXBsYWNlIGZvciBlYWNoIHN1
YmplY3QgaW4gYXJyYXksIHJlY3Vyc2l2ZWx5CgkJCWZvcmVhY2ggKCAkc3ViamVjdCBhcyAka2V5
ID0+ICR2YWx1ZSApIHsKCQkJCSRzdWJqZWN0WyAka2V5IF0gPSBzZWxmOjptYl9zdHJfcmVwbGFj
ZSggJHNlYXJjaCwgJHJlcGxhY2UsICR2YWx1ZSwgJGNvdW50ICk7CgkJCX0KCQl9CgoJCXJldHVy
biAkc3ViamVjdDsKCX0KCgoJLyoqCgkgKiBXcmFwcGVyIGZvciByZWdleC9ub24gcmVnZXggc2Vh
cmNoICYgcmVwbGFjZQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNlYXJjaAoJICogQHBhcmFtIHN0
cmluZyAkcmVwbGFjZQoJICogQHBhcmFtIHN0cmluZyAkc3RyaW5nCgkgKiBAcGFyYW0gaW50ICRj
b3VudAoJICoKCSAqIEByZXR1cm4gc3RyaW5nCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzdHJfcmVw
bGFjZSggJHNlYXJjaCwgJHJlcGxhY2UsICRzdHJpbmcsICYkY291bnQgPSAwICkgewoJCWlmICgg
JHRoaXMtPmdldCggJ3JlZ2V4JyApICkgewoJCQlyZXR1cm4gcHJlZ19yZXBsYWNlKCAkc2VhcmNo
LCAkcmVwbGFjZSwgJHN0cmluZywgLTEsICRjb3VudCApOwoJCX0gZWxzZWlmKCBmdW5jdGlvbl9l
eGlzdHMoICdtYl9zcGxpdCcgKSApIHsKCQkJcmV0dXJuIHNlbGY6Om1iX3N0cl9yZXBsYWNlKCAk
c2VhcmNoLCAkcmVwbGFjZSwgJHN0cmluZywgJGNvdW50ICk7CgkJfSBlbHNlIHsKCQkJcmV0dXJu
IHN0cl9yZXBsYWNlKCAkc2VhcmNoLCAkcmVwbGFjZSwgJHN0cmluZywgJGNvdW50ICk7CgkJfQoJ
fQoKCS8qKgoJICogQ29udmVydCBhIHN0cmluZyBjb250YWluaW5nIHVuaWNvZGUgaW50byBIVE1M
IGVudGl0aWVzIGZvciBmcm9udCBlbmQgZGlzcGxheQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHN0
cmluZwoJICoKCSAqIEByZXR1cm4gc3RyaW5nCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBjaGFyc2V0
X2RlY29kZV91dGZfOCggJHN0cmluZyApIHsKCQkvKiBPbmx5IGRvIHRoZSBzbG93IGNvbnZlcnQg
aWYgdGhlcmUgYXJlIDgtYml0IGNoYXJhY3RlcnMgKi8KCQkvKiBhdm9pZCB1c2luZyAweEEwIChc
MjQwKSBpbiBlcmVnIHJhbmdlcy4gUkg3MyBkb2VzIG5vdCBsaWtlIHRoYXQgKi8KCQlpZiAoICEg
cHJlZ19tYXRjaCggIi9bXDIwMC1cMjM3XS8iLCAkc3RyaW5nICkgYW5kICEgcHJlZ19tYXRjaCgg
Ii9bXDI0MS1cMzc3XS8iLCAkc3RyaW5nICkgKQoJCQlyZXR1cm4gJHN0cmluZzsKCgkJLy8gZGVj
b2RlIHRocmVlIGJ5dGUgdW5pY29kZSBjaGFyYWN0ZXJzCgkJJHN0cmluZyA9IHByZWdfcmVwbGFj
ZSggIi8oW1wzNDAtXDM1N10pKFtcMjAwLVwyNzddKShbXDIwMC1cMjc3XSkvZSIsCgkJCSInJiMn
Ligob3JkKCdcXDEnKS0yMjQpKjQwOTYgKyAob3JkKCdcXDInKS0xMjgpKjY0ICsgKG9yZCgnXFwz
JyktMTI4KSkuJzsnIiwKCQkJJHN0cmluZyApOwoKCQkvLyBkZWNvZGUgdHdvIGJ5dGUgdW5pY29k
ZSBjaGFyYWN0ZXJzCgkJJHN0cmluZyA9IHByZWdfcmVwbGFjZSggIi8oW1wzMDAtXDMzN10pKFtc
MjAwLVwyNzddKS9lIiwKCQkJIicmIycuKChvcmQoJ1xcMScpLTE5MikqNjQrKG9yZCgnXFwyJykt
MTI4KSkuJzsnIiwKCQkJJHN0cmluZyApOwoKCQlyZXR1cm4gJHN0cmluZzsKCX0KCn0K
EOF;
    }
}
