#!/usr/bin/php
<?php

DbSync::run();

class DbSync
{
    public static $confDefaultFile = 'dbsync.json';

    public static function run()
    {
        return new self();
    }

    private $config = null;

    private $srdb = 'srdb_%s.php';

    private $defaultPhp = 'php';

    // used to mark source env in dump file
    private $marker = '-- sync-db env: ';

    private $opts = array(
        'c:' => 'conf:',
        's:' => 'source:',
        't:' => 'target:',
        'r'  => 'replacements-only',
        'n'  => 'no-replacement',
        'f'  => 'fix',
        'i:' => 'include:',
        'x:' => 'exclude:',
        'h'  => 'help',
        'd'  => 'debug',
        'y'  => 'force'
    );

    private $srdbOpts = array(
        't:' => 'tables:',
        'i:' => 'include-cols:',
        'x:' => 'exclude-cols:',
        'g'  => 'regex'
    );

    private $options = null;

    private $colors = array(
        'no'     => '00',
        'grey'   => '37',
        'yellow' => '33',
        'red'    => '31',
        'green'  => '32',
        'blue'   => '34',
        'purple' => '35',
        'ocean'  => '36'
    );

    private $cmds = array(
        'test'     => 'echo "use {base};" | mysql -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'tables'   => 'echo "show tables;" | mysql --skip-column-names -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'source'   => 'mysqldump {options} -u "{user}" -p"{pass}" --add-drop-table --no-create-db -h "{host}" "{base}" {tables}',
        'target'   => 'mysql {options} -u "{user}" -p"{pass}" -h "{host}" "{base}"',
        'markfile' => '{ echo "{marker}{env}"; cat; } > "{file}"',
        'tofile'   => ' cat > "{file}"',
        'cp'       => 'echo "{data}" | {php} -r "echo base64_decode(stream_get_contents(STDIN));" > {srdb}',
        'ssh_cp'   => 'echo "{data}" | {php} -r "echo base64_decode(stream_get_contents(STDIN));" | ssh {ssh} \'cat > "{srdb}"\'',
        'chmod'    => 'chmod +x {srdb}',
        'rm'       => 'rm {srdb}',
        'replace'  => '{php} -f {srdb} -- -n "{base}" -u "{user}" -p"{pass}" -h "{host}" -s"{search}" -r"{replace}" {options}'
    );

    private $envs = null;

    private $path = null;

    private function __construct()
    {
        global $argv;

        $this->script  = basename($argv[0]);
        $this->options = getopt(
            implode('', array_keys($this->opts)),
            array_values($this->opts)
        );

        // srdb
        $this->srdb = sprintf($this->srdb, uniqid());

        // generate ssh cmds
        $cmds = array();
        foreach ($this->cmds as $key => &$cmd) {
            if (strpos($key, 'ssh_') === false && !array_key_exists('ssh_' . $key, $this->cmds)) {
                $cmds[$key]          = $cmd;
                $cmds['ssh_' . $key] = 'ssh {ssh} \'' . str_replace('\'', '\'"\'"\'', $cmd) . '\'';
            } else {
                $cmds[$key] = $cmd;
            }
        }

        $this->cmds = $cmds;

        // path
        $this->exec('pwd', $this->path);

        if ($this->getOpt('help')) {
            $this->help();
        }

        $this->loadConfig();
        $this->checkConnections();

        // tables option handling (after connection check)
        if ($this->getOpt('include') && $this->getOpt('exclude')) {
            $this->error('You can’t use include and exclude options at the same time.');
        }

        if ($this->envs['source']['file']) {
            // no table filtering from file
            $this->envs['source']['tables'] = '';
        }
        else {
            $this->envs['source']['tables'] = $this->getTables();
        }

            // try to extract origin env from the file
        if ($this->envs['source']['file']) {
            if ($file = fopen($this->envs['source']['file'], 'r')) {
                if ($line = fgets($file)) {
                    if (preg_match('/' . $this->marker . '(.+)$/', $line, $matches)) {
                        $this->envs['source']['env'] = $matches[1];
                    }
                }
                fclose($file);
            }
        }

        // everything ok, display confirm message
        if ($this->getOpt('force') || $this->confirm()) {
            $this->proceed();
        }
    }

    private function confirm()
    {
        if ($this->getOpt('r')) {
            echo "\nReady to apply replacements:\n\n";
        } else {
            echo "\nReady to sync:\n\n";
        }

        $cData   = 'grey';
        $cSymbol = 'yellow';

        $items = array('from' => 'source', 'to' => 'target');
        $out   = array();

        // label
        $length = 0;
        foreach ($items as $key => $env) {
            $out[$env] = $key . ' ';
            if ($this->envs[$env]['file']) {
                $out[$env] .= $this->c('file', 'no');
            } else {
                $out[$env] .= $this->c($this->envs[$env]['env'], 'yellow');
            }
            $out[$env] .= ':';
            $length = max($length, strlen($out[$env]));
        }

        // detail
        foreach ($items as $key => $env) {

            echo str_pad($out[$env], $length + 2, ' ', STR_PAD_LEFT) . "  ";

            if ($this->envs[$env]['file']) {
                echo $this->c($this->envs[$env]['file'], $cData);
            } else {
                $config = $this->envs[$env];
                echo $this->c($config['user'], $cData) . $this->c('@', $cSymbol);

                echo $this->c($config['host'], $cData);
                echo $this->c('/', $cSymbol) . $this->c($config['base'], $cData);

                if ($config['ssh']) {
                    echo $this->c(' ssh:', $cSymbol) . $this->c($config['ssh'], $cData);
                }
            }
            echo "\n";
        }

        // tables
        if ($this->envs['source']['tables']) {
            $tables = implode(
                "\n". str_pad('', $length - 7),
                explode(' ', $this->envs['source']['tables'])
            );
            echo "\n";
            echo str_pad( 'tables:', $length - 9, ' ', STR_PAD_LEFT ) . "  ";
            echo $this->c($tables, $cData);
            echo "\n";
        }

        if ($this->envs['target']['protected'] === true) {
            $token = strtoupper(substr(sha1(rand()), 0, 4));
            $answer = readline(
                $this->c("\nTarget env ". $this->envs['target']['env'] ." is protected!\nType ", 'red') .
                $this->c($token, 'red', true) .
                $this->c(" to proceed anyway: ", 'red')
            );
            return $answer === $token;
        }
        else {
            $answer = readline( "\nDo you confirm? (yo/N) " );
            return preg_match('/[yo]/', $answer);
        }
    }

    /**
     * @param string $key The long option name to get
     *
     * @return string|null The option value, null if not found
     */
    private function getOpt($key)
    {
        foreach ($this->opts as $short => $long) {
            // option with value
            if ($key . ':' == $long || $key . ':' == $short) {
                $short = str_replace(':', '', $short);
                $long  = str_replace(':', '', $long);
                if (array_key_exists($long, $this->options)) {
                    return $this->options[$long];
                } elseif (array_key_exists($short, $this->options)) {
                    return $this->options[$short];
                } else {
                    return null;
                }
            } // option without value
            elseif ($key == $long || $key == $short) {
                if (array_key_exists($long, $this->options)) {
                    return true;
                } elseif (array_key_exists($short, $this->options)) {
                    return true;
                } else {
                    return false;
                }
            }
        }

        return null;
    }

    private function checkConnections()
    {
        if ($this->envs['source']['file'] && $this->envs['target']['file']
            && $this->envs['source']['file'] == $this->envs['target']['file']
        ) {
            $this->error('Source and target file can not be same file');
        }
        foreach ($this->envs as $env => $config) {
            if ($config['file']) {
                // check file
                if ($env == 'source') {
                    $this->checkSourceFile($config);
                } else {
                    $this->checkTargetFile($config);
                }
            } else {
                // check connection
                $result = $this->exec($this->getCmd('test', $config['ssh'], array(
                    'base' => $config['base'],
                    'user' => $config['user'],
                    'pass' => $config['pass'],
                    'host' => $config['host']
                )), $output, true);
                if ($result !== 0) {
                    $this->error('Connection error for ' . $config['env'] . ' environment.', $result);
                }
            }
        }
    }

    private function getEnvList()
    {
        // generate environments list
        $list     = "Available environments: ";
        $envNames = array_keys($this->config['environments']);
        array_walk($envNames, function (&$item) {
            $item = $this->c($item, 'yellow');
        });
        $list .= implode(', ', $envNames) . "\n";

        return $list;
    }

    private function checkSourceFile($source)
    {
        if (!file_exists($source['file']) || !is_readable($source['file'])) {
            // maybe it was not a file
            $this->error(
                "Source error, environment not found or file does not exists",
                $this->getEnvList()
            );
        }
    }

    private function checkTargetFile($target)
    {
        $file = $target['file'];
        $dir  = dirname($file);
        if (file_exists($file)) {
            if (!is_writable($file)) {
                $this->error("Target file is not writable");
            } else {
                $this->warning('Warning: output file exists, it will be overwritten');
            }
        } elseif (!file_exists($dir) || !is_dir($dir)) {
            $this->error("Target file directory does not exist");
        } elseif (!is_writable($dir)) {
            $this->error("Target file directory is not writable");
        }
    }

    private function loadConfig()
    {
        $confFile = $this->getOpt('conf');
        if (!$confFile) {
            $confFile = self::$confDefaultFile;
        }

        if (!file_exists($confFile)) {
            $this->error('Can not find config file ' . $confFile, true);
        }

        $this->config = json_decode(file_get_contents($confFile), true);

        $error = json_last_error();
        if ($error != JSON_ERROR_NONE) {
            $this->error('Error reading ' . $confFile, json_last_error_msg());
        }

        // loading environments
        if (!array_key_exists('environments', $this->config) || !$this->config['environments']) {
            $this->error('No environment found in config.');
        }

        $envList = $this->getEnvList();

        // must have source and target
        if (!$this->getOpt('source')) {
            $this->error('Missing source environment', $envList, true);
        }
        if (!$this->getOpt('target')) {
            $this->error('Missing target environment or output file', $envList, true);
        }

        $this->envs = array();
        foreach (array('source', 'target') as $env) {
            $val              = $this->getOpt($env);
            $this->envs[$env] = array(
                'env'       => false,
                'user'      => false,
                'pass'      => false,
                'base'      => false,
                'host'      => 'localhost',
                'ssh'       => false,
                'file'      => false,
                'php'       => $this->defaultPhp,
                'protected' => false,
            );
            if (!$val) {
                $this->error("Please give the $env option", $envList);
            } elseif (!array_key_exists($val, $this->config['environments'])) {
                // no env, consider it is a file path
                $this->envs[$env]['file'] = $val;
            } else {
                $this->envs[$env]        = array_merge($this->envs[$env], $this->config['environments'][$val]);
                $this->envs[$env]['env'] = $val;
            }
        }

        if (array_key_exists('replacements', $this->config)) {
            foreach ($this->config['replacements'] as $replacement) {
                foreach (array('source', 'target') as $env) {
                    if ($this->envs[$env]['env'] && array_key_exists($this->envs[$env]['env'], $replacement)) {
                        if (empty($replacement[$this->envs[$env]['env']])) {
                            $this->error("Replacement value can not be empty for env ". $this->envs[$env]['env']);
                        }
                    }
                }
            }
        }
    }

    private function error($msg, $detail = '', $help = false)
    {
        echo $this->c($msg, 'red') . "\n";
        if ($detail) {
            echo $detail . "\n";
        }

        if ($help) {
            $this->help();
        }
        exit;
    }

    private function warning($msg, $detail = '')
    {
        echo $this->c($msg, 'red') . "\n";
        if ($detail) {
            echo $detail . "\n";
        }
    }

    private function help()
    {
        echo "Usage : " . $this->script . " [-c config_file] -s source -t target\n";
        echo "    -c, --conf\n";
        echo "      Configuration file to read. Defaults to " . self::$confDefaultFile . ".\n";
        echo "    -s, --source\n";
        echo "      Source environment name or file path\n";
        echo "    -t, --target\n";
        echo "      Target environment name or file path.\n";
        echo "    -r, --replacements-only\n";
        echo "      No database transfert, replacements only.\n";
        echo "    -n, --no-replacements\n";
        echo "      Do not execute replacements, database transfert only.\n";
        echo "    -f, --fix\n";
        echo "      Try to fix database charset problems like double utf8 encoded strings.\n";
        echo "    -i, --include\n";
        echo "      Include only given tables in sync. This option may be used multiple times.\n";
        echo "    -x, --exclude\n";
        echo "      Exclude tables from sync. This option may be used multiple times.\n";
        echo "    -d, --debug\n";
        echo "      Debug mode, print all commands. No shell_exec execution except for\n";
        echo "      config tests (connection to distant database, and tables listing).\n";
        echo "    -f, --force\n";
        echo "      Do not prompt for confirmation.\n";
        echo "    -h, --help\n";
        echo "      Display this help.\n";
        exit;
    }

    private function doing($msg)
    {
        echo $this->c("  [ ] ", 'grey') . $msg;
    }

    private function done($msg = null)
    {
        echo "\r  ";
        echo $this->c("[✔]", 'green');
        if ($msg) {
            echo ' ' . $msg;
        }
        echo "\n";
    }

    private function fail($msg = null)
    {
        echo "\r  ";
        echo $this->c("[✘]", 'red');
        if ($msg) {
            echo ' ' . $msg;
        }
        echo "\n";
        exit;
    }

    /**
     * @param $format
     * @param $vars
     */
    private function nvsprintf($format, $vars = array(), $regex = '/{([^{}]*?)}/')
    {
        return preg_replace_callback($regex, function ($matches) use ($vars) {
            if (array_key_exists($matches[1], $vars)) {
                return $vars[$matches[1]];
            } else {
                return $matches[0];
            }
        }, $format);
    }

    private function getTables()
    {
        $filter = isset($this->config['tables']) ? $this->config['tables'] : null;
        $include = $this->getOpt('include');
        $exclude = $this->getOpt('exclude');
        if ($filter || $include || $exclude) {
            // get tables
            $source = $this->envs['source'];
            $this->exec($this->getCmd('tables', $source['ssh'], array(
                'user' => $source['user'],
                'pass' => $source['pass'],
                'base' => $source['base'],
                'host' => $source['host'],
            )), $output, true);
            $tables    = explode("\n", $output);

            // filtering
            if ($filter) {
                $tables = array_filter($tables, function ($table) use ($filter) {
                    return preg_match('/'. addslashes($filter) .'/', $table);
                });
            }

            $available = "Available tables are:\n - " . implode("\n - ", $tables);

            if ($include) {
                if (!is_array($include)) {
                    $include = array($include);
                }
                // just checking
                foreach ($include as $table) {
                    if (array_search($table, $tables) === false) {
                        $this->error('The included table `' . $table . '` is not found', $available);
                    }
                }

                return implode(' ', $include);
            }
            if ($exclude) {
                if (!is_array($exclude)) {
                    $exclude = array($exclude);
                }
                foreach ($exclude as $table) {
                    $offset = array_search($table, $tables);
                    if ($offset === false) {
                        $this->error('The excluded table `' . $table . '` is not found', $available);
                    } else {
                        unset($tables[$offset]);
                    }
                }

                return implode(' ', $tables);
            }

            return implode(' ', $tables);
        }

        return '';
    }

    private function proceed()
    {
        echo "\n";
        $source = $this->envs['source'];
        $target = array_key_exists('target', $this->envs) ? $this->envs['target'] : null;

        // option “r” is for replacement only
        if (!$this->getOpt('r')) {
            $this->doing('database transfer...');

            // source
            if ($source['file']) {
                // file source
                $sourceCmd = 'cat "' . $source['file'] . '"';
            } else {
                // mysql source
                $sourceCmd = $this->getCmd('source', $source['ssh'], array(
                    'user'    => $source['user'],
                    'pass'    => $source['pass'],
                    'base'    => $source['base'],
                    'host'    => $source['host'],
                    'options' => $this->getOpt('fix') ? '--skip-set-charset --default-character-set=latin1' : '',
                    'tables'  => $source['tables']
                ));
            }

            // target
            if ($target['file']) {
                // file target
                $cmd       = $source['env'] ? 'markfile' : 'tofile';
                $targetCmd = $this->nvsprintf($this->cmds[$cmd], array(
                    'marker' => $this->marker,
                    'env'    => $source['env'],
                    'file'   => $target['file']
                ));
            } else {
                // mysql target
                $targetCmd = $this->getCmd('target', $target['ssh'], array(
                    'user'    => $target['user'],
                    'pass'    => $target['pass'],
                    'base'    => $target['base'],
                    'host'    => $target['host'],
                    'options' => $this->getOpt('fix') ? '--default-character-set=utf8' : ''
                ));
            }
            $result = $this->exec($sourceCmd . ' | ' . $targetCmd, $output);
            if ($result !== 0) {
                $this->fail();
            }
            $this->done('database transfer succeeded      ');
        }

        // option “n” means “no replacements”
        if (!$this->getOpt('n') && array_key_exists('replacements', $this->config)
            && $source['env'] && $target['env'] && $source['env'] != $target['env']
        ) {
            $this->doing('replacements in database...');

            // copy srdb to tmp
            $this->exec($this->getCmd('cp', $target['ssh'], array(
                'data' => $this->getSrdbData(),
                'srdb' => $this->srdb,
                'php'  => $this->defaultPhp
            )));

            // chmod +x
            $this->exec($this->getCmd('chmod', $target['ssh'], array(
                'srdb' => $this->srdb,
            )));

            $replaceCmd = $this->getCmd('replace', $target['ssh'], array(
                'srdb' => $this->srdb,
                'base' => $target['base'],
                'user' => $target['user'],
                'pass' => $target['pass'],
                'host' => $target['host'],
                'php'  => $target['php']
            ));

            $count = 0;
            foreach ($this->config['replacements'] as $replacement) {
                if (!array_key_exists($source['env'], $replacement)) {
                    continue;
                }
                if (!array_key_exists($target['env'], $replacement)) {
                    continue;
                }
                // options
                $options = '';
                foreach ($this->srdbOpts as $short => $long) {
                    $optName = str_replace(':', '', $long);
                    if (array_key_exists($optName, $replacement)) {
                        $options .= ' --' . $optName;
                        if ($optName != $long) {
                            $options .= ' "' . $replacement[$optName] . '"';
                        }
                    }
                }
                $this->exec($this->nvsprintf($replaceCmd, array(
                    'search'  => $replacement[$source['env']],
                    'replace' => $replacement[$target['env']],
                    'options' => $options
                )));
                ++$count;
            }

            $this->exec($this->getCmd('rm', $target['ssh'], array(
                'srdb' => $this->srdb,
                'ssh'  => $target['ssh']
            )));
            $this->done($count . ' replacements executed      ');
        }
        echo "\n";
    }

    private function getCmd($cmd, $ssh, $data)
    {
        if (!array_key_exists('ssh', $data)) {
            $data['ssh'] = $ssh;
        }

        return $this->nvsprintf(
            $this->cmds[$ssh ? 'ssh_' . $cmd : $cmd],
            $data
        );
    }

    private function exec($cmd, &$output = null, $force = false)
    {
        if ($this->getOpt('debug') && !$force) {
            $this->printCmd($cmd);

            return 0;
        } else {
            if ($this->getOpt('debug')) {
                $this->printCmd($cmd);
            }
            $output = '';
            $result = 0;
            exec($cmd, $output, $result);
            $output = implode("\n", $output);

            return $result;
        }
    }

    private function printCmd($cmd)
    {
        $lmax = 512;
        if (strlen($cmd) > $lmax) {
            echo "\n" . substr($cmd, 0, $lmax / 2) . ' ... ';
            echo substr($cmd, strlen($cmd) - $lmax / 2) . "\n";
        } else {
            echo "\n" . $cmd . "\n";
        }
    }

    private function c($text, $color = 'no', $bold = false)
    {
        if (array_key_exists($color, $this->colors)) {
            return "\033[" . ($bold ? '1' : '0') . ';' . $this->colors[$color] . 'm' . $text . "\033[0m";
        } else {
            return $text;
        }
    }

    private function getSrdbData()
    {
        /* This is a base64_encode of the merge of `srdb.class.php` and `srdb.cli.php`
         * from https://github.com/interconnectit/Search-Replace-DB
         */
        // SRDB-DATA // Updated on 2016-11-14 11:53:40
        return <<<EOF
IyEvdXNyL2Jpbi9waHAgLXEKPD9waHAKCi8qKgogKiBUbyBydW4gdGhpcyBzY3JpcHQsIGV4ZWN1
dGUgc29tZXRoaW5nIGxpa2UgdGhpczoKICogYC4vc3JkYi5jbGkucGhwIC1oIGxvY2FsaG9zdCAt
dSByb290IC1uIHRlc3QgLXMgImZpbmRNZSIgLXIgInJlcGxhY2VNZSJgCiAqIHVzZSB0aGUgLS1k
cnktcnVuIGZsYWcgdG8gZG8gYSBkcnkgcnVuIHdpdGhvdXQgc2VhcmNoaW5nL3JlcGxhY2luZy4K
ICovCgovLyBwaHAgNS4zIGRhdGUgdGltZXpvbmUgcmVxdWlyZW1lbnQsIHNob3VsZG4ndCBhZmZl
Y3QgYW55dGhpbmcKZGF0ZV9kZWZhdWx0X3RpbWV6b25lX3NldCggJ0V1cm9wZS9Mb25kb24nICk7
CgovLyBpbmNsdWRlIHRoZSBzcmRiIGNsYXNzCi8vIC0tIGluc2VydGVkIGF0IHRoZSBlbmQgb2Yg
dGhpcyBmaWxlIC0tCgokb3B0cyA9IGFycmF5KAoJJ2g6JyA9PiAnaG9zdDonLAoJJ246JyA9PiAn
bmFtZTonLAoJJ3U6JyA9PiAndXNlcjonLAoJJ3A6JyA9PiAncGFzczonLAoJJ2M6JyA9PiAnY2hh
cjonLAoJJ3M6JyA9PiAnc2VhcmNoOicsCgkncjonID0+ICdyZXBsYWNlOicsCgkndDonID0+ICd0
YWJsZXM6JywKCSdpOicgPT4gJ2luY2x1ZGUtY29sczonLAoJJ3g6JyA9PiAnZXhjbHVkZS1jb2xz
OicsCgknZycgPT4gJ3JlZ2V4JywKCSdsOicgPT4gJ3BhZ2VzaXplOicsCgkneicgPT4gJ2RyeS1y
dW4nLAoJJ2U6JyA9PiAnYWx0ZXItZW5naW5lOicsCgknYTonID0+ICdhbHRlci1jb2xsYXRpb246
JywKCSd2OjonID0+ICd2ZXJib3NlOjonLAoJJ3BvcnQ6JywKCSdoZWxwJwopOwoKJHJlcXVpcmVk
ID0gYXJyYXkoCgknaDonLAoJJ246JywKCSd1OicsCgkncDonCik7CgpmdW5jdGlvbiBzdHJpcF9j
b2xvbnMoICRzdHJpbmcgKSB7CglyZXR1cm4gc3RyX3JlcGxhY2UoICc6JywgJycsICRzdHJpbmcg
KTsKfQoKLy8gc3RvcmUgYXJnIHZhbHVlcwokYXJnX2NvdW50IAk9ICRfU0VSVkVSWyAnYXJnYycg
XTsKJGFyZ3NfYXJyYXkgPSAkX1NFUlZFUlsgJ2FyZ3YnIF07Cgokc2hvcnRfb3B0cyA9IGFycmF5
X2tleXMoICRvcHRzICk7CiRzaG9ydF9vcHRzX25vcm1hbCA9IGFycmF5X21hcCggJ3N0cmlwX2Nv
bG9ucycsICRzaG9ydF9vcHRzICk7CgokbG9uZ19vcHRzID0gYXJyYXlfdmFsdWVzKCAkb3B0cyAp
OwokbG9uZ19vcHRzX25vcm1hbCA9IGFycmF5X21hcCggJ3N0cmlwX2NvbG9ucycsICRsb25nX29w
dHMgKTsKCi8vIHN0b3JlIGFycmF5IG9mIG9wdGlvbnMgYW5kIHZhbHVlcwokb3B0aW9ucyA9IGdl
dG9wdCggaW1wbG9kZSggJycsICRzaG9ydF9vcHRzICksICRsb25nX29wdHMgKTsKCmlmICggaXNz
ZXQoICRvcHRpb25zWyAnaGVscCcgXSApICkgewoJZWNobyAiCiMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKaW50ZXJj
b25uZWN0L2l0IFNhZmUgU2VhcmNoICYgUmVwbGFjZSB0b29sCgojIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKClRoaXMg
c2NyaXB0IGFsbG93cyB5b3UgdG8gc2VhcmNoIGFuZCByZXBsYWNlIHN0cmluZ3MgaW4geW91ciBk
YXRhYmFzZQpzYWZlbHkgd2l0aG91dCBicmVha2luZyBzZXJpYWxpc2VkIFBIUC4KClBsZWFzZSBy
ZXBvcnQgYW55IGJ1Z3Mgb3IgZm9yayBhbmQgY29udHJpYnV0ZSB0byB0aGlzIHNjcmlwdCB2aWEK
R2l0aHViOiBodHRwczovL2dpdGh1Yi5jb20vaW50ZXJjb25uZWN0aXQvc2VhcmNoLXJlcGxhY2Ut
ZGIKCkFyZ3VtZW50IHZhbHVlcyBhcmUgc3RyaW5ncyB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmll
ZC4KCkFSR1MKICAtaCwgLS1ob3N0CiAgICBSZXF1aXJlZC4gVGhlIGhvc3RuYW1lIG9mIHRoZSBk
YXRhYmFzZSBzZXJ2ZXIuCiAgLW4sIC0tbmFtZQogICAgUmVxdWlyZWQuIERhdGFiYXNlIG5hbWUu
CiAgLXUsIC0tdXNlcgogICAgUmVxdWlyZWQuIERhdGFiYXNlIHVzZXIuCiAgLXAsIC0tcGFzcwog
ICAgUmVxdWlyZWQuIERhdGFiYXNlIHVzZXIncyBwYXNzd29yZC4KICAtLXBvcnQKICAgIE9wdGlv
bmFsLiBQb3J0IG9uIGRhdGFiYXNlIHNlcnZlciB0byBjb25uZWN0IHRvLgogICAgVGhlIGRlZmF1
bHQgaXMgMzMwNi4gKE15U1FMIGRlZmF1bHQgcG9ydCkuCiAgLXMsIC0tc2VhcmNoCiAgICBTdHJp
bmcgdG8gc2VhcmNoIGZvciBvciBgcHJlZ19yZXBsYWNlKClgIHN0eWxlCiAgICByZWd1bGFyIGV4
cHJlc3Npb24uCiAgLXIsIC0tcmVwbGFjZQogICAgTm9uZSBlbXB0eSBzdHJpbmcgdG8gcmVwbGFj
ZSBzZWFyY2ggd2l0aCBvcgogICAgYHByZWdfcmVwbGFjZSgpYCBzdHlsZSByZXBsYWNlbWVudC4K
ICAtdCwgLS10YWJsZXMKICAgIElmIHNldCBvbmx5IHJ1bnMgdGhlIHNjcmlwdCBvbiB0aGUgc3Bl
Y2lmaWVkIHRhYmxlLCBjb21tYQogICAgc2VwYXJhdGUgZm9yIG11bHRpcGxlIHZhbHVlcy4KICAt
aSwgLS1pbmNsdWRlLWNvbHMKICAgIElmIHNldCBvbmx5IHJ1bnMgdGhlIHNjcmlwdCBvbiB0aGUg
c3BlY2lmaWVkIGNvbHVtbnMsIGNvbW1hCiAgICBzZXBhcmF0ZSBmb3IgbXVsdGlwbGUgdmFsdWVz
LgogIC14LCAtLWV4Y2x1ZGUtY29scwogICAgSWYgc2V0IGV4Y2x1ZGVzIHRoZSBzcGVjaWZpZWQg
Y29sdW1ucywgY29tbWEgc2VwYXJhdGUgZm9yCiAgICBtdWx0aXBsZSB2YWx1ZXMuCiAgLWcsIC0t
cmVnZXggW25vIHZhbHVlXQogICAgVHJlYXRzIHZhbHVlIGZvciAtcyBvciAtLXNlYXJjaCBhcyBh
IHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQKICAgIC1yIG9yIC0tcmVwbGFjZSBhcyBhIHJlZ3VsYXIg
ZXhwcmVzc2lvbiByZXBsYWNlbWVudC4KICAtbCwgLS1wYWdlc2l6ZQogICAgSG93IHJvd3MgdG8g
ZmV0Y2ggYXQgYSB0aW1lIGZyb20gYSB0YWJsZS4KICAteiwgLS1kcnktcnVuIFtubyB2YWx1ZV0K
ICAgIFByZXZlbnRzIGFueSB1cGRhdGVzIGhhcHBlbmluZyBzbyB5b3UgY2FuIHByZXZpZXcgdGhl
IG51bWJlcgogICAgb2YgY2hhbmdlcyB0byBiZSBtYWRlCiAgLWUsIC0tYWx0ZXItZW5naW5lCiAg
ICBDaGFuZ2VzIHRoZSBkYXRhYmFzZSB0YWJsZSB0byB0aGUgc3BlY2lmaWVkIGRhdGFiYXNlIGVu
Z2luZQogICAgZWcuIElubm9EQiBvciBNeUlTQU0uIElmIHNwZWNpZmllZCBzZWFyY2gvcmVwbGFj
ZSBhcmd1bWVudHMKICAgIGFyZSBpZ25vcmVkLiBUaGV5IHdpbGwgbm90IGJlIHJ1biBzaW11bHRh
bmVvdXNseS4KICAtYSwgLS1hbHRlci1jb2xsYXRpb24KICAgIENoYW5nZXMgdGhlIGRhdGFiYXNl
IHRhYmxlIHRvIHRoZSBzcGVjaWZpZWQgY29sbGF0aW9uCiAgICBlZy4gdXRmOF91bmljb2RlX2Np
LiBJZiBzcGVjaWZpZWQgc2VhcmNoL3JlcGxhY2UgYXJndW1lbnRzCiAgICBhcmUgaWdub3JlZC4g
VGhleSB3aWxsIG5vdCBiZSBydW4gc2ltdWx0YW5lb3VzbHkuCiAgLXYsIC0tdmVyYm9zZSBbdHJ1
ZXxmYWxzZV0KICAgIERlZmF1bHRzIHRvIHRydWUsIGNhbiBiZSBzZXQgdG8gZmFsc2UgdG8gcnVu
IHNjcmlwdCBzaWxlbnRseS4KICAtLWhlbHAKICAgIERpc3BsYXlzIHRoaXMgaGVscCBtZXNzYWdl
IDspCiI7CglleGl0Owp9CgovLyBtaXNzaW5nIGZpZWxkIGZsYWcsIHNob3cgYWxsIG1pc3Npbmcg
aW5zdGVhZCBvZiAxIGF0IGEgdGltZQokbWlzc2luZ19hcmcgPSBmYWxzZTsKCi8vIGNoZWNrIHJl
cXVpcmVkIGFyZ3MgYXJlIHBhc3NlZApmb3JlYWNoKCAkcmVxdWlyZWQgYXMgJGtleSApIHsKCSRz
aG9ydF9vcHQgPSBzdHJpcF9jb2xvbnMoICRrZXkgKTsKCSRsb25nX29wdCA9IHN0cmlwX2NvbG9u
cyggJG9wdHNbICRrZXkgXSApOwoJaWYgKCAhIGlzc2V0KCAkb3B0aW9uc1sgJHNob3J0X29wdCBd
ICkgJiYgISBpc3NldCggJG9wdGlvbnNbICRsb25nX29wdCBdICkgKSB7CgkJZndyaXRlKCBTVERF
UlIsICJFcnJvcjogTWlzc2luZyBhcmd1bWVudCwgLXskc2hvcnRfb3B0fSBvciAtLXskbG9uZ19v
cHR9IGlzIHJlcXVpcmVkLlxuIiApOwoJCSRtaXNzaW5nX2FyZyA9IHRydWU7Cgl9Cn0KCi8vIGJh
aWwgaWYgcmVxdWlyZW1lbnRzIG5vdCBtZXQKaWYgKCAkbWlzc2luZ19hcmcgKSB7Cglmd3JpdGUo
IFNUREVSUiwgIlBsZWFzZSBlbnRlciB0aGUgbWlzc2luZyBhcmd1bWVudHMuXG4iICk7CglleGl0
KCAxICk7Cn0KCi8vIG5ldyBhcmdzIGFycmF5CiRhcmdzID0gYXJyYXkoCgkndmVyYm9zZScgPT4g
dHJ1ZSwKCSdkcnlfcnVuJyA9PiBmYWxzZQopOwoKLy8gY3JlYXRlICRhcmdzIGFycmF5CmZvcmVh
Y2goICRvcHRpb25zIGFzICRrZXkgPT4gJHZhbHVlICkgewoKCS8vIHRyYW5zcG9zZSBrZXlzCglp
ZiAoICggJGlzX3Nob3J0ID0gYXJyYXlfc2VhcmNoKCAka2V5LCAkc2hvcnRfb3B0c19ub3JtYWwg
KSApICE9PSBmYWxzZSApCgkJJGtleSA9ICRsb25nX29wdHNfbm9ybWFsWyAkaXNfc2hvcnQgXTsK
CgkvLyB0cnVlL2ZhbHNlIHN0cmluZyBtYXBwaW5nCglpZiAoIGlzX3N0cmluZyggJHZhbHVlICkg
JiYgaW5fYXJyYXkoICR2YWx1ZSwgYXJyYXkoICdmYWxzZScsICdubycsICcwJyApICkgKQoJCSR2
YWx1ZSA9IGZhbHNlOwoJaWYgKCBpc19zdHJpbmcoICR2YWx1ZSApICYmIGluX2FycmF5KCAkdmFs
dWUsIGFycmF5KCAndHJ1ZScsICd5ZXMnLCAnMScgKSApICkKCQkkdmFsdWUgPSB0cnVlOwoKCS8v
IGJvb2xlYW4gb3B0aW9ucyBhcyBpcywgZWcuIGEgbm8gdmFsdWUgYXJnIHNob3VsZCBiZSBzZXQg
dHJ1ZQoJaWYgKCBpbl9hcnJheSggJGtleSwgJGxvbmdfb3B0cyApICkKCQkkdmFsdWUgPSB0cnVl
OwoKCS8vIGNoYW5nZSB0byB1bmRlcnNjb3JlcwoJJGtleSA9IHN0cl9yZXBsYWNlKCAnLScsICdf
JywgJGtleSApOwoKCSRhcmdzWyAka2V5IF0gPSAkdmFsdWU7Cn0KCi8vIG1vZGlmeSB0aGUgbG9n
IG91dHB1dApjbGFzcyBpY2l0X3NyZGJfY2xpIGV4dGVuZHMgaWNpdF9zcmRiIHsKCglwdWJsaWMg
ZnVuY3Rpb24gbG9nKCAkdHlwZSA9ICcnICkgewoKCQkkYXJncyA9IGFycmF5X3NsaWNlKCBmdW5j
X2dldF9hcmdzKCksIDEgKTsKCgkJJG91dHB1dCA9ICIiOwoKCQlzd2l0Y2goICR0eXBlICkgewoJ
CQljYXNlICdlcnJvcic6CgkJCQlsaXN0KCAkZXJyb3JfdHlwZSwgJGVycm9yICkgPSAkYXJnczsK
CQkJCSRvdXRwdXQgLj0gIiRlcnJvcl90eXBlOiAkZXJyb3IiOwoJCQkJYnJlYWs7CgkJCWNhc2Ug
J3NlYXJjaF9yZXBsYWNlX3RhYmxlX3N0YXJ0JzoKCQkJCWxpc3QoICR0YWJsZSwgJHNlYXJjaCwg
JHJlcGxhY2UgKSA9ICRhcmdzOwoJCQkJJG91dHB1dCAuPSAieyR0YWJsZX06IHJlcGxhY2luZyB7
JHNlYXJjaH0gd2l0aCB7JHJlcGxhY2V9IjsKCQkJCWJyZWFrOwoJCQljYXNlICdzZWFyY2hfcmVw
bGFjZV90YWJsZV9lbmQnOgoJCQkJbGlzdCggJHRhYmxlLCAkcmVwb3J0ICkgPSAkYXJnczsKCQkJ
CSR0aW1lID0gbnVtYmVyX2Zvcm1hdCggJHJlcG9ydFsgJ2VuZCcgXSAtICRyZXBvcnRbICdzdGFy
dCcgXSwgOCApOwoJCQkJJG91dHB1dCAuPSAieyR0YWJsZX06IHskcmVwb3J0Wydyb3dzJ119IHJv
d3MsIHskcmVwb3J0WydjaGFuZ2UnXX0gY2hhbmdlcyBmb3VuZCwgeyRyZXBvcnRbJ3VwZGF0ZXMn
XX0gdXBkYXRlcyBtYWRlIGluIHskdGltZX0gc2Vjb25kcyI7CgkJCQlicmVhazsKCQkJY2FzZSAn
c2VhcmNoX3JlcGxhY2VfZW5kJzoKCQkJCWxpc3QoICRzZWFyY2gsICRyZXBsYWNlLCAkcmVwb3J0
ICkgPSAkYXJnczsKCQkJCSR0aW1lID0gbnVtYmVyX2Zvcm1hdCggJHJlcG9ydFsgJ2VuZCcgXSAt
ICRyZXBvcnRbICdzdGFydCcgXSwgOCApOwoJCQkJJGRyeV9ydW5fc3RyaW5nID0gJHRoaXMtPmRy
eV9ydW4gPyAid291bGQgaGF2ZSBiZWVuIiA6ICJ3ZXJlIjsKCQkJCSRvdXRwdXQgLj0gIgpSZXBs
YWNpbmcgeyRzZWFyY2h9IHdpdGggeyRyZXBsYWNlfSBvbiB7JHJlcG9ydFsndGFibGVzJ119IHRh
YmxlcyB3aXRoIHskcmVwb3J0Wydyb3dzJ119IHJvd3MKeyRyZXBvcnRbJ2NoYW5nZSddfSBjaGFu
Z2VzIHskZHJ5X3J1bl9zdHJpbmd9IG1hZGUKeyRyZXBvcnRbJ3VwZGF0ZXMnXX0gdXBkYXRlcyB3
ZXJlIGFjdHVhbGx5IG1hZGUKSXQgdG9vayB7JHRpbWV9IHNlY29uZHMiOwoJCQkJYnJlYWs7CgkJ
CWNhc2UgJ3VwZGF0ZV9lbmdpbmUnOgoJCQkJbGlzdCggJHRhYmxlLCAkcmVwb3J0LCAkZW5naW5l
ICkgPSAkYXJnczsKCQkJCSRvdXRwdXQgLj0gJHRhYmxlIC4gKCAkcmVwb3J0WyAnY29udmVydGVk
JyBdWyAkdGFibGUgXSA/ICcgaGFzIGJlZW4nIDogJ2hhcyBub3QgYmVlbicgKSAuICcgY29udmVy
dGVkIHRvICcgLiAkZW5naW5lOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ3VwZGF0ZV9jb2xsYXRpb24n
OgoJCQkJbGlzdCggJHRhYmxlLCAkcmVwb3J0LCAkY29sbGF0aW9uICkgPSAkYXJnczsKCQkJCSRv
dXRwdXQgLj0gJHRhYmxlIC4gKCAkcmVwb3J0WyAnY29udmVydGVkJyBdWyAkdGFibGUgXSA/ICcg
aGFzIGJlZW4nIDogJ2hhcyBub3QgYmVlbicgKSAuICcgY29udmVydGVkIHRvICcgLiAkY29sbGF0
aW9uOwoJCQkJYnJlYWs7CgkJfQoKCQlpZiAoICR0aGlzLT52ZXJib3NlICkKCQkJZWNobyAkb3V0
cHV0IC4gIlxuIjsKCgl9Cgp9CgokcmVwb3J0ID0gbmV3IGljaXRfc3JkYl9jbGkoICRhcmdzICk7
CgovLyBPbmx5IHByaW50IGEgc2VwYXJhdGluZyBuZXdsaW5lIGlmIHZlcmJvc2UgbW9kZSBpcyBv
biB0byBzZXBhcmF0ZSB2ZXJib3NlIG91dHB1dCBmcm9tIHJlc3VsdAppZiAoJGFyZ3NbICd2ZXJi
b3NlJyBdKSB7CgllY2hvICJcbiI7Cn0KCmlmICggJHJlcG9ydCAmJiAoICggaXNzZXQoICRhcmdz
WyAnZHJ5X3J1bicgXSApICYmICRhcmdzWyAnZHJ5X3J1bicgXSApIHx8IGVtcHR5KCAkcmVwb3J0
LT5lcnJvcnNbICdyZXN1bHRzJyBdICkgKSApIHsKCWVjaG8gIkFuZCB3ZSdyZSBkb25lIVxuIjsK
fSBlbHNlIHsKCWVjaG8gIkNoZWNrIHRoZSBvdXRwdXQgZm9yIGVycm9ycy4gWW91IG1heSBuZWVk
IHRvIGVuc3VyZSB2ZXJib3NlIG91dHB1dCBpcyBvbiBieSB1c2luZyAtdiBvciAtLXZlcmJvc2Uu
XG4iOwp9CgoKCgovKioKICoKICogU2FmZSBTZWFyY2ggYW5kIFJlcGxhY2Ugb24gRGF0YWJhc2Ug
d2l0aCBTZXJpYWxpemVkIERhdGEgdjMuMS4wCiAqCiAqIFRoaXMgc2NyaXB0IGlzIHRvIHNvbHZl
IHRoZSBwcm9ibGVtIG9mIGRvaW5nIGRhdGFiYXNlIHNlYXJjaCBhbmQgcmVwbGFjZSB3aGVuCiAq
IHNvbWUgZGF0YSBpcyBzdG9yZWQgd2l0aGluIFBIUCBzZXJpYWxpemVkIGFycmF5cyBvciBvYmpl
Y3RzLgogKgogKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlCiAqIGh0dHA6Ly9pbnRlcmNvbm5l
Y3RpdC5jb20vMTI0L3NlYXJjaC1hbmQtcmVwbGFjZS1mb3Itd29yZHByZXNzLWRhdGFiYXNlcy8K
ICoKICogVG8gY29udHJpYnV0ZSBnbyB0bwogKiBodHRwOi8vZ2l0aHViLmNvbS9pbnRlcmNvbm5l
Y3RpdC9zZWFyY2gtcmVwbGFjZS1kYgogKgogKiBUbyB1c2UsIGxvYWQgdGhlIHNjcmlwdCBvbiB5
b3VyIHNlcnZlciBhbmQgcG9pbnQgeW91ciB3ZWIgYnJvd3NlciB0byBpdC4KICogSW4gc29tZSBz
aXR1YXRpb25zLCBjb25zaWRlciB1c2luZyB0aGUgY29tbWFuZCBsaW5lIGludGVyZmFjZSB2ZXJz
aW9uLgogKgogKiBCSUcgV0FSTklORyEgIFRha2UgYSBiYWNrdXAgZmlyc3QsIGFuZCBjYXJlZnVs
bHkgdGVzdCB0aGUgcmVzdWx0cyBvZiB0aGlzCiAqIGNvZGUuIElmIHlvdSBkb24ndCwgYW5kIHlv
dSB2YXBlIHlvdXIgZGF0YSB0aGVuIHlvdSBvbmx5IGhhdmUgeW91cnNlbGYgdG8KICogYmxhbWUu
IFNlcmlvdXNseS4gIEFuZCBpZiB5b3VyIEVuZ2xpc2ggaXMgYmFkIGFuZCB5b3UgZG9uJ3QgZnVs
bHkKICogdW5kZXJzdGFuZCB0aGUgaW5zdHJ1Y3Rpb25zIHRoZW4gU1RPUC4gUmlnaHQgdGhlcmUu
IFllcy4gQmVmb3JlIHlvdSBkbyBhbnkKICogZGFtYWdlLgogKgogKiBVU0UgT0YgVEhJUyBTQ1JJ
UFQgSVMgRU5USVJFTFkgQVQgWU9VUiBPV04gUklTSy4gSS9XZSBhY2NlcHQgbm8gbGlhYmlsaXR5
CiAqIGZyb20gaXRzIHVzZS4KICoKICogRmlyc3QgV3JpdHRlbiAyMDA5LTA1LTI1IGJ5IERhdmlk
IENvdmVuZXkgb2YgSW50ZXJjb25uZWN0IElUIEx0ZCAoVUspCiAqIGh0dHA6Ly93d3cuZGF2aWRj
b3ZlbmV5LmNvbSBvciBodHRwOi8vaW50ZXJjb25uZWN0aXQuY29tCiAqIGFuZCByZWxlYXNlZCB1
bmRlciB0aGUgR1BMIHYzCiAqIGllLCBkbyB3aGF0IGV2ZXIgeW91IHdhbnQgd2l0aCB0aGUgY29k
ZSwgYW5kIHdlIHRha2Ugbm8gcmVzcG9uc2liaWxpdHkgZm9yIGl0CiAqIE9LPyBJZiB5b3UgZG9u
J3Qgd2lzaCB0byB0YWtlIHJlc3BvbnNpYmlsaXR5LCBoaXJlIHVzIGF0IEludGVyY29ubmVjdCBJ
VCBMdGQKICogb24gKzQ0ICgwKTE1MSAzMzEgNTE0MCBhbmQgd2Ugd2lsbCBkbyB0aGUgd29yayBm
b3IgeW91IGF0IG91ciBob3VybHkgcmF0ZSwKICogbWluaW11bSAxaHIKICoKICogTGljZW5zZTog
R1BMIHYzCiAqIExpY2Vuc2UgVVJMOiBodHRwOi8vd3d3LmdudS5vcmcvY29weWxlZnQvZ3BsLmh0
bWwKICoKICoKICogVmVyc2lvbiAzLjEuMDoKICoJCSogQWRkZWQgcG9ydCBudW1iZXIgb3B0aW9u
IHRvIGJvdGggd2ViIGFuZCBDTEkgaW50ZXJmYWNlcy4KICoJCSogTW9yZSByZWxpYWJsZSBmYWxs
YmFjayBvbiBub24tUERPIHN5c3RlbXMuCiAqCQkqIENvbmZpcm1hdGlvbiBvbiAnRGVsZXRlIG1l
JwogKgkJKiBDb21wcmVoZW5zaXZlIGNoZWNrIHRvIHByZXZlbnQgYWNjaWRlbnRhbCBkZWxldGlv
biBvZiB3ZWIgcHJvamVjdHMKICoJCSogUmVtb3ZlZCBteXNxbCBmdW5jdGlvbnMgYW5kIHJlcGxh
Y2VkIHdpdGggbXlzcWxpCiAqCiAqIFZlcnNpb24gMy4wOgogKiAJCSogTWFqb3Igb3ZlcmhhdWwK
ICogCQkqIE11bHRpYnl0ZSBzdHJpbmcgcmVwbGFjZW1lbnRzCiAqIAkJKiBDb252ZXJ0IHRhYmxl
cyB0byBJbm5vREIKICogCQkqIENvbnZlcnQgdGFibGVzIHRvIHV0ZjhfdW5pY29kZV9jaQogKiAJ
CSogUHJldmlldy92aWV3IGNoYW5nZXMgaW4gcmVwb3J0CiAqIAkJKiBPcHRpb25hbGx5IHVzZSBw
cmVnX3JlcGxhY2UoKQogKiAJCSogQmV0dGVyIGVycm9yL2V4Y2VwdGlvbiBoYW5kbGluZyAmIHJl
cG9ydGluZwogKiAJCSogUmVwb3J0cyBwZXIgdGFibGUKICogCQkqIEV4Y2x1ZGUvaW5jbHVkZSBt
dWx0aXBsZSBjb2x1bW5zCiAqCiAqIFZlcnNpb24gMi4yLjA6CiAqIAkJKiBBZGRlZCByZW1vdmUg
c2NyaXB0IHBhdGNoIGZyb20gRGF2aWQgQW5kZXJzb24gKHdvcmRzaGVsbC5uZXQpCiAqIAkJKiBB
ZGRlZCBhYmlsaXR5IHRvIHJlcGxhY2Ugc3RyaW5ncyB3aXRoIG5vdGhpbmcKICoJCSogQ29weSBj
aGFuZ2VzCiAqIAkJKiBBZGRlZCBjb2RlIHRvIHJlY3Vyc2l2ZV91bnNlcmlhbGl6ZV9yZXBsYWNl
IHRvIGRlYWwgd2l0aCBvYmplY3RzIG5vdAogKiAJCWp1c3QgYXJyYXlzLiBUaGlzIHdhcyBzdWJt
aXR0ZWQgYnkgVGluYSBNYXR0ZXIuCiAqIAkJVG9EbzogVGVzdCBvYmplY3QgaGFuZGxpbmcuIE5v
dCBzdXJlIGhvdyBpdCB3aWxsIGNvcGUgd2l0aCBvYmplY3QgaW4gdGhlCiAqIAkJZGIgY3JlYXRl
ZCB3aXRoIGNsYXNzZXMgdGhhdCBkb24ndCBleGlzdCBpbiBhbnl0aGluZyBidXQgdGhlIGJhc2Ug
UEhQLgogKgogKiBWZXJzaW9uIDIuMS4wOgogKiAgICAgICAgICAgICAgLSBDaGFuZ2VkIHRvIHZl
cnNpb24gMi4xLjAKICoJCSogRm9sbG93aW5nIGNoYW5nZSBieSBTZXJnZWkgQmlyeXVrb3YgLSBt
ZXJnZWQgaW4gYW5kIHRlc3RlZCBieSBEYXZlIENvdmVuZXkKICogICAgICAgICAgICAgIC0gQWRk
ZWQgQ2hhcnNldCBTdXBwb3J0ICh0ZXN0ZWQgd2l0aCBVVEYtOCwgbm90IHRlc3RlZCBvbiBvdGhl
ciBjaGFyc2V0cykKICoJCSogRm9sbG93aW5nIGNoYW5nZXMgaW1wbGVtZW50ZWQgYnkgSmFtZXMg
V2hpdGVoZWFkIHdpdGggdGhhbmtzIHRvIGFsbCB0aGUgY29tbWVudGVycyBhbmQgZmVlZGJhY2sg
Z2l2ZW4hCiAqIAkJLSBSZW1vdmVkIFBIUCB3YXJuaW5ncyBpZiB5b3UgZ28gdG8gc3RlcCAzKyB3
aXRob3V0IERCIGRldGFpbHMuCiAqIAkJLSBBZGRlZCBvcHRpb25zIHRvIHNraXAgY2hhbmdpbmcg
dGhlIGd1aWQgY29sdW1uLiBJZiB0aGVyZSBhcmUgb3RoZXIKICogCQljb2x1bW5zIHRoYXQgbmVl
ZCBleGNsdWRpbmcgeW91IGNhbiBhZGQgdGhlbSB0byB0aGUgJGV4Y2x1ZGVfY29scyBnbG9iYWwK
ICogCQlhcnJheS4gTWF5IGNob29zZSB0byBhZGQgYW5vdGhlciBvcHRpb24gdG8gdGhlIHRhYmxl
IHNlbGVjdCBwYWdlIHRvIGxldAogKiAJCXlvdSBhZGQgdG8gdGhpcyBhcnJheSBmcm9tIHRoZSBm
cm9udCBlbmQuCiAqIAkJLSBNaW5vciB0d2VhayB0byBsYWJlbCBzdHlsaW5nLgogKiAJCS0gQWRk
ZWQgY29tbWVudHMgdG8gZWFjaCBvZiB0aGUgZnVuY3Rpb25zLgogKiAJCS0gUmVtb3ZlZCBhIGRl
YWQgcGFyYW0gZnJvbSBpY2l0X3NyZGJfcmVwbGFjZXIKICogVmVyc2lvbiAyLjAuMDoKICogCQkt
IHJldHVybmVkIHRvIHVzaW5nIHVuc2VyaWFsaXplIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHN0cmlu
ZyBpcwogKiAJCXNlcmlhbGl6ZWQgb3Igbm90CiAqIAkJLSBtYXJrZWQgaXNfc2VyaWFsaXplZF9z
dHJpbmcgZnVuY3Rpb24gYXMgZGVwcmVjYXRlZAogKiAJCS0gY2hhbmdlZCBmb3JtIG9yZGVyIHRv
IGltcHJvdmUgdXNhYmlsaXR5IGFuZCBtYWtlIHVzZSBvbiBtdWx0aXNpdGVzIGEKICogCQliaXQg
bGVzcyBzY2FyeQogKiAJCS0gY2hhbmdlZCB0byB2ZXJzaW9uIDIsIGFzIHJlYWxseSBzaG91bGQg
aGF2ZSBkb25lIHdoZW4gdGhlIFVJIHdhcwogKiAJCWludHJvZHVjZWQKICogCQktIGFkZGVkIGEg
cmVjdXJzaXZlIGFycmF5IHdhbGtlciB0byBkZWFsIHdpdGggc2VyaWFsaXplZCBzdHJpbmdzIGJl
aW5nCiAqIAkJc3RvcmVkIGluIHNlcmlhbGl6ZWQgc3RyaW5ncy4gWWVzLCByZWFsbHkuCiAqIAkJ
LSBjaGFuZ2VzIGJ5IEphbWVzIFIgV2hpdGVoZWFkIChrdWRvcyBmb3IgcmVjdXJzaXZlIHdhbGtl
cikgYW5kIERhdmlkCiAqIAkJQ292ZW5leSAyMDExLTA4LTI2CiAqICBWZXJzaW9uIDEuMC4yOgog
KiAgCS0gdHlwb3MgY29ycmVjdGVkLCBidXR0b24gdGV4dCB0d2VhayAtIERhdmlkIENvdmVuZXkg
LyBSb2JlcnQgTydSb3Vya2UKICogIFZlcnNpb24gMS4wLjEKICogIAktIHN0eWxpbmcgYW5kIGZv
cm0gYWRkZWQgYnkgSmFtZXMgUiBXaGl0ZWhlYWQuCiAqCiAqICBDcmVkaXRzOiAgbW96NjY3IGF0
IGdtYWlsIGRvdCBjb20gZm9yIGhpcyByZWN1cnNpdmVfYXJyYXlfcmVwbGFjZSBwb3N0ZWQgYXQK
ICogICAgICAgICAgICB1ay5waHAubmV0IHdoaWNoIHNhdmVkIG1lIGEgbGl0dGxlIHRpbWUgLSBh
IHBlcmZlY3Qgc2FtcGxlIGZvciBtZQogKiAgICAgICAgICAgIGFuZCBzZWVtcyB0byB3b3JrIGlu
IGFsbCBjYXNlcy4KICoKICovCgpjbGFzcyBpY2l0X3NyZGIgewoKCS8qKgoJICogQHZhciBhcnJh
eSBMaXN0IG9mIGFsbCB0aGUgdGFibGVzIGluIHRoZSBkYXRhYmFzZQoJICovCglwdWJsaWMgJGFs
bF90YWJsZXMgPSBhcnJheSgpOwoKCS8qKgoJICogQHZhciBhcnJheSBUYWJsZXMgdG8gcnVuIHRo
ZSByZXBsYWNlbWVudCBvbgoJICovCglwdWJsaWMgJHRhYmxlcyA9IGFycmF5KCk7CgoJLyoqCgkg
KiBAdmFyIHN0cmluZyBTZWFyY2ggdGVybQoJICovCglwdWJsaWMgJHNlYXJjaCA9IGZhbHNlOwoK
CS8qKgoJICogQHZhciBzdHJpbmcgUmVwbGFjZW1lbnQKCSAqLwoJcHVibGljICRyZXBsYWNlID0g
ZmFsc2U7CgoJLyoqCgkgKiBAdmFyIGJvb2wgVXNlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdG8gcGVy
Zm9ybSBzZWFyY2ggYW5kIHJlcGxhY2UKCSAqLwoJcHVibGljICRyZWdleCA9IGZhbHNlOwoKCS8q
KgoJICogQHZhciBib29sIExlYXZlIGd1aWQgY29sdW1uIGFsb25lCgkgKi8KCXB1YmxpYyAkZ3Vp
ZCA9IGZhbHNlOwoKCgkvKioKCSAqIEB2YXIgYXJyYXkgQXZhaWxhYmxlIGVuZ2luZXMKCSAqLwoJ
cHVibGljICRlbmdpbmVzID0gYXJyYXkoKTsKCgkvKioKCSAqIEB2YXIgYm9vbHxzdHJpbmcgQ29u
dmVydCB0byBuZXcgZW5naW5lCgkgKi8KCXB1YmxpYyAkYWx0ZXJfZW5naW5lID0gZmFsc2U7CgoJ
LyoqCgkgKiBAdmFyIGJvb2x8c3RyaW5nIENvbnZlcnQgdG8gbmV3IGNvbGxhdGlvbgoJICovCglw
dWJsaWMgJGFsdGVyX2NvbGxhdGUgPSBmYWxzZTsKCgkvKioKCSAqIEB2YXIgYXJyYXkgQ29sdW1u
IG5hbWVzIHRvIGV4Y2x1ZGUKCSAqLwoJcHVibGljICRleGNsdWRlX2NvbHMgPSBhcnJheSgpOwoK
CS8qKgoJICogQHZhciBhcnJheSBDb2x1bW4gbmFtZXMgdG8gaW5jbHVkZQoJICovCglwdWJsaWMg
JGluY2x1ZGVfY29scyA9IGFycmF5KCk7CgoJLyoqCgkgKiBAdmFyIGJvb2wgVHJ1ZSBpZiBkb2lu
ZyBhIGRyeSBydW4KCSAqLwoJcHVibGljICRkcnlfcnVuID0gdHJ1ZTsKCgkvKioKCSAqIEB2YXIg
c3RyaW5nIERhdGFiYXNlIGNvbm5lY3Rpb24gZGV0YWlscwoJICovCglwdWJsaWMgJG5hbWUgPSAn
JzsKCXB1YmxpYyAkdXNlciA9ICcnOwoJcHVibGljICRwYXNzID0gJyc7CglwdWJsaWMgJGhvc3Qg
PSAnMTI3LjAuMC4xJzsKCXB1YmxpYyAkcG9ydCA9IDA7CglwdWJsaWMgJGNoYXJzZXQgPSAndXRm
OCc7CglwdWJsaWMgJGNvbGxhdGUgPSAnJzsKCgoJLyoqCgkgKiBAdmFyIGFycmF5IFN0b3JlcyBh
IGxpc3Qgb2YgZXhjZXB0aW9ucwoJICovCglwdWJsaWMgJGVycm9ycyA9IGFycmF5KAoJCQkJCQkn
c2VhcmNoJyA9PiBhcnJheSgpLAoJCQkJCQknZGInID0+IGFycmF5KCksCgkJCQkJCSd0YWJsZXMn
ID0+IGFycmF5KCksCgkJCQkJCSdyZXN1bHRzJyA9PiBhcnJheSgpCgkJCQkJKTsKCglwdWJsaWMg
JGVycm9yX3R5cGUgPSAnc2VhcmNoJzsKCgoJLyoqCgkgKiBAdmFyIGFycmF5IFN0b3JlcyB0aGUg
cmVwb3J0IGFycmF5CgkgKi8KCXB1YmxpYyAkcmVwb3J0ID0gYXJyYXkoKTsKCgoJLyoqCgkgKiBA
dmFyIGludCBOdW1iZXIgb2YgbW9kaWZpY2F0aW9ucyB0byByZXR1cm4gaW4gcmVwb3J0IGFycmF5
CgkgKi8KCXB1YmxpYyAkcmVwb3J0X2NoYW5nZV9udW0gPSAzMDsKCgoJLyoqCgkgKiBAdmFyIGJv
b2wgV2hldGhlciB0byBlY2hvIHJlcG9ydCBhcyBzY3JpcHQgcnVucwoJICovCglwdWJsaWMgJHZl
cmJvc2UgPSBmYWxzZTsKCgoJLyoqCgkgKiBAdmFyIHJlc291cmNlIERhdGFiYXNlIGNvbm5lY3Rp
b24KCSAqLwoJcHVibGljICRkYjsKCgoJLyoqCgkgKiBAdmFyIHVzZSBQRE8KCSAqLwoJcHVibGlj
ICR1c2VfcGRvID0gdHJ1ZTsKCgoJLyoqCgkgKiBAdmFyIGludCBIb3cgbWFueSByb3dzIHRvIHNl
bGVjdCBhdCBhIHRpbWUgd2hlbiByZXBsYWNpbmcKCSAqLwoJcHVibGljICRwYWdlX3NpemUgPSA1
MDAwMDsKCgoJLyoqCgkgKiBTZWFyY2hlcyBmb3IgV1Agb3IgRHJ1cGFsIGNvbnRleHQKCSAqIENo
ZWNrcyBmb3IgJF9QT1NUIGRhdGEKCSAqIEluaXRpYWxpc2VzIGRhdGFiYXNlIGNvbm5lY3Rpb24K
CSAqIEhhbmRsZXMgYWpheAoJICogUnVucyByZXBsYWNlbWVudAoJICoKCSAqIEBwYXJhbSBzdHJp
bmcgJG5hbWUgICAgZGF0YWJhc2UgbmFtZQoJICogQHBhcmFtIHN0cmluZyAkdXNlciAgICBkYXRh
YmFzZSB1c2VybmFtZQoJICogQHBhcmFtIHN0cmluZyAkcGFzcyAgICBkYXRhYmFzZSBwYXNzd29y
ZAoJICogQHBhcmFtIHN0cmluZyAkaG9zdCAgICBkYXRhYmFzZSBob3N0bmFtZQoJICogQHBhcmFt
IHN0cmluZyAkcG9ydCAgICBkYXRhYmFzZSBjb25uZWN0aW9uIHBvcnQKCSAqIEBwYXJhbSBzdHJp
bmcgJHNlYXJjaCAgc2VhcmNoIHN0cmluZyAvIHJlZ2V4CgkgKiBAcGFyYW0gc3RyaW5nICRyZXBs
YWNlIHJlcGxhY2VtZW50IHN0cmluZwoJICogQHBhcmFtIGFycmF5ICR0YWJsZXMgIHRhYmxlcyB0
byBydW4gcmVwbGNlbWVudHMgYWdhaW5zdAoJICogQHBhcmFtIGJvb2wgJGxpdmUgICAgbGl2ZSBy
dW4KCSAqIEBwYXJhbSBhcnJheSAkZXhjbHVkZV9jb2xzICB0YWJsZXMgdG8gcnVuIHJlcGxjZW1l
bnRzIGFnYWluc3QKCSAqCgkgKiBAcmV0dXJuIHZvaWQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9f
Y29uc3RydWN0KCAkYXJncyApIHsKCgkJJGFyZ3MgPSBhcnJheV9tZXJnZSggYXJyYXkoCgkJCSdu
YW1lJyAJCQkJPT4gJycsCgkJCSd1c2VyJyAJCQkJPT4gJycsCgkJCSdwYXNzJyAJCQkJPT4gJycs
CgkJCSdob3N0JyAJCQkJPT4gJycsCgkJCSdwb3J0JyAgICAgICAgICAgICAgPT4gMzMwNiwKCQkJ
J3NlYXJjaCcgCQkJPT4gJycsCgkJCSdyZXBsYWNlJyAJCQk9PiAnJywKCQkJJ3RhYmxlcycJCQk9
PiBhcnJheSgpLAoJCQknZXhjbHVkZV9jb2xzJyAJCT0+IGFycmF5KCksCgkJCSdpbmNsdWRlX2Nv
bHMnIAkJPT4gYXJyYXkoKSwKCQkJJ2RyeV9ydW4nIAkJCT0+IHRydWUsCgkJCSdyZWdleCcgCQkJ
PT4gZmFsc2UsCgkJCSdwYWdlc2l6ZScgCQkJPT4gNTAwMDAsCgkJCSdhbHRlcl9lbmdpbmUnIAkJ
PT4gZmFsc2UsCgkJCSdhbHRlcl9jb2xsYXRpb24nIAk9PiBmYWxzZSwKCQkJJ3ZlcmJvc2UnCQkJ
PT4gZmFsc2UKCQkpLCAkYXJncyApOwoKCQkvLyBoYW5kbGUgZXhjZXB0aW9ucwoJCXNldF9leGNl
cHRpb25faGFuZGxlciggYXJyYXkoICR0aGlzLCAnZXhjZXB0aW9ucycgKSApOwoKCQkvLyBoYW5k
bGUgZXJyb3JzCgkJc2V0X2Vycm9yX2hhbmRsZXIoIGFycmF5KCAkdGhpcywgJ2Vycm9ycycgKSwg
RV9FUlJPUiB8IEVfV0FSTklORyApOwoKCQkvLyBhbGxvdyBhIHN0cmluZyBmb3IgY29sdW1ucwoJ
CWZvcmVhY2goIGFycmF5KCAnZXhjbHVkZV9jb2xzJywgJ2luY2x1ZGVfY29scycsICd0YWJsZXMn
ICkgYXMgJG1heWJlX3N0cmluZ19hcmcgKSB7CgkJCWlmICggaXNfc3RyaW5nKCAkYXJnc1sgJG1h
eWJlX3N0cmluZ19hcmcgXSApICkKCQkJCSRhcmdzWyAkbWF5YmVfc3RyaW5nX2FyZyBdID0gYXJy
YXlfZmlsdGVyKCBhcnJheV9tYXAoICd0cmltJywgZXhwbG9kZSggJywnLCAkYXJnc1sgJG1heWJl
X3N0cmluZ19hcmcgXSApICkgKTsKCQl9CgkJCgkJLy8gdmVyaWZ5IHRoYXQgdGhlIHBvcnQgbnVt
YmVyIGlzIGxvZ2ljYWwJCQoJCS8vIHdvcmsgYXJvdW5kIFBIUHMgaW5hYmlsaXR5IHRvIHN0cmlu
Z2lmeSBhIHplcm8gd2l0aG91dCBtYWtpbmcgaXQgYW4gZW1wdHkgc3RyaW5nCgkJLy8gQU5EIHdp
dGhvdXQgY2FzdGluZyBhd2F5IHRyYWlsaW5nIGNoYXJhY3RlcnMgaWYgdGhleSBhcmUgcHJlc2Vu
dC4KCQkkcG9ydF9hc19zdHJpbmcgPSAoc3RyaW5nKSRhcmdzWydwb3J0J10gPyAoc3RyaW5nKSRh
cmdzWydwb3J0J10gOiAiMCI7CQkKCQlpZiAoIChzdHJpbmcpYWJzKCAoaW50KSRhcmdzWydwb3J0
J10gKSAhPT0gJHBvcnRfYXNfc3RyaW5nICkgewoJCQkkcG9ydF9lcnJvciA9ICdQb3J0IG51bWJl
ciBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWQuJzsKCQkJJHRoaXMtPmFk
ZF9lcnJvciggJHBvcnRfZXJyb3IsICdkYicgKTsKCQkJaWYgKCBkZWZpbmVkKCAnU1RESU4nICkg
KSB7CgkJCQllY2hvICdFcnJvcjogJyAuICRwb3J0X2Vycm9yOwkKCQkJfQoJCQlyZXR1cm47CgkJ
fQoKCQkvLyBzZXQgY2xhc3MgdmFycwoJCWZvcmVhY2goICRhcmdzIGFzICRuYW1lID0+ICR2YWx1
ZSApIHsKCQkJaWYgKCBpc19zdHJpbmcoICR2YWx1ZSApICkKCQkJCSR2YWx1ZSA9IHN0cmlwY3Ns
YXNoZXMoICR2YWx1ZSApOwoJCQlpZiAoIGlzX2FycmF5KCAkdmFsdWUgKSApCgkJCQkkdmFsdWUg
PSBhcnJheV9tYXAoICdzdHJpcGNzbGFzaGVzJywgJHZhbHVlICk7CgkJCSR0aGlzLT5zZXQoICRu
YW1lLCAkdmFsdWUgKTsKCQl9CgoJCS8vIG9ubHkgZm9yIG5vbiBjbGkgY2FsbCwgY2xpIHNldCBu
byB0aW1lb3V0LCBubyBtZW1vcnkgbGltaXQKCQlpZiggISBkZWZpbmVkKCAnU1RESU4nICkgKSB7
CgoJCQkvLyBpbmNyZWFzZSB0aW1lIG91dCBsaW1pdAoJCQlAc2V0X3RpbWVfbGltaXQoIDYwICog
MTAgKTsKCgkJCS8vIHRyeSB0byBwdXNoIHRoZSBhbGxvd2VkIG1lbW9yeSB1cCwgd2hpbGUgd2Un
cmUgYXQgaXQKCQkJQGluaV9zZXQoICdtZW1vcnlfbGltaXQnLCAnMTAyNE0nICk7CgoJCX0KCgkJ
Ly8gc2V0IHVwIGRiIGNvbm5lY3Rpb24KCQkkdGhpcy0+ZGJfc2V0dXAoKTsKCgkJaWYgKCAkdGhp
cy0+ZGJfdmFsaWQoKSApIHsKCgkJCS8vIHVwZGF0ZSBlbmdpbmVzCgkJCWlmICggJHRoaXMtPmFs
dGVyX2VuZ2luZSApIHsKCQkJCSRyZXBvcnQgPSAkdGhpcy0+dXBkYXRlX2VuZ2luZSggJHRoaXMt
PmFsdGVyX2VuZ2luZSwgJHRoaXMtPnRhYmxlcyApOwoJCQl9CgoJCQkvLyB1cGRhdGUgY29sbGF0
aW9uCgkJCWVsc2VpZiAoICR0aGlzLT5hbHRlcl9jb2xsYXRpb24gKSB7CgkJCQkkcmVwb3J0ID0g
JHRoaXMtPnVwZGF0ZV9jb2xsYXRpb24oICR0aGlzLT5hbHRlcl9jb2xsYXRpb24sICR0aGlzLT50
YWJsZXMgKTsKCQkJfQoKCQkJLy8gZGVmYXVsdCBzZWFyY2gvcmVwbGFjZSBhY3Rpb24KCQkJZWxz
ZSB7CgkJCQkkcmVwb3J0ID0gJHRoaXMtPnJlcGxhY2VyKCAkdGhpcy0+c2VhcmNoLCAkdGhpcy0+
cmVwbGFjZSwgJHRoaXMtPnRhYmxlcyApOwoJCQl9CgoJCX0gZWxzZSB7CgoJCQkkcmVwb3J0ID0g
JHRoaXMtPnJlcG9ydDsKCgkJfQoKCQkvLyBzdG9yZSByZXBvcnQKCQkkdGhpcy0+c2V0KCAncmVw
b3J0JywgJHJlcG9ydCApOwoJCXJldHVybiAkcmVwb3J0OwoJfQoKCgkvKioKCSAqIFRlcm1pbmF0
ZXMgZGIgY29ubmVjdGlvbgoJICoKCSAqIEByZXR1cm4gdm9pZAoJICovCglwdWJsaWMgZnVuY3Rp
b24gX19kZXN0cnVjdCgpIHsKCQlpZiAoICR0aGlzLT5kYl92YWxpZCgpICkKCQkJJHRoaXMtPmRi
X2Nsb3NlKCk7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBnZXQoICRwcm9wZXJ0eSApIHsKCQlyZXR1
cm4gJHRoaXMtPiRwcm9wZXJ0eTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gc2V0KCAkcHJvcGVydHks
ICR2YWx1ZSApIHsKCQkkdGhpcy0+JHByb3BlcnR5ID0gJHZhbHVlOwoJfQoKCglwdWJsaWMgZnVu
Y3Rpb24gZXhjZXB0aW9ucyggJGV4Y2VwdGlvbiApIHsKCQllY2hvICRleGNlcHRpb24tPmdldE1l
c3NhZ2UoKSAuICJcbiI7Cgl9CgoKCXB1YmxpYyBmdW5jdGlvbiBlcnJvcnMoICRubywgJG1lc3Nh
Z2UsICRmaWxlLCAkbGluZSApIHsKCQllY2hvICRtZXNzYWdlIC4gIlxuIjsKCX0KCgoJcHVibGlj
IGZ1bmN0aW9uIGxvZyggJHR5cGUgPSAnJyApIHsKCQkkYXJncyA9IGFycmF5X3NsaWNlKCBmdW5j
X2dldF9hcmdzKCksIDEgKTsKCQlpZiAoICR0aGlzLT5nZXQoICd2ZXJib3NlJyApICkgewoJCQll
Y2hvICJ7JHR5cGV9OiAiOwoJCQlwcmludF9yKCAkYXJncyApOwoJCQllY2hvICJcbiI7CgkJfQoJ
CXJldHVybiAkYXJnczsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIGFkZF9lcnJvciggJGVycm9yLCAk
dHlwZSA9IG51bGwgKSB7CgkJaWYgKCAkdHlwZSAhPT0gbnVsbCApCgkJCSR0aGlzLT5lcnJvcl90
eXBlID0gJHR5cGU7CgkJJHRoaXMtPmVycm9yc1sgJHRoaXMtPmVycm9yX3R5cGUgXVtdID0gJGVy
cm9yOwoJCSR0aGlzLT5sb2coICdlcnJvcicsICR0aGlzLT5lcnJvcl90eXBlLCAkZXJyb3IgKTsK
CX0KCgoJcHVibGljIGZ1bmN0aW9uIHVzZV9wZG8oKSB7CgkJcmV0dXJuICR0aGlzLT5nZXQoICd1
c2VfcGRvJyApOwoJfQoKCgkvKioKCSAqIFNldHVwIGNvbm5lY3Rpb24sIHBvcHVsYXRlIHRhYmxl
cyBhcnJheQoJICogQWxzbyByZXNwb25zaWJsZSBmb3Igc2VsZWN0aW5nIHRoZSB0eXBlIG9mIGNv
bm5lY3Rpb24gdG8gdXNlLgoJICoKCSAqIEByZXR1cm4gdm9pZAoJICovCglwdWJsaWMgZnVuY3Rp
b24gZGJfc2V0dXAoKSB7CgkJJG15c3FsaV9hdmFpbGFibGUgPSBjbGFzc19leGlzdHMoICdteXNx
bGknICk7CgkJJHBkb19hdmFpbGFibGUgICAgPSBjbGFzc19leGlzdHMoICdQRE8nICAgICk7CgoJ
CSRjb25uZWN0aW9uX3R5cGUgPSAnJzsKCgkJLy8gRGVmYXVsdCB0byBteXNxbGkgdHlwZS4KCQkv
LyBPbmx5IGFkdmFuY2UgdG8gUERPIGlmIGFsbCBjb25kaXRpb25zIGFyZSBtZXQuCgkJaWYgKCAk
bXlzcWxpX2F2YWlsYWJsZSApCgkJewoJCQkkY29ubmVjdGlvbl90eXBlID0gJ215c3FsaSc7CgkJ
fQoKCQlpZiAoICRwZG9fYXZhaWxhYmxlICkgewoJCQkvLyBQRE8gaXMgdGhlIGludGVyZmFjZSwg
YnV0IGl0IG1heSBub3QgaGF2ZSB0aGUgJ215c3FsJyBtb2R1bGUuCgkJCSRteXNxbF9kcml2ZXJf
cHJlc2VudCA9IGluX2FycmF5KCAnbXlzcWwnLCBwZG9fZHJpdmVycygpICk7CgoJCQlpZiAoICRt
eXNxbF9kcml2ZXJfcHJlc2VudCApIHsKCQkJCSRjb25uZWN0aW9uX3R5cGUgPSAncGRvJzsKCQkJ
fQoJCX0KCgkJLy8gQWJvcnQgaWYgbXlzcWxpIGFuZCBQRE8gYXJlIGJvdGggYnJva2VuLgoJCWlm
ICggJycgPT09ICRjb25uZWN0aW9uX3R5cGUgKQoJCXsKCQkJJHRoaXMtPmFkZF9lcnJvciggJ0Nv
dWxkIG5vdCBmaW5kIGFueSBNeVNRTCBkYXRhYmFzZSBkcml2ZXJzLiAoTXlTUUxpIG9yIFBETyBy
ZXF1aXJlZC4pJywgJ2RiJyApOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBjb25uZWN0CgkJ
JHRoaXMtPnNldCggJ2RiJywgJHRoaXMtPmNvbm5lY3QoICRjb25uZWN0aW9uX3R5cGUgKSApOwoK
CX0KCgoJLyoqCgkgKiBEYXRhYmFzZSBjb25uZWN0aW9uIHR5cGUgcm91dGVyCgkgKgoJICogQHBh
cmFtIHN0cmluZyAkdHlwZQoJICoKCSAqIEByZXR1cm4gY2FsbGJhY2sKCSAqLwoJcHVibGljIGZ1
bmN0aW9uIGNvbm5lY3QoICR0eXBlID0gJycgKSB7CgkJJG1ldGhvZCA9ICJjb25uZWN0X3skdHlw
ZX0iOwoJCXJldHVybiAkdGhpcy0+JG1ldGhvZCgpOwoJfQoKCgkvKioKCSAqIENyZWF0ZXMgdGhl
IGRhdGFiYXNlIGNvbm5lY3Rpb24gdXNpbmcgbmV3ZXIgbXlzcWxpIGZ1bmN0aW9ucwoJICoKCSAq
IEByZXR1cm4gcmVzb3VyY2V8Ym9vbAoJICovCglwdWJsaWMgZnVuY3Rpb24gY29ubmVjdF9teXNx
bGkoKSB7CgoJCS8vIHN3aXRjaCBvZmYgUERPCgkJJHRoaXMtPnNldCggJ3VzZV9wZG8nLCBmYWxz
ZSApOwoKCQkkY29ubmVjdGlvbiA9IEBteXNxbGlfY29ubmVjdCggJHRoaXMtPmhvc3QsICR0aGlz
LT51c2VyLCAkdGhpcy0+cGFzcywgJHRoaXMtPm5hbWUsICR0aGlzLT5wb3J0ICk7CgoJCS8vIHVu
c2V0IGlmIG5vdCBhdmFpbGFibGUKCQlpZiAoICEgJGNvbm5lY3Rpb24gKSB7CgkJCSR0aGlzLT5h
ZGRfZXJyb3IoIG15c3FsaV9jb25uZWN0X2Vycm9yKCApLCAnZGInICk7CgkJCSRjb25uZWN0aW9u
ID0gZmFsc2U7CgkJfQoKCQlyZXR1cm4gJGNvbm5lY3Rpb247Cgl9CgoKCS8qKgoJICogU2V0cyB1
cCBkYXRhYmFzZSBjb25uZWN0aW9uIHVzaW5nIFBETwoJICoKCSAqIEByZXR1cm4gUERPfGJvb2wK
CSAqLwoJcHVibGljIGZ1bmN0aW9uIGNvbm5lY3RfcGRvKCkgewoJCgkJdHJ5IHsKCQkJJGNvbm5l
Y3Rpb24gPSBuZXcgUERPKCAibXlzcWw6aG9zdD17JHRoaXMtPmhvc3R9O3BvcnQ9eyR0aGlzLT5w
b3J0fTtkYm5hbWU9eyR0aGlzLT5uYW1lfSIsICR0aGlzLT51c2VyLCAkdGhpcy0+cGFzcyApOwoJ
CX0gY2F0Y2goIFBET0V4Y2VwdGlvbiAkZSApIHsKCQkJJHRoaXMtPmFkZF9lcnJvciggJGUtPmdl
dE1lc3NhZ2UoKSwgJ2RiJyApOwoJCQkkY29ubmVjdGlvbiA9IGZhbHNlOwoJCX0KCgkJLy8gY2hl
Y2sgaWYgdGhlcmUncyBhIHByb2JsZW0gd2l0aCBvdXIgZGF0YWJhc2UgYXQgdGhpcyBzdGFnZQoJ
CWlmICggJGNvbm5lY3Rpb24gJiYgISAkY29ubmVjdGlvbi0+cXVlcnkoICdTSE9XIFRBQkxFUycg
KSApIHsKCQkJJGVycm9yX2luZm8gPSAkY29ubmVjdGlvbi0+ZXJyb3JJbmZvKCk7CgkJCWlmICgg
IWVtcHR5KCAkZXJyb3JfaW5mbyApICYmIGlzX2FycmF5KCAkZXJyb3JfaW5mbyApICkKCQkJCSR0
aGlzLT5hZGRfZXJyb3IoIGFycmF5X3BvcCggJGVycm9yX2luZm8gKSwgJ2RiJyApOyAvLyBBcnJh
eSBwb3Agd2lsbCBvbmx5IGFjY2VwdCBhICR2YXIuLgoJCQkkY29ubmVjdGlvbiA9IGZhbHNlOwoJ
CX0KCgkJcmV0dXJuICRjb25uZWN0aW9uOwoJfQoKCgkvKioKCSAqIFJldHJpZXZlIGFsbCB0YWJs
ZXMgZnJvbSB0aGUgZGF0YWJhc2UKCSAqCgkgKiBAcmV0dXJuIGFycmF5CgkgKi8KCXB1YmxpYyBm
dW5jdGlvbiBnZXRfdGFibGVzKCkgewoJCS8vIGdldCB0YWJsZXMKCgkJLy8gQSBjbG9uZSBvZiBz
aG93IHRhYmxlIHN0YXR1cyBidXQgd2l0aCBjaGFyYWN0ZXIgc2V0IGZvciB0aGUgdGFibGUuCgkJ
JHNob3dfdGFibGVfc3RhdHVzID0gIlNFTEVDVAoJCSAgdC5gVEFCTEVfTkFNRWAgYXMgTmFtZSwK
CQkgIHQuYEVOR0lORWAgYXMgYEVuZ2luZWAsCgkJICB0LmB2ZXJzaW9uYCBhcyBgVmVyc2lvbmAs
CgkJICB0LmBST1dfRk9STUFUYCBBUyBgUm93X2Zvcm1hdGAsCgkJICB0LmBUQUJMRV9ST1dTYCBB
UyBgUm93c2AsCgkJICB0LmBBVkdfUk9XX0xFTkdUSGAgQVMgYEF2Z19yb3dfbGVuZ3RoYCwKCQkg
IHQuYERBVEFfTEVOR1RIYCBBUyBgRGF0YV9sZW5ndGhgLAoJCSAgdC5gTUFYX0RBVEFfTEVOR1RI
YCBBUyBgTWF4X2RhdGFfbGVuZ3RoYCwKCQkgIHQuYElOREVYX0xFTkdUSGAgQVMgYEluZGV4X2xl
bmd0aGAsCgkJICB0LmBEQVRBX0ZSRUVgIEFTIGBEYXRhX2ZyZWVgLAoJCSAgdC5gQVVUT19JTkNS
RU1FTlRgIGFzIGBBdXRvX2luY3JlbWVudGAsCgkJICB0LmBDUkVBVEVfVElNRWAgQVMgYENyZWF0
ZV90aW1lYCwKCQkgIHQuYFVQREFURV9USU1FYCBBUyBgVXBkYXRlX3RpbWVgLAoJCSAgdC5gQ0hF
Q0tfVElNRWAgQVMgYENoZWNrX3RpbWVgLAoJCSAgdC5gVEFCTEVfQ09MTEFUSU9OYCBhcyBDb2xs
YXRpb24sCgkJICBjLmBDSEFSQUNURVJfU0VUX05BTUVgIGFzIENoYXJhY3Rlcl9zZXQsCgkJICB0
LmBDaGVja3N1bWAsCgkJICB0LmBDcmVhdGVfb3B0aW9uc2AsCgkJICB0LmB0YWJsZV9Db21tZW50
YCBhcyBgQ29tbWVudGAKCQlGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS5gVEFCTEVTYCB0CgkJCUxF
RlQgSk9JTiBpbmZvcm1hdGlvbl9zY2hlbWEuYENPTExBVElPTl9DSEFSQUNURVJfU0VUX0FQUExJ
Q0FCSUxJVFlgIGMKCQkJCU9OICggdC5gVEFCTEVfQ09MTEFUSU9OYCA9IGMuYENPTExBVElPTl9O
QU1FYCApCgkJICBXSEVSRSB0LmBUQUJMRV9TQ0hFTUFgID0gJ3skdGhpcy0+bmFtZX0nOwoJCSI7
CgoJCSRhbGxfdGFibGVzX215c3FsID0gJHRoaXMtPmRiX3F1ZXJ5KCAkc2hvd190YWJsZV9zdGF0
dXMgKTsKCQkkYWxsX3RhYmxlcyA9IGFycmF5KCk7CgoJCWlmICggISAkYWxsX3RhYmxlc19teXNx
bCApIHsKCgkJCSR0aGlzLT5hZGRfZXJyb3IoICR0aGlzLT5kYl9lcnJvciggKSwgJ2RiJyApOwoK
CQl9IGVsc2UgewoKCQkJLy8gc2V0IHRoZSBjaGFyYWN0ZXIgc2V0CgkJCS8vJHRoaXMtPmRiX3Nl
dF9jaGFyc2V0KCAkdGhpcy0+Z2V0KCAnY2hhcnNldCcgKSApOwoKCQkJd2hpbGUgKCAkdGFibGUg
PSAkdGhpcy0+ZGJfZmV0Y2goICRhbGxfdGFibGVzX215c3FsICkgKSB7CgkJCQkvLyBpZ25vcmUg
dmlld3MKCQkJCWlmICggJHRhYmxlWyAnQ29tbWVudCcgXSA9PSAnVklFVycgKQoJCQkJCWNvbnRp
bnVlOwoKCQkJCSRhbGxfdGFibGVzWyAkdGFibGVbMF0gXSA9ICR0YWJsZTsKCQkJfQoKCQl9CgoJ
CXJldHVybiAkYWxsX3RhYmxlczsKCX0KCgoJLyoqCgkgKiBHZXQgdGhlIGNoYXJhY3RlciBzZXQg
Zm9yIHRoZSBjdXJyZW50IHRhYmxlCgkgKgoJICogQHBhcmFtIHN0cmluZyAkdGFibGVfbmFtZSBU
aGUgbmFtZSBvZiB0aGUgdGFibGUgd2Ugd2FudCB0byBnZXQgdGhlIGNoYXIKCSAqIHNldCBmb3IK
CSAqCgkgKiBAcmV0dXJuIHN0cmluZyAgICBUaGUgY2hhcmFjdGVyIGVuY29kaW5nOwoJICovCglw
dWJsaWMgZnVuY3Rpb24gZ2V0X3RhYmxlX2NoYXJhY3Rlcl9zZXQoICR0YWJsZV9uYW1lID0gJycg
KSB7CgkJJHRhYmxlX25hbWUgPSAkdGhpcy0+ZGJfZXNjYXBlKCAkdGFibGVfbmFtZSApOwoJCSRz
Y2hlbWEgPSAkdGhpcy0+ZGJfZXNjYXBlKCAkdGhpcy0+bmFtZSApOwoKCQkkY2hhcnNldCA9ICR0
aGlzLT5kYl9xdWVyeSggICJTRUxFQ1QgYy5gY2hhcmFjdGVyX3NldF9uYW1lYAoJCQlGUk9NIGlu
Zm9ybWF0aW9uX3NjaGVtYS5gVEFCTEVTYCB0CgkJCQlMRUZUIEpPSU4gaW5mb3JtYXRpb25fc2No
ZW1hLmBDT0xMQVRJT05fQ0hBUkFDVEVSX1NFVF9BUFBMSUNBQklMSVRZYCBjCgkJCQlPTiAodC5g
VEFCTEVfQ09MTEFUSU9OYCA9IGMuYENPTExBVElPTl9OQU1FYCkKCQkJV0hFUkUgdC50YWJsZV9z
Y2hlbWEgPSB7JHNjaGVtYX0KCQkJCUFORCB0LnRhYmxlX25hbWUgPSB7JHRhYmxlX25hbWV9CgkJ
CUxJTUlUIDE7IiApOwoKCQkkZW5jb2RpbmcgPSBmYWxzZTsKCQlpZiAoICEgJGNoYXJzZXQgKSB7
CgkJCSR0aGlzLT5hZGRfZXJyb3IoICR0aGlzLT5kYl9lcnJvciggKSwgJ2RiJyApOwoJCX0KCQll
bHNlIHsKCQkJJHJlc3VsdCA9ICR0aGlzLT5kYl9mZXRjaCggJGNoYXJzZXQgKTsKCQkJJGVuY29k
aW5nID0gaXNzZXQoICRyZXN1bHRbICdjaGFyYWN0ZXJfc2V0X25hbWUnIF0gKSA/ICRyZXN1bHRb
ICdjaGFyYWN0ZXJfc2V0X25hbWUnIF0gOiBmYWxzZTsKCQl9CgoJCXJldHVybiAkZW5jb2Rpbmc7
Cgl9CgoKCS8qKgoJICogUmV0cmlldmUgYWxsIHN1cHBvcnRlZCBkYXRhYmFzZSBlbmdpbmVzCgkg
KgoJICogQHJldHVybiBhcnJheQoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0X2VuZ2luZXMoKSB7
CgoJCS8vIGdldCBhdmFpbGFibGUgZW5naW5lcwoJCSRteXNxbF9lbmdpbmVzID0gJHRoaXMtPmRi
X3F1ZXJ5KCAnU0hPVyBFTkdJTkVTOycgKTsKCQkkZW5naW5lcyA9IGFycmF5KCk7CgoJCWlmICgg
ISAkbXlzcWxfZW5naW5lcyApIHsKCQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMtPmRiX2Vycm9y
KCApLCAnZGInICk7CgkJfSBlbHNlIHsKCQkJd2hpbGUgKCAkZW5naW5lID0gJHRoaXMtPmRiX2Zl
dGNoKCAkbXlzcWxfZW5naW5lcyApICkgewoJCQkJaWYgKCBpbl9hcnJheSggJGVuZ2luZVsgJ1N1
cHBvcnQnIF0sIGFycmF5KCAnWUVTJywgJ0RFRkFVTFQnICkgKSApCgkJCQkJJGVuZ2luZXNbXSA9
ICRlbmdpbmVbICdFbmdpbmUnIF07CgkJCX0KCQl9CgoJCXJldHVybiAkZW5naW5lczsKCX0KCgoJ
cHVibGljIGZ1bmN0aW9uIGRiX3F1ZXJ5KCAkcXVlcnkgKSB7CgkJaWYgKCAkdGhpcy0+dXNlX3Bk
bygpICkKCQkJcmV0dXJuICR0aGlzLT5kYi0+cXVlcnkoICRxdWVyeSApOwoJCWVsc2UKCQkJcmV0
dXJuIG15c3FsaV9xdWVyeSggJHRoaXMtPmRiLCAkcXVlcnkgKTsKCX0KCglwdWJsaWMgZnVuY3Rp
b24gZGJfdXBkYXRlKCAkcXVlcnkgKSB7CgkJaWYgKCAkdGhpcy0+dXNlX3BkbygpICkKCQkJcmV0
dXJuICR0aGlzLT5kYi0+ZXhlYyggJHF1ZXJ5ICk7CgkJZWxzZQoJCQlyZXR1cm4gbXlzcWxpX3F1
ZXJ5KCAkdGhpcy0+ZGIsICRxdWVyeSApOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBkYl9lcnJvcigp
IHsKCQlpZiAoICR0aGlzLT51c2VfcGRvKCkgKSB7CgkJCSRlcnJvcl9pbmZvID0gJHRoaXMtPmRi
LT5lcnJvckluZm8oKTsKCQkJcmV0dXJuICFlbXB0eSggJGVycm9yX2luZm8gKSAmJiBpc19hcnJh
eSggJGVycm9yX2luZm8gKSA/IGFycmF5X3BvcCggJGVycm9yX2luZm8gKSA6ICdVbmtub3duIGVy
cm9yJzsKCQl9CgkJZWxzZQoJCQlyZXR1cm4gbXlzcWxpX2Vycm9yKCAkdGhpcy0+ZGIgKTsKCX0K
CglwdWJsaWMgZnVuY3Rpb24gZGJfZmV0Y2goICRkYXRhICkgewoJCWlmICggJHRoaXMtPnVzZV9w
ZG8oKSApCgkJCXJldHVybiAkZGF0YS0+ZmV0Y2goKTsKCQllbHNlCgkJCXJldHVybiBteXNxbGlf
ZmV0Y2hfYXJyYXkoICRkYXRhICk7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGRiX2VzY2FwZSggJHN0
cmluZyApIHsKCQlpZiAoICR0aGlzLT51c2VfcGRvKCkgKQoJCQlyZXR1cm4gJHRoaXMtPmRiLT5x
dW90ZSggJHN0cmluZyApOwoJCWVsc2UKCQkJcmV0dXJuICInIiAuIG15c3FsaV9yZWFsX2VzY2Fw
ZV9zdHJpbmcoICR0aGlzLT5kYiwgJHN0cmluZyApIC4gIiciOwoJfQoKCXB1YmxpYyBmdW5jdGlv
biBkYl9mcmVlX3Jlc3VsdCggJGRhdGEgKSB7CgkJaWYgKCAkdGhpcy0+dXNlX3BkbygpICkKCQkJ
cmV0dXJuICRkYXRhLT5jbG9zZUN1cnNvcigpOwoJCWVsc2UKCQkJcmV0dXJuIG15c3FsaV9mcmVl
X3Jlc3VsdCggJGRhdGEgKTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gZGJfc2V0X2NoYXJzZXQoICRj
aGFyc2V0ID0gJycgKSB7CgkJaWYgKCAhIGVtcHR5KCAkY2hhcnNldCApICkgewoJCQlpZiAoICEg
JHRoaXMtPnVzZV9wZG8oKSAmJiBmdW5jdGlvbl9leGlzdHMoICdteXNxbGlfc2V0X2NoYXJzZXQn
ICkgKQoJCQkJbXlzcWxpX3NldF9jaGFyc2V0KCAkdGhpcy0+ZGIsICRjaGFyc2V0ICk7CgkJCWVs
c2UKCQkJCSR0aGlzLT5kYl9xdWVyeSggJ1NFVCBOQU1FUyAnIC4gJGNoYXJzZXQgKTsKCQl9Cgl9
CgoJcHVibGljIGZ1bmN0aW9uIGRiX2Nsb3NlKCkgewoJCWlmICggJHRoaXMtPnVzZV9wZG8oKSAp
CgkJCXVuc2V0KCAkdGhpcy0+ZGIgKTsKCQllbHNlCgkJCW15c3FsaV9jbG9zZSggJHRoaXMtPmRi
ICk7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGRiX3ZhbGlkKCkgewoJCXJldHVybiAoYm9vbCkkdGhp
cy0+ZGI7Cgl9CgoKCS8qKgoJICogV2FsayBhbiBhcnJheSByZXBsYWNpbmcgb25lIGVsZW1lbnQg
Zm9yIGFub3RoZXIuICggTk9UIFVTRUQgQU5ZIE1PUkUgKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcg
JGZpbmQgICAgVGhlIHN0cmluZyB3ZSB3YW50IHRvIHJlcGxhY2UuCgkgKiBAcGFyYW0gc3RyaW5n
ICRyZXBsYWNlIFdoYXQgd2UnbGwgYmUgcmVwbGFjaW5nIGl0IHdpdGguCgkgKiBAcGFyYW0gYXJy
YXkgJGRhdGEgICAgVXNlZCB0byBwYXNzIGFueSBzdWJvcmRpbmF0ZSBhcnJheXMgYmFjayB0byB0
aGUKCSAqIGZ1bmN0aW9uIGZvciBzZWFyY2hpbmcuCgkgKgoJICogQHJldHVybiBhcnJheSAgICBU
aGUgb3JpZ2luYWwgYXJyYXkgd2l0aCB0aGUgcmVwbGFjZW1lbnRzIG1hZGUuCgkgKi8KCXB1Ymxp
YyBmdW5jdGlvbiByZWN1cnNpdmVfYXJyYXlfcmVwbGFjZSggJGZpbmQsICRyZXBsYWNlLCAkZGF0
YSApIHsKCQlpZiAoIGlzX2FycmF5KCAkZGF0YSApICkgewoJCQlmb3JlYWNoICggJGRhdGEgYXMg
JGtleSA9PiAkdmFsdWUgKSB7CgkJCQlpZiAoIGlzX2FycmF5KCAkdmFsdWUgKSApIHsKCQkJCQkk
dGhpcy0+cmVjdXJzaXZlX2FycmF5X3JlcGxhY2UoICRmaW5kLCAkcmVwbGFjZSwgJGRhdGFbICRr
ZXkgXSApOwoJCQkJfSBlbHNlIHsKCQkJCQkvLyBoYXZlIHRvIGNoZWNrIGlmIGl0J3Mgc3RyaW5n
IHRvIGVuc3VyZSBubyBzd2l0Y2hpbmcgdG8gc3RyaW5nIGZvciBib29sZWFucy9udW1iZXJzL251
bGxzIC0gZG9uJ3QgbmVlZCBhbnkgbmFzdHkgY29udmVyc2lvbnMKCQkJCQlpZiAoIGlzX3N0cmlu
ZyggJHZhbHVlICkgKQoJCQkJCQkkZGF0YVsgJGtleSBdID0gJHRoaXMtPnN0cl9yZXBsYWNlKCAk
ZmluZCwgJHJlcGxhY2UsICR2YWx1ZSApOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgKCBp
c19zdHJpbmcoICRkYXRhICkgKQoJCQkJJGRhdGEgPSAkdGhpcy0+c3RyX3JlcGxhY2UoICRmaW5k
LCAkcmVwbGFjZSwgJGRhdGEgKTsKCQl9Cgl9CgoKCS8qKgoJICogVGFrZSBhIHNlcmlhbGlzZWQg
YXJyYXkgYW5kIHVuc2VyaWFsaXNlIGl0IHJlcGxhY2luZyBlbGVtZW50cyBhcyBuZWVkZWQgYW5k
CgkgKiB1bnNlcmlhbGlzaW5nIGFueSBzdWJvcmRpbmF0ZSBhcnJheXMgYW5kIHBlcmZvcm1pbmcg
dGhlIHJlcGxhY2Ugb24gdGhvc2UgdG9vLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGZyb20gICAg
ICAgU3RyaW5nIHdlJ3JlIGxvb2tpbmcgdG8gcmVwbGFjZS4KCSAqIEBwYXJhbSBzdHJpbmcgJHRv
ICAgICAgICAgV2hhdCB3ZSB3YW50IGl0IHRvIGJlIHJlcGxhY2VkIHdpdGgKCSAqIEBwYXJhbSBh
cnJheSAgJGRhdGEgICAgICAgVXNlZCB0byBwYXNzIGFueSBzdWJvcmRpbmF0ZSBhcnJheXMgYmFj
ayB0byBpbi4KCSAqIEBwYXJhbSBib29sICAgJHNlcmlhbGlzZWQgRG9lcyB0aGUgYXJyYXkgcGFz
c2VkIHZpYSAkZGF0YSBuZWVkIHNlcmlhbGlzaW5nLgoJICoKCSAqIEByZXR1cm4gYXJyYXkJVGhl
IG9yaWdpbmFsIGFycmF5IHdpdGggYWxsIGVsZW1lbnRzIHJlcGxhY2VkIGFzIG5lZWRlZC4KCSAq
LwoJcHVibGljIGZ1bmN0aW9uIHJlY3Vyc2l2ZV91bnNlcmlhbGl6ZV9yZXBsYWNlKCAkZnJvbSA9
ICcnLCAkdG8gPSAnJywgJGRhdGEgPSAnJywgJHNlcmlhbGlzZWQgPSBmYWxzZSApIHsKCgkJLy8g
c29tZSB1bnNlcmlhbGlzZWQgZGF0YSBjYW5ub3QgYmUgcmUtc2VyaWFsaXNlZCBlZy4gU2ltcGxl
WE1MRWxlbWVudHMKCQl0cnkgewoKCQkJaWYgKCBpc19zdHJpbmcoICRkYXRhICkgJiYgKCAkdW5z
ZXJpYWxpemVkID0gQHVuc2VyaWFsaXplKCAkZGF0YSApICkgIT09IGZhbHNlICkgewoJCQkJJGRh
dGEgPSAkdGhpcy0+cmVjdXJzaXZlX3Vuc2VyaWFsaXplX3JlcGxhY2UoICRmcm9tLCAkdG8sICR1
bnNlcmlhbGl6ZWQsIHRydWUgKTsKCQkJfQoKCQkJZWxzZWlmICggaXNfYXJyYXkoICRkYXRhICkg
KSB7CgkJCQkkX3RtcCA9IGFycmF5KCApOwoJCQkJZm9yZWFjaCAoICRkYXRhIGFzICRrZXkgPT4g
JHZhbHVlICkgewoJCQkJCSRfdG1wWyAka2V5IF0gPSAkdGhpcy0+cmVjdXJzaXZlX3Vuc2VyaWFs
aXplX3JlcGxhY2UoICRmcm9tLCAkdG8sICR2YWx1ZSwgZmFsc2UgKTsKCQkJCX0KCgkJCQkkZGF0
YSA9ICRfdG1wOwoJCQkJdW5zZXQoICRfdG1wICk7CgkJCX0KCgkJCS8vIFN1Ym1pdHRlZCBieSBU
aW5hIE1hdHRlcgoJCQllbHNlaWYgKCBpc19vYmplY3QoICRkYXRhICkgKSB7CgkJCQkvLyAkZGF0
YV9jbGFzcyA9IGdldF9jbGFzcyggJGRhdGEgKTsKCQkJCSRfdG1wID0gJGRhdGE7IC8vIG5ldyAk
ZGF0YV9jbGFzcyggKTsKCQkJCSRwcm9wcyA9IGdldF9vYmplY3RfdmFycyggJGRhdGEgKTsKCQkJ
CWZvcmVhY2ggKCAkcHJvcHMgYXMgJGtleSA9PiAkdmFsdWUgKSB7CgkJCQkJJF90bXAtPiRrZXkg
PSAkdGhpcy0+cmVjdXJzaXZlX3Vuc2VyaWFsaXplX3JlcGxhY2UoICRmcm9tLCAkdG8sICR2YWx1
ZSwgZmFsc2UgKTsKCQkJCX0KCgkJCQkkZGF0YSA9ICRfdG1wOwoJCQkJdW5zZXQoICRfdG1wICk7
CgkJCX0KCgkJCWVsc2UgewoJCQkJaWYgKCBpc19zdHJpbmcoICRkYXRhICkgKSB7CgkJCQkJJGRh
dGEgPSAkdGhpcy0+c3RyX3JlcGxhY2UoICRmcm9tLCAkdG8sICRkYXRhICk7CgoJCQkJfQoJCQl9
CgoJCQlpZiAoICRzZXJpYWxpc2VkICkKCQkJCXJldHVybiBzZXJpYWxpemUoICRkYXRhICk7CgoJ
CX0gY2F0Y2goIEV4Y2VwdGlvbiAkZXJyb3IgKSB7CgoJCQkkdGhpcy0+YWRkX2Vycm9yKCAkZXJy
b3ItPmdldE1lc3NhZ2UoKSwgJ3Jlc3VsdHMnICk7CgoJCX0KCgkJcmV0dXJuICRkYXRhOwoJfQoK
CgkvKioKCSAqIFJlZ3VsYXIgZXhwcmVzc2lvbiBjYWxsYmFjayB0byBmaXggc2VyaWFsaXNlZCBz
dHJpbmcgbGVuZ3RocwoJICoKCSAqIEBwYXJhbSBhcnJheSAkbWF0Y2hlcyBtYXRjaGVzIGZyb20g
dGhlIHJlZ3VsYXIgZXhwcmVzc2lvbgoJICoKCSAqIEByZXR1cm4gc3RyaW5nCgkgKi8KCXB1Ymxp
YyBmdW5jdGlvbiBwcmVnX2ZpeF9zZXJpYWxpc2VkX2NvdW50KCAkbWF0Y2hlcyApIHsKCQkkbGVu
Z3RoID0gbWJfc3RybGVuKCAkbWF0Y2hlc1sgMiBdICk7CgkJaWYgKCAkbGVuZ3RoICE9PSBpbnR2
YWwoICRtYXRjaGVzWyAxIF0gKSApCgkJCXJldHVybiAiczp7JGxlbmd0aH06XCJ7JG1hdGNoZXNb
Ml19XCI7IjsKCQlyZXR1cm4gJG1hdGNoZXNbIDAgXTsKCX0KCgoJLyoqCgkgKiBUaGUgbWFpbiBs
b29wIHRyaWdnZXJlZCBpbiBzdGVwIDUuIFVwIGhlcmUgdG8ga2VlcCBpdCBvdXQgb2YgdGhlIHdh
eSBvZiB0aGUKCSAqIEhUTUwuIFRoaXMgd2Fsa3MgZXZlcnkgdGFibGUgaW4gdGhlIGRiIHRoYXQg
d2FzIHNlbGVjdGVkIGluIHN0ZXAgMyBhbmQgdGhlbgoJICogd2Fsa3MgZXZlcnkgcm93IGFuZCBj
b2x1bW4gcmVwbGFjaW5nIGFsbCBvY2N1cmVuY2VzIG9mIGEgc3RyaW5nIHdpdGggYW5vdGhlci4K
CSAqIFdlIHNwbGl0IGxhcmdlIHRhYmxlcyBpbnRvIDUwLDAwMCByb3cgYmxvY2tzIHdoZW4gZGVh
bGluZyB3aXRoIHRoZW0gdG8gc2F2ZQoJICogb24gbWVtbW9yeSBjb25zdW1wdGlvbi4KCSAqCgkg
KiBAcGFyYW0gc3RyaW5nICRzZWFyY2ggICAgIFdoYXQgd2Ugd2FudCB0byByZXBsYWNlCgkgKiBA
cGFyYW0gc3RyaW5nICRyZXBsYWNlICAgIFdoYXQgd2Ugd2FudCB0byByZXBsYWNlIGl0IHdpdGgu
CgkgKiBAcGFyYW0gYXJyYXkgICR0YWJsZXMgICAgIFRoZSB0YWJsZXMgd2Ugd2FudCB0byBsb29r
IGF0LgoJICoKCSAqIEByZXR1cm4gYXJyYXkgICAgQ29sbGVjdGlvbiBvZiBpbmZvcm1hdGlvbiBn
YXRoZXJlZCBkdXJpbmcgdGhlIHJ1bi4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHJlcGxhY2VyKCAk
c2VhcmNoID0gJycsICRyZXBsYWNlID0gJycsICR0YWJsZXMgPSBhcnJheSggKSApIHsKCgkJLy8g
Y2hlY2sgd2UgaGF2ZSBhIHNlYXJjaCBzdHJpbmcsIGJhaWwgaWYgbm90CgkJaWYgKCBlbXB0eSgg
JHNlYXJjaCApICkgewoJCQkkdGhpcy0+YWRkX2Vycm9yKCAnU2VhcmNoIHN0cmluZyBpcyBlbXB0
eScsICdzZWFyY2gnICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRyZXBvcnQgPSBhcnJheSgg
J3RhYmxlcycgPT4gMCwKCQkJCQkJICdyb3dzJyA9PiAwLAoJCQkJCQkgJ2NoYW5nZScgPT4gMCwK
CQkJCQkJICd1cGRhdGVzJyA9PiAwLAoJCQkJCQkgJ3N0YXJ0JyA9PiBtaWNyb3RpbWUoICksCgkJ
CQkJCSAnZW5kJyA9PiBtaWNyb3RpbWUoICksCgkJCQkJCSAnZXJyb3JzJyA9PiBhcnJheSggKSwK
CQkJCQkJICd0YWJsZV9yZXBvcnRzJyA9PiBhcnJheSggKQoJCQkJCQkgKTsKCgkJJHRhYmxlX3Jl
cG9ydCA9IGFycmF5KAoJCQkJCQkgJ3Jvd3MnID0+IDAsCgkJCQkJCSAnY2hhbmdlJyA9PiAwLAoJ
CQkJCQkgJ2NoYW5nZXMnID0+IGFycmF5KCApLAoJCQkJCQkgJ3VwZGF0ZXMnID0+IDAsCgkJCQkJ
CSAnc3RhcnQnID0+IG1pY3JvdGltZSggKSwKCQkJCQkJICdlbmQnID0+IG1pY3JvdGltZSggKSwK
CQkJCQkJICdlcnJvcnMnID0+IGFycmF5KCApLAoJCQkJCQkgKTsKCgkJJGRyeV9ydW4gPSAkdGhp
cy0+Z2V0KCAnZHJ5X3J1bicgKTsKCgkJaWYgKCAkdGhpcy0+Z2V0KCAnZHJ5X3J1bicgKSApIAkv
LyBSZXBvcnQgdGhpcyBhcyBhIHNlYXJjaC1vbmx5IHJ1bi4KCQkJJHRoaXMtPmFkZF9lcnJvcigg
J1RoZSBkcnktcnVuIG9wdGlvbiB3YXMgc2VsZWN0ZWQuIE5vIHJlcGxhY2VtZW50cyB3aWxsIGJl
IG1hZGUuJywgJ3Jlc3VsdHMnICk7CgoJCS8vIGlmIG5vIHRhYmxlcyBzZWxlY3RlZCBhc3N1bWUg
YWxsCgkJaWYgKCBlbXB0eSggJHRhYmxlcyApICkgewoJCQkkYWxsX3RhYmxlcyA9ICR0aGlzLT5n
ZXRfdGFibGVzKCk7CgkJCSR0YWJsZXMgPSBhcnJheV9rZXlzKCAkYWxsX3RhYmxlcyApOwoJCX0K
CgkJaWYgKCBpc19hcnJheSggJHRhYmxlcyApICYmICEgZW1wdHkoICR0YWJsZXMgKSApIHsKCgkJ
CWZvcmVhY2goICR0YWJsZXMgYXMgJHRhYmxlICkgewoKCQkJCSRlbmNvZGluZyA9ICR0aGlzLT5n
ZXRfdGFibGVfY2hhcmFjdGVyX3NldCggJHRhYmxlICk7CgkJCQlzd2l0Y2goICRlbmNvZGluZyAp
IHsKCgkJCQkJLy8gVGFibGVzIGVuY29kZWQgd2l0aCB0aGlzIHdvcmsgZm9yIG1lIG9ubHkgd2hl
biBJIHNldCBuYW1lcyB0byB1dGY4LiBJIGRvbid0IHRydXN0IHRoaXMgaW4gdGhlIHdpbGQgc28g
SSdtIGdvaW5nIHRvIGF2b2lkLgoJCQkJCWNhc2UgJ3V0ZjE2JzoKCQkJCQljYXNlICd1dGYzMic6
CgkJCQkJCS8vJGVuY29kaW5nID0gJ3V0ZjgnOwoJCQkJCQkkdGhpcy0+YWRkX2Vycm9yKCAiVGhl
IHRhYmxlIFwieyR0YWJsZX1cIiBpcyBlbmNvZGVkIHVzaW5nIFwieyRlbmNvZGluZ31cIiB3aGlj
aCBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuIiwgJ3Jlc3VsdHMnICk7CgkJCQkJCWNvbnRpbnVl
OwoJCQkJCQlicmVhazsKCgkJCQkJZGVmYXVsdDoKCQkJCQkJJHRoaXMtPmRiX3NldF9jaGFyc2V0
KCAkZW5jb2RpbmcgKTsKCQkJCQkJYnJlYWs7CgkJCQl9CgoKCQkJCSRyZXBvcnRbICd0YWJsZXMn
IF0rKzsKCgkJCQkvLyBnZXQgcHJpbWFyeSBrZXkgYW5kIGNvbHVtbnMKCQkJCWxpc3QoICRwcmlt
YXJ5X2tleSwgJGNvbHVtbnMgKSA9ICR0aGlzLT5nZXRfY29sdW1ucyggJHRhYmxlICk7CgoJCQkJ
aWYgKCAkcHJpbWFyeV9rZXkgPT09IG51bGwgKSB7CgkJCQkJJHRoaXMtPmFkZF9lcnJvciggIlRo
ZSB0YWJsZSBcInskdGFibGV9XCIgaGFzIG5vIHByaW1hcnkga2V5LiBDaGFuZ2VzIHdpbGwgaGF2
ZSB0byBiZSBtYWRlIG1hbnVhbGx5LiIsICdyZXN1bHRzJyApOwoJCQkJCWNvbnRpbnVlOwoJCQkJ
fQoKCQkJCS8vIGNyZWF0ZSBuZXcgdGFibGUgcmVwb3J0IGluc3RhbmNlCgkJCQkkbmV3X3RhYmxl
X3JlcG9ydCA9ICR0YWJsZV9yZXBvcnQ7CgkJCQkkbmV3X3RhYmxlX3JlcG9ydFsgJ3N0YXJ0JyBd
ID0gbWljcm90aW1lKCk7CgoJCQkJJHRoaXMtPmxvZyggJ3NlYXJjaF9yZXBsYWNlX3RhYmxlX3N0
YXJ0JywgJHRhYmxlLCAkc2VhcmNoLCAkcmVwbGFjZSApOwoKCQkJCS8vIENvdW50IHRoZSBudW1i
ZXIgb2Ygcm93cyB3ZSBoYXZlIGluIHRoZSB0YWJsZSBpZiBsYXJnZSB3ZSdsbCBzcGxpdCBpbnRv
IGJsb2NrcywgVGhpcyBpcyBhIG1vZCBmcm9tIFNpbW9uIFdoZWF0bGV5CgkJCQkkcm93X2NvdW50
ID0gJHRoaXMtPmRiX3F1ZXJ5KCAiU0VMRUNUIENPVU5UKCopIEZST00gYHskdGFibGV9YCIgKTsK
CQkJCSRyb3dzX3Jlc3VsdCA9ICR0aGlzLT5kYl9mZXRjaCggJHJvd19jb3VudCApOwoJCQkJJHJv
d19jb3VudCA9ICRyb3dzX3Jlc3VsdFsgMCBdOwoKCQkJCSRwYWdlX3NpemUgPSAkdGhpcy0+Z2V0
KCAncGFnZV9zaXplJyApOwoJCQkJJHBhZ2VzID0gY2VpbCggJHJvd19jb3VudCAvICRwYWdlX3Np
emUgKTsKCgkJCQlmb3IoICRwYWdlID0gMDsgJHBhZ2UgPCAkcGFnZXM7ICRwYWdlKysgKSB7CgoJ
CQkJCSRzdGFydCA9ICRwYWdlICogJHBhZ2Vfc2l6ZTsKCgkJCQkJLy8gR3JhYiB0aGUgY29udGVu
dCBvZiB0aGUgdGFibGUKCQkJCQkkZGF0YSA9ICR0aGlzLT5kYl9xdWVyeSggc3ByaW50ZiggJ1NF
TEVDVCAqIEZST00gYCVzYCBMSU1JVCAlZCwgJWQnLCAkdGFibGUsICRzdGFydCwgJHBhZ2Vfc2l6
ZSApICk7CgoJCQkJCWlmICggISAkZGF0YSApCgkJCQkJCSR0aGlzLT5hZGRfZXJyb3IoICR0aGlz
LT5kYl9lcnJvciggKSwgJ3Jlc3VsdHMnICk7CgoJCQkJCXdoaWxlICggJHJvdyA9ICR0aGlzLT5k
Yl9mZXRjaCggJGRhdGEgKSApIHsKCgkJCQkJCSRyZXBvcnRbICdyb3dzJyBdKys7IC8vIEluY3Jl
bWVudCB0aGUgcm93IGNvdW50ZXIKCQkJCQkJJG5ld190YWJsZV9yZXBvcnRbICdyb3dzJyBdKys7
CgoJCQkJCQkkdXBkYXRlX3NxbCA9IGFycmF5KCApOwoJCQkJCQkkd2hlcmVfc3FsID0gYXJyYXko
ICk7CgkJCQkJCSR1cGRhdGUgPSBmYWxzZTsKCgkJCQkJCWZvcmVhY2goICRjb2x1bW5zIGFzICRj
b2x1bW4gKSB7CgoJCQkJCQkJJGVkaXRlZF9kYXRhID0gJGRhdGFfdG9fZml4ID0gJHJvd1sgJGNv
bHVtbiBdOwoKCQkJCQkJCWlmICggJHByaW1hcnlfa2V5ID09ICRjb2x1bW4gKSB7CgkJCQkJCQkJ
JHdoZXJlX3NxbFtdID0gImB7JGNvbHVtbn1gID0gIiAuICR0aGlzLT5kYl9lc2NhcGUoICRkYXRh
X3RvX2ZpeCApOwoJCQkJCQkJCWNvbnRpbnVlOwoJCQkJCQkJfQoKCQkJCQkJCS8vIGV4Y2x1ZGUg
Y29scwoJCQkJCQkJaWYgKCBpbl9hcnJheSggJGNvbHVtbiwgJHRoaXMtPmV4Y2x1ZGVfY29scyAp
ICkKCQkJCQkJCQljb250aW51ZTsKCgkJCQkJCQkvLyBpbmNsdWRlIGNvbHMKCQkJCQkJCWlmICgg
ISBlbXB0eSggJHRoaXMtPmluY2x1ZGVfY29scyApICYmICEgaW5fYXJyYXkoICRjb2x1bW4sICR0
aGlzLT5pbmNsdWRlX2NvbHMgKSApCgkJCQkJCQkJY29udGludWU7CgoJCQkJCQkJLy8gUnVuIGEg
c2VhcmNoIHJlcGxhY2Ugb24gdGhlIGRhdGEgdGhhdCdsbCByZXNwZWN0IHRoZSBzZXJpYWxpc2F0
aW9uLgoJCQkJCQkJJGVkaXRlZF9kYXRhID0gJHRoaXMtPnJlY3Vyc2l2ZV91bnNlcmlhbGl6ZV9y
ZXBsYWNlKCAkc2VhcmNoLCAkcmVwbGFjZSwgJGRhdGFfdG9fZml4ICk7CgoJCQkJCQkJLy8gU29t
ZXRoaW5nIHdhcyBjaGFuZ2VkCgkJCQkJCQlpZiAoICRlZGl0ZWRfZGF0YSAhPSAkZGF0YV90b19m
aXggKSB7CgoJCQkJCQkJCSRyZXBvcnRbICdjaGFuZ2UnIF0rKzsKCQkJCQkJCQkkbmV3X3RhYmxl
X3JlcG9ydFsgJ2NoYW5nZScgXSsrOwoKCQkJCQkJCQkvLyBsb2cgZmlyc3QgeCBjaGFuZ2VzCgkJ
CQkJCQkJaWYgKCAkbmV3X3RhYmxlX3JlcG9ydFsgJ2NoYW5nZScgXSA8PSAkdGhpcy0+Z2V0KCAn
cmVwb3J0X2NoYW5nZV9udW0nICkgKSB7CgkJCQkJCQkJCSRuZXdfdGFibGVfcmVwb3J0WyAnY2hh
bmdlcycgXVtdID0gYXJyYXkoCgkJCQkJCQkJCQkncm93JyA9PiAkbmV3X3RhYmxlX3JlcG9ydFsg
J3Jvd3MnIF0sCgkJCQkJCQkJCQknY29sdW1uJyA9PiAkY29sdW1uLAoJCQkJCQkJCQkJJ2Zyb20n
ID0+IHV0ZjhfZW5jb2RlKCAkZGF0YV90b19maXggKSwKCQkJCQkJCQkJCSd0bycgPT4gdXRmOF9l
bmNvZGUoICRlZGl0ZWRfZGF0YSApCgkJCQkJCQkJCSk7CgkJCQkJCQkJfQoKCQkJCQkJCQkkdXBk
YXRlX3NxbFtdID0gImB7JGNvbHVtbn1gID0gIiAuICR0aGlzLT5kYl9lc2NhcGUoICRlZGl0ZWRf
ZGF0YSApOwoJCQkJCQkJCSR1cGRhdGUgPSB0cnVlOwoKCQkJCQkJCX0KCgkJCQkJCX0KCgkJCQkJ
CWlmICggJGRyeV9ydW4gKSB7CgkJCQkJCQkvLyBub3RoaW5nIGZvciB0aGlzIHN0YXRlCgkJCQkJ
CX0gZWxzZWlmICggJHVwZGF0ZSAmJiAhIGVtcHR5KCAkd2hlcmVfc3FsICkgKSB7CgoJCQkJCQkJ
JHNxbCA9ICdVUERBVEUgJyAuICR0YWJsZSAuICcgU0VUICcgLiBpbXBsb2RlKCAnLCAnLCAkdXBk
YXRlX3NxbCApIC4gJyBXSEVSRSAnIC4gaW1wbG9kZSggJyBBTkQgJywgYXJyYXlfZmlsdGVyKCAk
d2hlcmVfc3FsICkgKTsKCQkJCQkJCSRyZXN1bHQgPSAkdGhpcy0+ZGJfdXBkYXRlKCAkc3FsICk7
CgoJCQkJCQkJaWYgKCAhIGlzX2ludCggJHJlc3VsdCApICYmICEgJHJlc3VsdCApIHsKCgkJCQkJ
CQkJJHRoaXMtPmFkZF9lcnJvciggJHRoaXMtPmRiX2Vycm9yKCApLCAncmVzdWx0cycgKTsKCgkJ
CQkJCQl9IGVsc2UgewoKCQkJCQkJCQkkcmVwb3J0WyAndXBkYXRlcycgXSsrOwoJCQkJCQkJCSRu
ZXdfdGFibGVfcmVwb3J0WyAndXBkYXRlcycgXSsrOwoJCQkJCQkJfQoKCQkJCQkJfQoKCQkJCQl9
CgoJCQkJCSR0aGlzLT5kYl9mcmVlX3Jlc3VsdCggJGRhdGEgKTsKCgkJCQl9CgoJCQkJJG5ld190
YWJsZV9yZXBvcnRbICdlbmQnIF0gPSBtaWNyb3RpbWUoKTsKCgkJCQkvLyBzdG9yZSB0YWJsZSBy
ZXBvcnQgaW4gbWFpbgoJCQkJJHJlcG9ydFsgJ3RhYmxlX3JlcG9ydHMnIF1bICR0YWJsZSBdID0g
JG5ld190YWJsZV9yZXBvcnQ7CgoJCQkJLy8gbG9nIHJlc3VsdAoJCQkJJHRoaXMtPmxvZyggJ3Nl
YXJjaF9yZXBsYWNlX3RhYmxlX2VuZCcsICR0YWJsZSwgJG5ld190YWJsZV9yZXBvcnQgKTsKCQkJ
fQoKCQl9CgoJCSRyZXBvcnRbICdlbmQnIF0gPSBtaWNyb3RpbWUoICk7CgoJCSR0aGlzLT5sb2co
ICdzZWFyY2hfcmVwbGFjZV9lbmQnLCAkc2VhcmNoLCAkcmVwbGFjZSwgJHJlcG9ydCApOwoKCQly
ZXR1cm4gJHJlcG9ydDsKCX0KCgoJcHVibGljIGZ1bmN0aW9uIGdldF9jb2x1bW5zKCAkdGFibGUg
KSB7CgoJCSRwcmltYXJ5X2tleSA9IG51bGw7CgkJJGNvbHVtbnMgPSBhcnJheSggKTsKCgkJLy8g
R2V0IGEgbGlzdCBvZiBjb2x1bW5zIGluIHRoaXMgdGFibGUKCQkkZmllbGRzID0gJHRoaXMtPmRi
X3F1ZXJ5KCAiREVTQ1JJQkUgeyR0YWJsZX0iICk7CgkJaWYgKCAhICRmaWVsZHMgKSB7CgkJCSR0
aGlzLT5hZGRfZXJyb3IoICR0aGlzLT5kYl9lcnJvciggKSwgJ2RiJyApOwoJCX0gZWxzZSB7CgkJ
CXdoaWxlKCAkY29sdW1uID0gJHRoaXMtPmRiX2ZldGNoKCAkZmllbGRzICkgKSB7CgkJCQkkY29s
dW1uc1tdID0gJGNvbHVtblsgJ0ZpZWxkJyBdOwoJCQkJaWYgKCAkY29sdW1uWyAnS2V5JyBdID09
ICdQUkknICkKCQkJCQkkcHJpbWFyeV9rZXkgPSAkY29sdW1uWyAnRmllbGQnIF07CgkJCX0KCQl9
CgoJCXJldHVybiBhcnJheSggJHByaW1hcnlfa2V5LCAkY29sdW1ucyApOwoJfQoKCglwdWJsaWMg
ZnVuY3Rpb24gZG9fY29sdW1uKCkgewoKCX0KCgoJLyoqCgkgKiBDb252ZXJ0IHRhYmxlIGVuZ2lu
ZXMKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRlbmdpbmUgRW5naW5lIHR5cGUKCSAqIEBwYXJhbSBh
cnJheSAkdGFibGVzCgkgKgoJICogQHJldHVybiBhcnJheSAgICBNb2RpZmljYXRpb24gcmVwb3J0
CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiB1cGRhdGVfZW5naW5lKCAkZW5naW5lID0gJ015SVNBTScs
ICR0YWJsZXMgPSBhcnJheSgpICkgewoKCQkkcmVwb3J0ID0gZmFsc2U7CgoJCWlmICggZW1wdHko
ICR0aGlzLT5lbmdpbmVzICkgKQoJCQkkdGhpcy0+c2V0KCAnZW5naW5lcycsICR0aGlzLT5nZXRf
ZW5naW5lcygpICk7CgoJCWlmICggaW5fYXJyYXkoICRlbmdpbmUsICR0aGlzLT5nZXQoICdlbmdp
bmVzJyApICkgKSB7CgoJCQkkcmVwb3J0ID0gYXJyYXkoICdlbmdpbmUnID0+ICRlbmdpbmUsICdj
b252ZXJ0ZWQnID0+IGFycmF5KCkgKTsKCgkJCWlmICggZW1wdHkoICR0YWJsZXMgKSApIHsKCQkJ
CSRhbGxfdGFibGVzID0gJHRoaXMtPmdldF90YWJsZXMoKTsKCQkJCSR0YWJsZXMgPSBhcnJheV9r
ZXlzKCAkYWxsX3RhYmxlcyApOwoJCQl9CgoJCQlmb3JlYWNoKCAkdGFibGVzIGFzICR0YWJsZSAp
IHsKCQkJCSR0YWJsZV9pbmZvID0gJGFsbF90YWJsZXNbICR0YWJsZSBdOwoKCQkJCS8vIGFyZSB3
ZSB1cGRhdGluZyB0aGUgZW5naW5lPwoJCQkJaWYgKCAkdGFibGVfaW5mb1sgJ0VuZ2luZScgXSAh
PSAkZW5naW5lICkgewoJCQkJCSRlbmdpbmVfY29udmVydGVkID0gJHRoaXMtPmRiX3F1ZXJ5KCAi
YWx0ZXIgdGFibGUgeyR0YWJsZX0gZW5naW5lID0geyRlbmdpbmV9OyIgKTsKCQkJCQlpZiAoICEg
JGVuZ2luZV9jb252ZXJ0ZWQgKQoJCQkJCQkkdGhpcy0+YWRkX2Vycm9yKCAkdGhpcy0+ZGJfZXJy
b3IoICksICdyZXN1bHRzJyApOwoJCQkJCWVsc2UKCQkJCQkJJHJlcG9ydFsgJ2NvbnZlcnRlZCcg
XVsgJHRhYmxlIF0gPSB0cnVlOwoJCQkJCWNvbnRpbnVlOwoJCQkJfSBlbHNlIHsKCQkJCQkkcmVw
b3J0WyAnY29udmVydGVkJyBdWyAkdGFibGUgXSA9IGZhbHNlOwoJCQkJfQoKCQkJCWlmICggaXNz
ZXQoICRyZXBvcnRbICdjb252ZXJ0ZWQnIF1bICR0YWJsZSBdICkgKQoJCQkJCSR0aGlzLT5sb2co
ICd1cGRhdGVfZW5naW5lJywgJHRhYmxlLCAkcmVwb3J0LCAkZW5naW5lICk7CgkJCX0KCgkJfSBl
bHNlIHsKCgkJCSR0aGlzLT5hZGRfZXJyb3IoICdDYW5ub3QgY29udmVydCB0YWJsZXMgdG8gdW5z
dXBwb3J0ZWQgdGFibGUgZW5naW5lICZyZHF1bzsnIC4gJGVuZ2luZSAuICcmbGRxdW87JywgJ3Jl
c3VsdHMnICk7CgoJCX0KCgkJcmV0dXJuICRyZXBvcnQ7Cgl9CgoKCS8qKgoJICogVXBkYXRlcyB0
aGUgY2hhcmFjdGVyc2V0IGFuZCBjb2xsYXRpb24gb24gdGhlIHNwZWNpZmllZCB0YWJsZXMKCSAq
CgkgKiBAcGFyYW0gc3RyaW5nICRjb2xsYXRlIHRhYmxlIGNvbGxhdGlvbgoJICogQHBhcmFtIGFy
cmF5ICR0YWJsZXMgIHRhYmxlcyB0byBtb2RpZnkKCSAqCgkgKiBAcmV0dXJuIGFycmF5ICAgIE1v
ZGlmaWNhdGlvbiByZXBvcnQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZV9jb2xsYXRpb24o
ICRjb2xsYXRpb24gPSAndXRmOF91bmljb2RlX2NpJywgJHRhYmxlcyA9IGFycmF5KCkgKSB7CgoJ
CSRyZXBvcnQgPSBmYWxzZTsKCgkJaWYgKCBpc19zdHJpbmcoICRjb2xsYXRpb24gKSApIHsKCgkJ
CSRyZXBvcnQgPSBhcnJheSggJ2NvbGxhdGlvbicgPT4gJGNvbGxhdGlvbiwgJ2NvbnZlcnRlZCcg
PT4gYXJyYXkoKSApOwoKCQkJaWYgKCBlbXB0eSggJHRhYmxlcyApICkgewoJCQkJJGFsbF90YWJs
ZXMgPSAkdGhpcy0+Z2V0X3RhYmxlcygpOwoJCQkJJHRhYmxlcyA9IGFycmF5X2tleXMoICRhbGxf
dGFibGVzICk7CgkJCX0KCgkJCS8vIGNoYXJzZXQgaXMgc2FtZSBhcyBjb2xsYXRpb24gdXAgdG8g
Zmlyc3QgdW5kZXJzY29yZQoJCQkkY2hhcnNldCA9IHByZWdfcmVwbGFjZSggJy9eKFteX10rKS4q
JC8nLCAnJDEnLCAkY29sbGF0aW9uICk7CgoJCQlmb3JlYWNoKCAkdGFibGVzIGFzICR0YWJsZSAp
IHsKCQkJCSR0YWJsZV9pbmZvID0gJGFsbF90YWJsZXNbICR0YWJsZSBdOwoKCQkJCS8vIGFyZSB3
ZSB1cGRhdGluZyB0aGUgZW5naW5lPwoJCQkJaWYgKCAkdGFibGVfaW5mb1sgJ0NvbGxhdGlvbicg
XSAhPSAkY29sbGF0aW9uICkgewoJCQkJCSRlbmdpbmVfY29udmVydGVkID0gJHRoaXMtPmRiX3F1
ZXJ5KCAiYWx0ZXIgdGFibGUgeyR0YWJsZX0gY29udmVydCB0byBjaGFyYWN0ZXIgc2V0IHskY2hh
cnNldH0gY29sbGF0ZSB7JGNvbGxhdGlvbn07IiApOwoJCQkJCWlmICggISAkZW5naW5lX2NvbnZl
cnRlZCApCgkJCQkJCSR0aGlzLT5hZGRfZXJyb3IoICR0aGlzLT5kYl9lcnJvciggKSwgJ3Jlc3Vs
dHMnICk7CgkJCQkJZWxzZQoJCQkJCQkkcmVwb3J0WyAnY29udmVydGVkJyBdWyAkdGFibGUgXSA9
IHRydWU7CgkJCQkJY29udGludWU7CgkJCQl9IGVsc2UgewoJCQkJCSRyZXBvcnRbICdjb252ZXJ0
ZWQnIF1bICR0YWJsZSBdID0gZmFsc2U7CgkJCQl9CgoJCQkJaWYgKCBpc3NldCggJHJlcG9ydFsg
J2NvbnZlcnRlZCcgXVsgJHRhYmxlIF0gKSApCgkJCQkJJHRoaXMtPmxvZyggJ3VwZGF0ZV9jb2xs
YXRpb24nLCAkdGFibGUsICRyZXBvcnQsICRjb2xsYXRpb24gKTsKCQkJfQoKCQl9IGVsc2UgewoK
CQkJJHRoaXMtPmFkZF9lcnJvciggJ0NvbGxhdGlvbiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nJywg
J3Jlc3VsdHMnICk7CgoJCX0KCgkJcmV0dXJuICRyZXBvcnQ7Cgl9CgoKCS8qKgoJICogUmVwbGFj
ZSBhbGwgb2NjdXJyZW5jZXMgb2YgdGhlIHNlYXJjaCBzdHJpbmcgd2l0aCB0aGUgcmVwbGFjZW1l
bnQgc3RyaW5nLgoJICoKCSAqIEBhdXRob3IgU2VhbiBNdXJwaHkgPHNlYW5AaWFtc2Vhbm11cnBo
eS5jb20+CgkgKiBAY29weXJpZ2h0IENvcHlyaWdodCAyMDEyIFNlYW4gTXVycGh5LiBBbGwgcmln
aHRzIHJlc2VydmVkLgoJICogQGxpY2Vuc2UgaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVi
bGljZG9tYWluL3plcm8vMS4wLwoJICogQGxpbmsgaHR0cDovL3BocC5uZXQvbWFudWFsL2Z1bmN0
aW9uLnN0ci1yZXBsYWNlLnBocAoJICoKCSAqIEBwYXJhbSBtaXhlZCAkc2VhcmNoCgkgKiBAcGFy
YW0gbWl4ZWQgJHJlcGxhY2UKCSAqIEBwYXJhbSBtaXhlZCAkc3ViamVjdAoJICogQHBhcmFtIGlu
dCAkY291bnQKCSAqIEByZXR1cm4gbWl4ZWQKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBt
Yl9zdHJfcmVwbGFjZSggJHNlYXJjaCwgJHJlcGxhY2UsICRzdWJqZWN0LCAmJGNvdW50ID0gMCAp
IHsKCQlpZiAoICEgaXNfYXJyYXkoICRzdWJqZWN0ICkgKSB7CgkJCS8vIE5vcm1hbGl6ZSAkc2Vh
cmNoIGFuZCAkcmVwbGFjZSBzbyB0aGV5IGFyZSBib3RoIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5n
dGgKCQkJJHNlYXJjaGVzID0gaXNfYXJyYXkoICRzZWFyY2ggKSA/IGFycmF5X3ZhbHVlcyggJHNl
YXJjaCApIDogYXJyYXkoICRzZWFyY2ggKTsKCQkJJHJlcGxhY2VtZW50cyA9IGlzX2FycmF5KCAk
cmVwbGFjZSApID8gYXJyYXlfdmFsdWVzKCAkcmVwbGFjZSApIDogYXJyYXkoICRyZXBsYWNlICk7
CgkJCSRyZXBsYWNlbWVudHMgPSBhcnJheV9wYWQoICRyZXBsYWNlbWVudHMsIGNvdW50KCAkc2Vh
cmNoZXMgKSwgJycgKTsKCgkJCWZvcmVhY2ggKCAkc2VhcmNoZXMgYXMgJGtleSA9PiAkc2VhcmNo
ICkgewoJCQkJJHBhcnRzID0gbWJfc3BsaXQoIHByZWdfcXVvdGUoICRzZWFyY2ggKSwgJHN1Ympl
Y3QgKTsKCQkJCSRjb3VudCArPSBjb3VudCggJHBhcnRzICkgLSAxOwoJCQkJJHN1YmplY3QgPSBp
bXBsb2RlKCAkcmVwbGFjZW1lbnRzWyAka2V5IF0sICRwYXJ0cyApOwoJCQl9CgkJfSBlbHNlIHsK
CQkJLy8gQ2FsbCBtYl9zdHJfcmVwbGFjZSBmb3IgZWFjaCBzdWJqZWN0IGluIGFycmF5LCByZWN1
cnNpdmVseQoJCQlmb3JlYWNoICggJHN1YmplY3QgYXMgJGtleSA9PiAkdmFsdWUgKSB7CgkJCQkk
c3ViamVjdFsgJGtleSBdID0gc2VsZjo6bWJfc3RyX3JlcGxhY2UoICRzZWFyY2gsICRyZXBsYWNl
LCAkdmFsdWUsICRjb3VudCApOwoJCQl9CgkJfQoKCQlyZXR1cm4gJHN1YmplY3Q7Cgl9CgoKCS8q
KgoJICogV3JhcHBlciBmb3IgcmVnZXgvbm9uIHJlZ2V4IHNlYXJjaCAmIHJlcGxhY2UKCSAqCgkg
KiBAcGFyYW0gc3RyaW5nICRzZWFyY2gKCSAqIEBwYXJhbSBzdHJpbmcgJHJlcGxhY2UKCSAqIEBw
YXJhbSBzdHJpbmcgJHN0cmluZwoJICogQHBhcmFtIGludCAkY291bnQKCSAqCgkgKiBAcmV0dXJu
IHN0cmluZwoJICovCglwdWJsaWMgZnVuY3Rpb24gc3RyX3JlcGxhY2UoICRzZWFyY2gsICRyZXBs
YWNlLCAkc3RyaW5nLCAmJGNvdW50ID0gMCApIHsKCQlpZiAoICR0aGlzLT5nZXQoICdyZWdleCcg
KSApIHsKCQkJcmV0dXJuIHByZWdfcmVwbGFjZSggJHNlYXJjaCwgJHJlcGxhY2UsICRzdHJpbmcs
IC0xLCAkY291bnQgKTsKCQl9IGVsc2VpZiggZnVuY3Rpb25fZXhpc3RzKCAnbWJfc3BsaXQnICkg
KSB7CgkJCXJldHVybiBzZWxmOjptYl9zdHJfcmVwbGFjZSggJHNlYXJjaCwgJHJlcGxhY2UsICRz
dHJpbmcsICRjb3VudCApOwoJCX0gZWxzZSB7CgkJCXJldHVybiBzdHJfcmVwbGFjZSggJHNlYXJj
aCwgJHJlcGxhY2UsICRzdHJpbmcsICRjb3VudCApOwoJCX0KCX0KCgkvKioKCSAqIENvbnZlcnQg
YSBzdHJpbmcgY29udGFpbmluZyB1bmljb2RlIGludG8gSFRNTCBlbnRpdGllcyBmb3IgZnJvbnQg
ZW5kIGRpc3BsYXkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRzdHJpbmcKCSAqCgkgKiBAcmV0dXJu
IHN0cmluZwoJICovCglwdWJsaWMgZnVuY3Rpb24gY2hhcnNldF9kZWNvZGVfdXRmXzgoICRzdHJp
bmcgKSB7CgkJLyogT25seSBkbyB0aGUgc2xvdyBjb252ZXJ0IGlmIHRoZXJlIGFyZSA4LWJpdCBj
aGFyYWN0ZXJzICovCgkJLyogYXZvaWQgdXNpbmcgMHhBMCAoXDI0MCkgaW4gZXJlZyByYW5nZXMu
IFJINzMgZG9lcyBub3QgbGlrZSB0aGF0ICovCgkJaWYgKCAhIHByZWdfbWF0Y2goICIvW1wyMDAt
XDIzN10vIiwgJHN0cmluZyApIGFuZCAhIHByZWdfbWF0Y2goICIvW1wyNDEtXDM3N10vIiwgJHN0
cmluZyApICkKCQkJcmV0dXJuICRzdHJpbmc7CgoJCS8vIGRlY29kZSB0aHJlZSBieXRlIHVuaWNv
ZGUgY2hhcmFjdGVycwoJCSRzdHJpbmcgPSBwcmVnX3JlcGxhY2UoICIvKFtcMzQwLVwzNTddKShb
XDIwMC1cMjc3XSkoW1wyMDAtXDI3N10pL2UiLAoJCQkiJyYjJy4oKG9yZCgnXFwxJyktMjI0KSo0
MDk2ICsgKG9yZCgnXFwyJyktMTI4KSo2NCArIChvcmQoJ1xcMycpLTEyOCkpLic7JyIsCgkJCSRz
dHJpbmcgKTsKCgkJLy8gZGVjb2RlIHR3byBieXRlIHVuaWNvZGUgY2hhcmFjdGVycwoJCSRzdHJp
bmcgPSBwcmVnX3JlcGxhY2UoICIvKFtcMzAwLVwzMzddKShbXDIwMC1cMjc3XSkvZSIsCgkJCSIn
JiMnLigob3JkKCdcXDEnKS0xOTIpKjY0KyhvcmQoJ1xcMicpLTEyOCkpLic7JyIsCgkJCSRzdHJp
bmcgKTsKCgkJcmV0dXJuICRzdHJpbmc7Cgl9Cgp9Cg==
EOF;
    }
}
