#!/usr/bin/php
<?php

DbSync::run();

class DbSync
{
	public static $mysqlPath = 'mysql';
	public static $mysqlDumpPath = 'mysqldump';
	public static $confDefaultFile = 'sync-db.json';

	public static function run()
	{
		return new self();
	}

	private $config = null;

	private $args = null;

	private $srdb = '/tmp/srdb.cli.php';

	private $opts = array(
		'c:' => 'conf:',
		's:' => 'source:',
		't:' => 'target:',
		'o:' => 'output:',
		'r' => 'replacements-only',
		'n' => 'no-replacement',
		'h' => 'help',
		'd' => 'debug'
	);

	private $srdbOpts = array(
		't:' => 'tables:',
		'i:' => 'include-cols:',
		'x:' => 'exclude-cols:',
		'g' => 'regex'
	);

	private $options = null;

	private $colors = array(
		'no'     => '00',
		'grey'   => '37',
		'yellow' => '33',
		'red'    => '31',
		'green'  => '32',
		'blue'   => '34',
		'purple' => '35',
		'ocean'  => '36'
	);

	private $envs = null;

	private function __construct()
	{
		global $argv;
		$this->args = $argv;

		$this->script = basename($argv[0]);
		$this->options = getopt(
			implode('', array_keys($this->opts)),
			array_values($this->opts)
		);

		$this->srdb = str_replace('.cli.php', uniqid().'.php', $this->srdb);

		if ($this->getOpt('help')) {
			$this->help();
		}

		$this->loadConfig();
		$this->checkConnections();

		// everything ok, display confirm message
		if ($this->confirm()) {
			$this->proceed();
		}
	}

	private function confirm()
	{
		if ($this->getOpt('r')) {
			echo "\nReady to apply replacements:\n\n";
		}
		else {
			echo "\nReady to sync:\n\n";
		}

		$cData = 'grey';
		$cSymbol ='yellow';

		$items = array('from' => 'source');
		if ($this->getOpt('output')) {
			$items['to'] = 'file';
		}
		else {
			$items['to'] = 'target';
		}
		$out = array();

		// label
		$length = 0;
		foreach ($items as $key => $env) {
			$out[$env] = $key .' ';
			if ($env == 'file') {
				$out[$env] .= $this->c('file', 'no');
			}
			else {
				$out[$env] .= $this->c($this->envs[$env]['env'], 'yellow');
			}
			$out[$env] .= ':';
			$length = max($length, strlen($out[$env]));
		}

		// detail
		foreach ($items as $key => $env) {

			echo str_pad($out[$env], $length + 2, ' ', STR_PAD_LEFT) ."  ";

			if ($env == 'file') {
				echo $this->c($this->getOpt('output'), $cData);
			}
			else {
				$config = $this->envs[$env];
				echo $this->c($config['user'], $cData) . $this->c('@', $cSymbol);
				if (array_key_exists('ssh', $config)) {
					echo $this->c('localhost', $cData);
				}
				else {
					echo $this->c($config['host'], $cData);
				}
				echo $this->c('/', $cSymbol) . $this->c($config['base'], $cData);

				if (array_key_exists('ssh', $config)) {
					echo $this->c(' ssh:', $cSymbol) . $this->c($config['ssh'], $cData);
//					echo $this->c(']', $cSymbol);
				}
			}
			echo "\n";
		}

		$answer = readline("\nDo you confirm? (yo/N) ");
		return preg_match('/[yo]/', $answer);
	}

	/**
	 * @param string $key The long option name to get
	 * @return string|null The option value, null if not found
	 */
	private function getOpt($key)
	{
		foreach ($this->opts as $short => $long) {
			// option with value
			if ($key.':' == $long || $key.':' == $short) {
				$short = str_replace(':', '', $short);
				$long = str_replace(':', '', $long);
				if (array_key_exists($long, $this->options)) {
					return $this->options[$long];
				}
				elseif (array_key_exists($short, $this->options)) {
					return $this->options[$short];
				}
				else {
					return null;
				}
			}
			// option without value
			elseif ($key == $long || $key == $short) {
				if (array_key_exists($long, $this->options)) {
					return true;
				}
				elseif (array_key_exists($short, $this->options)) {
					return true;
				}
				else {
					return false;
				}
			}
		}
		return null;
	}

	private function checkConnections()
	{
		$mysqlCmd = 'echo "use {base};" | mysql -u "{user}" -p"{pass}" -h "{host}" "{base}"';
		foreach ($this->envs as $env => $config) {
			$vars = array(
				'base' => $config['base'],
				'user' => $config['user'],
				'pass' => $config['pass']
			);
			if (array_key_exists('ssh', $config)) {
				// access distant mysql through ssh
				$vars['ssh'] = $config['ssh'];
				$vars['host'] = 'localhost';
				$result = $this->exec($this->nvsprintf('ssh {ssh} \'' . $mysqlCmd . '\' 2>&1', $vars));
			}
			else {
				// try direct access
				$vars['host'] = $config['host'];
				$result = $this->exec($this->nvsprintf($mysqlCmd .' 2>&1', $vars));
			}
			if ($result) {
				$this->error('Connection error for '. $config['env'] .' environment.', $result);
			}
		}
	}

	private function loadConfig()
	{
		$confFile = $this->getOpt('conf');
		if (!$confFile) {
			$confFile = self::$confDefaultFile;
		}

		if (!file_exists($confFile)) {
			$this->error('Can not find config file ' . $confFile, true);
		}

		$this->config = json_decode(file_get_contents($confFile), true);


		// loading environments
		if (!array_key_exists('environments', $this->config) || !$this->config['environments']) {
			$this->error('No environment found in config.');
		}

		$msgEnvs = "Available environments: ";
		$envNames = array_keys($this->config['environments']);
		array_walk($envNames, function(&$item) {
			$item = $this->c($item, 'yellow');
		});
		$msgEnvs .= implode(', ', $envNames). "\n";

		if (!$this->getOpt('source')) {
			$this->error('Missing source environment', $msgEnvs, true);
		}
		if (!$this->getOpt('target') && !$this->getOpt('output')) {
			$this->error('Missing target environment or output file', $msgEnvs, true);
		}
		if ($this->getOpt('output')) {
			if ($this->getOpt('target')) {
				$this->error('Can not have a target environment and an output file');
			}

			$output = $this->getOpt('output');
			if (file_exists($output)) {
				if (is_writable($output)) {
					$this->warning('Output file exists');
				}
				else {
					$this->error('Output file is not writable');
				}
			}
			elseif (!is_writable(dirname($output))) {
				$this->error('Output file directory is not writable');
			}
		}

		$this->envs = array();
		$envs       = array('source');
		if ($this->getOpt('target')) {
			$envs[] = 'target';
		}

		foreach ($envs as $env) {
			$name = $this->getOpt($env);
			if (!$name) {
				$this->error("Please give the $env option", $msgEnvs);
			}
			elseif (!array_key_exists($name, $this->config['environments'])) {
				$this->error("Can not found $name in environments.", $msgEnvs);
			}
			else {
				$this->envs[$env] = $this->config['environments'][$name];
				$this->envs[$env]['env'] = $name;
			}
		}
	}

	private function error($msg, $detail ='', $help =false)
	{
		echo $this->c($msg, 'red')."\n";
		if ($detail) {
			echo $detail ."\n";
		}

		if ($help) {
			$this->help();
		}
		exit;
	}

	private function warning($msg, $detail ='')
	{
		echo $this->c($msg, 'red')."\n";
		if ($detail) {
			echo $detail ."\n";
		}
	}

	private function help()
	{
		echo "Usage : ". $this->script ." [-c config_file] -s source (-t target | -o output)\n";
		echo "    -c, --conf\n";
		echo "      Configuration file to read. Defaults to ". self::$confDefaultFile .".\n";
		echo "    -s, --source\n";
		echo "      Source environment name.\n";
		echo "    -t, --target\n";
		echo "      Target environment name.\n";
		echo "    -o, --output\n";
		echo "      Use output file instead of target.\n";
		echo "    -r, --replacements-only\n";
		echo "      No database transfert, replacements only.\n";
		echo "    -n, --no-replacements\n";
		echo "      Do not execute replacements, database transfert only.\n";
		echo "    -d, --debug\n";
		echo "      Debug mode, no shell_exec execution.\n";
		echo "    -h, --help\n";
		echo "      Disply this help.\n";
		exit;
	}

	private function doing($msg)
	{
		echo $this->c("  [ ] ", 'grey'). $msg;
	}

	private function done($msg =null)
	{
		echo "\r  ";
		echo $this->c("[✔]", 'green');
		if ($msg) {
			echo ' '. $msg;
		}
		echo "\n";
	}

	private function fail($msg =null)
	{
		echo "\r  ";
		echo $this->c("[✘]", 'red');
		if ($msg) {
			echo ' '. $msg;
		}
		echo "\n";
		exit;
	}

	/**
	 * @param $format
	 * @param $vars
	 */
	private function nvsprintf($format, $vars = array())
	{
		return preg_replace_callback('/{(.*?)}/', function ($matches) use ($vars) {
			if (array_key_exists($matches[1], $vars)) {
				return $vars[$matches[1]];
			}
			else {
				return $matches[0];
			}
		}, $format);
	}

	private function proceed()
	{
		echo "\n";
		$source = $this->envs['source'];
		$target = array_key_exists('target', $this->envs) ? $this->envs['target'] : null;

		// option “r” is for replacement only
		if (!$this->getOpt('r')) {
			$this->doing('database transfer...');

			$dumpCmd = '{mysqldump} -u "{user}" -p"{pass}" --add-drop-table --no-create-db -h "{host}" "{base}"';

			$sourceCmd = $this->nvsprintf($dumpCmd, array(
				'mysqldump' => self::$mysqlDumpPath,
				'user' => $source['user'],
				'pass' => $source['pass'],
				'base' => $source['base']
			));

			if (array_key_exists('ssh', $source)) {
				$sourceCmd = $this->nvsprintf('ssh {ssh} \''. $sourceCmd .'\'', array(
					'host' => 'localhost',
					'ssh' => $source['ssh']
				));
			}
			else {
				$sourceCmd = $this->nvsprintf($sourceCmd, array(
					'host' => $source['host']
				));
			}

			if ($this->getOpt('output')) {
				$output = $this->exec($sourceCmd . ' > "' . $this->getOpt('output'). '"', $result);
				if ($result != 0) {
					$this->fail($output);
				}
			}
			elseif ($target) {

				$tCmd = '{mysql} -u "{user}" -p"{pass}" -h "{host}" "{base}"';
				$tCmd = $this->nvsprintf($tCmd, array(
					'mysql' => self::$mysqlPath,
					'user' => $target['user'],
					'pass' => $target['pass'],
					'base' => $target['base']
				));
				if (array_key_exists('ssh', $target)) {
					$tCmd = $this->nvsprintf('ssh {ssh} \''. $tCmd .'\'', array(
						'host' => 'localhost',
						'ssh' => $target['ssh']
					));
				}
				else {
					$tCmd = $this->nvsprintf($tCmd, array(
						'host' => $target['host']
					));
				}
				$this->exec($sourceCmd .' | '. $tCmd);
			}
			$this->done('database transfer succeeded      ');
		}

		// option “n” means “no replacements”
		if (!$this->getOpt('n') && $target && array_key_exists('replacements', $this->config)) {
			$this->doing('replacements in database...');
			$cmds = array();
			$cmds['cp'] = 'echo "{data}" | php -r \'echo base64_decode(stream_get_contents(STDIN));\'';
			$cmds['chmod'] = 'chmod +x {srdb}';
			$cmds['rm'] = 'rm {srdb}';

			if (array_key_exists('ssh', $target)) {
				$cmds['cp'] = $this->nvsprintf($cmds['cp'] .' | ssh {ssh} \'cat > {srdb}\'', array(
					'ssh' => $target['ssh']
				));
				$cmds['chmod'] = $this->nvsprintf('ssh {ssh} \''. $cmds['chmod'] .'\'', array(
					'ssh' => $target['ssh']
				));
				$cmds['rm'] = $this->nvsprintf('ssh {ssh} \''. $cmds['rm'] .'\'', array(
					'ssh' => $target['ssh']
				));
			}
			else {
				$cmds['cp'] .= ' > {srdb}';
			}

			// copy srdb to tmp
			$this->exec($this->nvsprintf($cmds['cp'], array(
				'data' => $this->getSrdbData(),
				'srdb' => $this->srdb,
			)));

			// chmod +x
			$this->exec($this->nvsprintf($cmds['chmod'], array(
				'srdb' => $this->srdb,
			)));

			$replaceCmd = '{srdb} -n "{base}" -u "{user}" -p"{pass}" -h "{host}" -s"{search}" -r"{replace}" {options}';
			$replaceCmd = $this->nvsprintf($replaceCmd, array(
				'srdb' => $this->srdb,
				'base' => $target['base'],
				'user' => $target['user'],
				'pass' => $target['pass']
			));
			if (array_key_exists('ssh', $target)) {
				$replaceCmd = $this->nvsprintf('ssh {ssh} \''. $replaceCmd .'\'', array(
					'host' => 'localhost',
					'ssh' => $target['ssh']
				));
			}
			else {
				$replaceCmd = $this->nvsprintf($replaceCmd, array(
					'host' => $target['host']
				));
			}

			$count = 0;
			foreach ($this->config['replacements'] as $replacement) {
				if (!array_key_exists($source['env'], $replacement)) {
					continue;
				}
				if (!array_key_exists($target['env'], $replacement)) {
					continue;
				}
				// options
				$options = '';
				if (array_key_exists('tables', $replacement)) {
					$options = '-t "'. $replacement['tables'] .'"';
				}
				$this->exec($this->nvsprintf($replaceCmd, array(
					'search' => $replacement[$source['env']],
					'replace' => $replacement[$target['env']],
					'options' => $options
				)));
				++$count;
			}

			$this->exec($this->nvsprintf($cmds['rm'], array(
				'srdb' => $this->srdb
			)));
			$this->done($count .' replacements executed      ');
		}
		echo "\n";
	}

	private function exec($cmd, &$output =null)
	{
		if ($this->getOpt('debug')) {

			$lmax = 256;
			if (strlen($cmd) > $lmax) {
				echo "\n". substr($cmd, 0, $lmax/2) .' ... '. substr($cmd, strlen($cmd) - $lmax/2) ."\n";
			}
			else {
				echo "\n". $cmd ."\n";
			}
			return 0;
		}
		else {
			$output = '';
			$result = 0;
			exec($cmd, $output, $result);
			$output = implode("\n", $output);
			return $result;
		}
	}

	private function c($text, $color ='no', $bold =false)
	{
		if (array_key_exists($color, $this->colors)) {
			return "\033[".($bold?'1':'0').';'.$this->colors[$color].'m'.$text."\033[0m";
		}
		else {
			return $text;
		}
	}

	private function getSrdbData()
	{
		/* This is a base64_encode of the merge of `srdb.class.php` and `srdb.cli.php`
		 * from https://github.com/interconnectit/Search-Replace-DB */
		## SRDB-DATA ##
		return '';
	}
}
